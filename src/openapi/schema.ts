/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Accounts
         * @description Retrieve accounts in your organization
         */
        get: operations["getAccounts"];
        put?: never;
        /**
         * Accounts
         * @description Create a new account in your organization
         */
        post: operations["postAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account
         * @description Retrieve an account in your organization
         */
        get: operations["getAccount"];
        /**
         * Account
         * @description Update an account in your organization
         */
        put: operations["putAccount"];
        post?: never;
        /**
         * Account
         * @description Delete an account in your organization
         */
        delete: operations["deleteAccount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Account Stakes
         * @description Add stakes to an account
         */
        post: operations["postAccountStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/portfolio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account Portfolio
         * @description Retrieve an account asset portfolio. USD balances are calculated based on recent asset prices. We use CoinGecko API to retrieve asset prices. The data is cached for 24h but it is possible to get real time data by using the refresh parameter.
         */
        get: operations["getAccountPortfolio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account Report
         * @description Get report of the account's stakes.
         */
        get: operations["getAccountReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{id}/portfolio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Organization Portfolio
         * @description Retrieve an organization asset portfolio. USD balances are calculated based on recent asset prices. We use CoinGecko API to retrieve asset prices. The data is cached for 24h but it is possible to get real time data by using the refresh parameter.
         */
        get: operations["getOrganizationPortfolio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{id}/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Organization Report
         * @description Get report of the organization's stakes.
         */
        get: operations["getOrganizationReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Deployments
         * @description Get deployments of the current organization
         */
        get: operations["getDeployments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of Ethereum stakes.
         */
        get: operations["getEthStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link ETH stakes to a Kiln account
         */
        post: operations["postEthStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of Ethereum stakes
         */
        get: operations["getEthRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of Ethereum stakes
         */
        get: operations["getEthOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Ethereum staking.
         */
        get: operations["getEthNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/kiln-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Kiln Stats
         * @description Get some Kiln statistics on Ethereum staking
         */
        get: operations["getEthKilnStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validation Keys
         * @description Create Ethereum native validation keys on Kiln's infrastructure.
         *
         */
        post: operations["postEthKeys"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates an Ethereum EIP 1559 stake transaction
         */
        post: operations["postEthStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an Ethereum transaction for broadcasting. It takes a serialized transaction and its signatures and returns a serialized signed transaction that can be broadcasted.
         */
        post: operations["postEthPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcasts a signed Ethereum transaction
         */
        post: operations["postEthBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of an Ethereum transaction
         */
        get: operations["getEthTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/transaction/exit-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request Exit
         * @description Generates an Ethereum EIP 1559 request-exit transaction
         */
        post: operations["postEthRequestExitTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getEthTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Excel Reports
         * @description Generates an Excel report sheet for your stakes and rewards
         */
        get: operations["getEthReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/exit-messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Exit Messages
         * @description Get encrypted exit message for a validator
         */
        get: operations["getExitMessage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/eigenpod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * EigenLayer EigenPod
         * @description Get the EigenPod of the given wallet
         */
        get: operations["getEigenLayerEigenPod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/operator": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * EigenLayer Operator
         * @description Get information about an EigenLayer Operator
         */
        get: operations["getEigenLayerOperator"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * EigenLayer Summary
         * @description Get a summary of your wallet on EigenLayer
         */
        get: operations["getEigenLayerSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/avs-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * EigenLayer AVS rewards
         * @description Get the claimable AVS rewards of a wallet
         */
        get: operations["getEigenLayerAvsRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/native/points": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * EigenLayer Native Points
         * @deprecated
         * @description Get restaked points of your EigenPod
         */
        get: operations["getEigenLayerNativePoints"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/native/undelegations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * EigenLayer Native Undelegations
         * @description Get undelegations of your EigenPod
         */
        get: operations["getEigenLayerNativeUndelegations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/liquid/points": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * EigenLayer Liquid Points
         * @deprecated
         * @description Get restaked points of your Liquid Staking Tokens
         */
        get: operations["getEigenLayerLiquidPoints"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/liquid/deposits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * EigenLayer Liquid Deposits
         * @description Get deposits of Liquid staking tokens on EigenLayer
         */
        get: operations["getEigenLayerLiquidDeposits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/liquid/withdrawals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * EigenLayer Liquid Withdrawals
         * @description Get withdrawals of your Liquid Staking Tokens
         */
        get: operations["getEigenLayerWithdrawals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/transaction/claim-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * EigenLayer Generate Claim Rewards Transaction
         * @description Craft a processClaim transaction to retrieve AVS rewards
         */
        post: operations["postEigenLayerClaimRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/transaction/verify-checkpoint-proofs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * EigenLayer Generate Checkpoint Proofs Transaction
         * @description Craft a verifyCheckpointProofs transaction to verify the given validators
         */
        post: operations["postEigenLayerVerifyCheckpointProofsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/eigenlayer/transaction/verify-withdrawal-credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * EigenLayer Restake Transaction
         * @description Craft a verifyWithdrawalCredentials transaction to restake the given validators
         */
        post: operations["postEigenLayerVerifyWithdrawalCredentialsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get stakes of wallets on the given vaults
         */
        get: operations["getDefiStakes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi/extra-rewards/morpho": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Morpho extra rewards
         * @description Get Morpho extra rewards
         */
        get: operations["getDefiMorphoExtraRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi/transaction/claim/extra-rewards/morpho": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Craft claim Morpho rewards
         * @description Craft claim Morpho rewards transaction
         */
        get: operations["getDefiCraftClaimMorphoRewardsTransaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi/transaction/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve Transaction
         * @description Generates an approval transaction that allows a specified vault to deposit a given ERC20 asset on behalf of the user. This is a prerequisite for interacting with Kiln DeFi Vaults as they require asset allowances before deposits.
         */
        post: operations["postDefiCraftApproveTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi/transaction/deposit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deposit Transaction
         * @description Generates a deposit transaction that allows a specified vault to receive a given ERC20 asset from the user.
         */
        post: operations["postDefiCraftDepositTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi/transaction/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Transaction
         * @description Generates a withdrawal transaction that allows a user to withdraw a specified ERC20 asset from a given vault.
         */
        post: operations["postDefiCraftWithdrawTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get operations of wallets on the given vaults
         */
        get: operations["getDefiOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get network stats of the given vaults
         */
        get: operations["getDefiNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/onchain/v1/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validation On-Chain V1 Keys
         * @description Create Ethereum validation keys for the Kiln On-Chain V1
         *     smart-contract suite. This route is for Ethereum operators
         *     only of the Kiln On-Chain V1 smart-contract. Use `/v1/eth/keys`
         *     if you want to use classic native staking.
         *
         */
        post: operations["postEthOnChainKeys"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/onchain/v2/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validation On-Chain V2 Keys
         * @description Create Ethereum validation keys for the Kiln On-Chain V2
         *     smart-contract suite. This route is for Ethereum operators
         *     only of the Kiln On-Chain V2 (vSuite) smart-contract of type vNFT. Use `/v1/eth/keys` if
         *     you want to use  Kiln On-Chain V2 of type vPool (ERC20) or classic native staking.
         *
         */
        post: operations["postEthVSuiteKeys"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/onchain/v2/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * On-Chain V2 Stakes
         * @description Get the status of Ethereum OnChain V2 (vSuite) stakes
         */
        get: operations["getEthOnchainV2Stakes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/onchain/v2/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * On-Chain V2 Operations
         * @description Get the operations of Ethereum OnChain V2 (vSuite) operations
         */
        get: operations["getEthOnchainV2Operations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/onchain/v2/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * On-Chain V2 Rewards
         * @description Get historical rewards of Ethereum OnChain V2 (vSuite) daily rewards
         */
        get: operations["getEthOnchainV2Rewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/onchain/v2/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * On-Chain V2 Network Stats
         * @description Get the network stats of Ethereum OnChain V2 (vSuite) integration
         */
        get: operations["getEthOnchainV2NetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eth/onchain/v2/exit-tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * On-Chain V2 Exit Tickets
         * @description Get the exit tickets of Ethereum OnChain V2 (vSuite) integration
         */
        get: operations["getEthOnchainV2ExitTickets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of Tezos stakes
         */
        get: operations["getXtzStakes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards of Tezos stakes
         */
        get: operations["getXtzRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get historical operations of Tezos stakes
         */
        get: operations["getXtzOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Tezos staking
         */
        get: operations["getXtzNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Excel Reports
         * @description Generates an Excel report sheet for your stakes and rewards
         */
        get: operations["getXtzReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/transaction/delegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delegate Transaction
         * @description Generates a delegate transaction on Tezos
         */
        post: operations["postXtzDelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/transaction/undelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Undelegate Transaction
         * @description Generates an undelegate transaction on Tezos
         */
        post: operations["postXtzUndelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a stake transaction on Tezos. You must delegate to a baker accepting external stakes prior to use this endpoint. Staked tezos remain in your wallet but are frozen for staking purposes and subject to slashing.
         */
        post: operations["postXtzStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an unstake transaction on Tezos. Your unstaked balance remains locked for 4 cycles. After this period, you can unlock your funds by calling /v1/xtz/transaction/finalize-unstake.
         */
        post: operations["postXtzUnStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/transaction/finalize-unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finalize Unstake Transaction
         * @description Generates a finalize unstake transaction on Tezos. This transaction unlocks your unstaked tezos after the 4 cycles lock period.
         */
        post: operations["postXtzFinalizeUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare a Tezos transaction for broadcasting. It takes a serialized transaction and its signatures and returns a serialized signed transaction that can be broadcasted.
         */
        post: operations["postXtzPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcasts a signed Tezos transaction
         */
        post: operations["postXtzBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a Tezos transaction
         */
        get: operations["getXtzTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/xtz/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a Tezos transaction
         */
        get: operations["getXtzTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of Solana stakes
         */
        get: operations["getSolStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Create Solana stakes and linked them to a Kiln account
         */
        post: operations["postSolStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards of Solana stakes
         */
        get: operations["getSolRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of Solana stakes
         */
        get: operations["getSolOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Solana staking
         */
        get: operations["getSolNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Solana staking
         */
        get: operations["getSolReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/nonce-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Nonce Account
         * @description Get Kiln nonce account details. This can be used to partially sign transactions with a durable nonce.
         */
        get: operations["getSolNonceAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Craft a stake transaction. This results in a new stake account created with the amount given.
         */
        post: operations["postSolStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/transaction/deactivate-stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate Stake Transaction
         * @description Craft a deactivate stake account transaction.
         */
        post: operations["postSolDeactivateStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/transaction/withdraw-stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Stake Transaction
         * @description Craft a withdraw stake transaction.
         */
        post: operations["postSolWithdrawStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/transaction/merge-stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Merge Stakes Transaction
         * @description Craft a merge stakes transaction.
         */
        post: operations["postSolMergeStakesTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/transaction/split-stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Split Stake Transaction
         * @description Craft a solana split stake transaction
         */
        post: operations["postSolSplitStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postSolPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a serialized signed transaction to the blockchain
         */
        post: operations["postSolBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getSolTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sol/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getSolTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Retrieve the status of ATOM stakes, expressed in uATOM (10⁻⁶ ATOM). All stakes that have been active since [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/releases/tag/v7.0.0) are available. For stakes without a specific delegation timestamp, the API computes the status based on the first available reward snapshot to provide a comprehensive overview.
         *
         */
        get: operations["getAtomStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link an ATOM stake to a Kiln account
         */
        post: operations["postAtomStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of ATOM stakes. Units are in uATOM (10⁻⁶ ATOM). Only daily breakdowns after 13/04/2022 ([Theta v7](https://github.com/cosmos/gaia/releases/tag/v7.0.0)) are available.
         */
        get: operations["getAtomRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of ATOM stakes. Units are in uATOM (10⁻⁶ ATOM). All operations after [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/releases/tag/v7.0.0) are available.
         */
        get: operations["getAtomOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Cosmos
         */
        get: operations["getAtomNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Cosmos staking
         */
        get: operations["getAtomReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on Cosmos
         */
        post: operations["postAtomStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on Cosmos
         */
        post: operations["postAtomWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/transaction/restake-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restake Rewards Transaction
         * @description Generates a restake rewards transaction on Cosmos
         */
        post: operations["postAtomRestakeRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on Cosmos
         */
        post: operations["postAtomUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/transaction/redelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redelegate Transaction
         * @description Generates a redelegate transaction on Cosmos to move a stake from a validator to another without going through the 21 days unbonding period.
         */
        post: operations["postAtomRedelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postAtomPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Cosmos network
         */
        post: operations["postAtomBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getAtomTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/atom/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getAtomTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Retrieve the status of Cronos stakes, expressed in microCRO (10⁻⁶ CRO).
         *
         */
        get: operations["getCroStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link an Cronos stake to a Kiln account
         */
        post: operations["postCroStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of Cronos stakes. Units are in microCRO (10⁻⁶ CRO).
         */
        get: operations["getCroRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of Cronos stakes. Units are in microCRO (10⁻⁶ CRO).
         */
        get: operations["getCroOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Cosmos
         */
        get: operations["getCroNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Cosmos staking
         */
        get: operations["getCroReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get balance
         * @description Get balance of a Cronos account
         */
        post: operations["postCroGetBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on Cronos
         */
        post: operations["postCroStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on Cronos
         */
        post: operations["postCroWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/transaction/restake-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restake Rewards Transaction
         * @description Generates a restake rewards transaction on Cronos
         */
        post: operations["postCroRestakeRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on Cronos
         */
        post: operations["postCroUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/transaction/redelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redelegate Transaction
         * @description Generates a redelegate transaction on Cronos to move a stake from a validator to another without going through the 21 days unbonding period.
         */
        post: operations["postCroRedelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postCroPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Cronos network
         */
        post: operations["postCroBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/transaction/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Transaction
         * @description Generates a send transaction on Cronos
         */
        post: operations["postCroSendTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getCroTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cro/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getCroTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of OM stakes. Units are in uOM (10⁻⁶ OM).
         */
        get: operations["getOmStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link a Mantra stake to a Kiln account
         */
        post: operations["postOmStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of Mantra stakes. Units are in uOM (10⁻⁶ OM).
         */
        get: operations["getOmRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of Mantra stakes. Units are in uOM (10⁻⁶ OM).
         */
        get: operations["getOmOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Mantra
         */
        get: operations["getOmNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Mantra staking
         */
        get: operations["getOmReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get balance
         * @description Get balance of a Mantra account
         */
        post: operations["postOmGetBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on Mantra
         */
        post: operations["postOmStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on Mantra
         */
        post: operations["postOmWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/transaction/restake-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restake Rewards Transaction
         * @description Generates a restake rewards transaction on Mantra
         */
        post: operations["postOmRestakeRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on Mantra
         */
        post: operations["postOmUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/transaction/redelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redelegate Transaction
         * @description Generates a redelegate transaction on Mantra to move a stake from a validator to another without going through the 21 days unbonding period.
         */
        post: operations["postOmRedelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postOmPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Mantra network
         */
        post: operations["postOmBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/transaction/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Transaction
         * @description Generates a send transaction on Mantra
         */
        post: operations["postOmSendTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getOmTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/om/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getOmTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of Cardano stakes.
         */
        get: operations["getAdaStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link ADA stakes to a Kiln account
         */
        post: operations["postAdaStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of ADA stakes
         */
        get: operations["getAdARewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of Cardano stakes.
         */
        get: operations["getAdaOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Cardano staking
         */
        get: operations["getAdaReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on ADA staking
         */
        get: operations["getAdaNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on Cardano. Your wallet must have at least 4 ADA to cover for fees and pool deposit (2 ADA).
         */
        post: operations["postAdaStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on Cardano
         */
        post: operations["postAdaWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on Cardano
         */
        post: operations["postAdaUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postAdaPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Cardano network
         */
        post: operations["postAdaBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getAdaTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ada/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getAdaTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bbn/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description BBN
         */
        get: operations["getBbnStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link BBN stakes to a Kiln account
         */
        post: operations["postBbnStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bbn/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Craft a staking transaction to stake your bitcoin
         */
        post: operations["postBbnStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bbn/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Babylon network
         */
        post: operations["postBbnBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @deprecated
         * @description Get the status of Polygon stakes. All stakes made prior to the [Ethereum block n°16430248 (18/01/2023)](https://etherscan.io/block/16430248)
         *     aren't fully sync-ed and will have incorrect data.
         *
         */
        get: operations["getMaticStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link MATIC stakes to a Kiln account
         */
        post: operations["postMaticStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @deprecated
         * @description Get historical rewards by day of Polygon stakes. All stakes made prior to the [Ethereum block n°16430248 (18/01/2023)](https://etherscan.io/block/16430248)
         *     aren't fully sync-ed and will have lower than expected rewards.
         *
         */
        get: operations["getMaticRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @deprecated
         * @description Get the operations of Polygon stakes. All operations made prior to the [Ethereum block n°16430248 (18/01/2023)](https://etherscan.io/block/16430248) are unknown to the API.
         *
         */
        get: operations["getMaticOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @deprecated
         * @description Get some network statistics on Polygon staking
         */
        get: operations["getMaticNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @deprecated
         * @description Get reports on Polygon staking
         */
        get: operations["getMaticReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/transaction/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve Transaction
         * @deprecated
         * @description Generates an approve transaction to allow a smart contract to spend MATIC tokens on behalf of the user
         */
        post: operations["postMaticApproveTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/transaction/buy-voucher": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Buy Voucher Transaction
         * @deprecated
         * @description Generates a buy voucher transaction to buy shares from a validator. Please note that you can only buy shares from a validator if you don't have some unstaked POL that are pending for withdrawal.
         */
        post: operations["postMaticBuyVoucherTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/transaction/sell-voucher": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sell Voucher Transaction
         * @deprecated
         * @description Generates a sell voucher transaction to sell shares from a validator. Your token then enter a 3/4 days (80 checkpoints) unbonding period.
         */
        post: operations["postMaticSellVoucherTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/transaction/unstake-claim-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Claim Tokens Transaction
         * @deprecated
         * @description Generates an unstakeClaimTokens transaction to withdraw unbonded tokens back to your wallet
         */
        post: operations["postMaticUnstakeClaimTokensTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @deprecated
         * @description Generates a withdraw rewards transaction to withdraw available rewards to your wallet
         */
        post: operations["postMaticWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/transaction/restake-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restake Rewards Transaction
         * @deprecated
         * @description Generates a restake rewards transaction to restake available rewards to the given validator
         */
        post: operations["postMaticRestakeRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @deprecated
         * @description Prepare a transaction for broadcasting. It takes a serialized transaction and its signatures and returns a serialized signed transaction that can be broadcasted.
         */
        post: operations["postMaticPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @deprecated
         * @description Broadcasts a signed transaction to the Ethereum network
         */
        post: operations["postMaticBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @deprecated
         * @description Get the status of a transaction on the Ethereum network
         */
        get: operations["getMaticTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/matic/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @deprecated
         * @description Decode a transaction of the Ethereum network
         */
        get: operations["getMaticTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of Polygon stakes. All stakes made prior to the [Ethereum block n°16430248 (18/01/2023)](https://etherscan.io/block/16430248)
         *     aren't fully sync-ed and will have incorrect data.
         *
         */
        get: operations["getPolStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link POL stakes to a Kiln account
         */
        post: operations["postPolStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of Polygon stakes. All stakes made prior to the [Ethereum block n°16430248 (18/01/2023)](https://etherscan.io/block/16430248)
         *     aren't fully sync-ed and will have lower than expected rewards.
         *
         */
        get: operations["getPolRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of Polygon stakes. All operations made prior to the [Ethereum block n°16430248 (18/01/2023)](https://etherscan.io/block/16430248) are unknown to the API.
         *
         */
        get: operations["getPolOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Polygon staking
         */
        get: operations["getPolNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Polygon staking
         */
        get: operations["getPolReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/transaction/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve Transaction
         * @description Generates an approve transaction to allow a smart contract to spend POL tokens on behalf of the user
         */
        post: operations["postPolApproveTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/transaction/buy-voucher": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Buy Voucher Transaction
         * @description Generates a buy voucher transaction to buy shares from a validator. Please note that you can only buy shares from a validator if you don't have some unstaked POL that are pending for withdrawal.
         */
        post: operations["postPolBuyVoucherTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/transaction/sell-voucher": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sell Voucher Transaction
         * @description Generates a sell voucher transaction to sell shares from a validator. Your token then enter a 3/4 days (80 checkpoints) unbonding period.
         */
        post: operations["postPolSellVoucherTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/transaction/unstake-claim-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Claim Tokens Transaction
         * @description Generates an unstakeClaimTokens transaction to withdraw unbonded tokens back to your wallet
         */
        post: operations["postPolUnstakeClaimTokensTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction to withdraw available rewards to your wallet
         */
        post: operations["postPolWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/transaction/restake-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restake Rewards Transaction
         * @description Generates a restake rewards transaction to restake available rewards to the given validator
         */
        post: operations["postPolRestakeRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare a transaction for broadcasting. It takes a serialized transaction and its signatures and returns a serialized signed transaction that can be broadcasted.
         */
        post: operations["postPolPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcasts a signed transaction to the Ethereum network
         */
        post: operations["postPolBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction on the Ethereum network
         */
        get: operations["getPolTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pol/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction of the Ethereum network
         */
        get: operations["getPolTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of NEAR stakes
         */
        get: operations["getNearStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Create NEAR stakes and linked them to a Kiln account
         */
        post: operations["postNEARStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards of NEAR stakes
         */
        get: operations["getNearRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of NEAR stakes
         */
        get: operations["getNearOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on NEAR staking
         */
        get: operations["getNEARReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/epoch-infos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get epoch infos
         * @description Get current and next epochs info
         */
        get: operations["getNEAREpochInfos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get stats on NEAR network
         */
        get: operations["getNEARNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake transaction
         * @description Craft a stake transaction
         */
        post: operations["postNEARStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake transaction
         * @description Craft an unstake transaction
         */
        post: operations["postNEARUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/transaction/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw transaction
         * @description Craft a withdraw transaction
         */
        post: operations["postNEARWithdrawTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare transaction
         * @description Prepare a transaction for broadcasting by adding a signature to it
         */
        post: operations["postNEARPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast transaction
         * @description Broadcast a transaction to the NEAR network
         */
        post: operations["postNEARBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getNearTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/near/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getNearTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of OSMO stakes. Units are in uOSMO (10⁻⁶ OSMO).
         */
        get: operations["getOsmoStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link an OSMO stake to a Kiln account
         */
        post: operations["postOsmoStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of OSMO stakes. Units are in uOSMO (10⁻⁶ OSMO).
         */
        get: operations["getOsmoRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of OSMO stakes. Units are in uOSMO (10⁻⁶ OSMO).
         */
        get: operations["getOsmoOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Cosmos
         */
        get: operations["getOsmoNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Cosmos staking
         */
        get: operations["getOsmoReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on Osmosis
         */
        post: operations["postOsmoStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on Osmosis
         */
        post: operations["postOsmoWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/transaction/restake-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restake Rewards Transaction
         * @description Generates a restake rewards transaction on Osmosis
         */
        post: operations["postOsmoRestakeRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on Osmosis
         */
        post: operations["postOsmoUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/transaction/redelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redelegate Transaction
         * @description Generates a redelegate transaction on Osmosis to move a stake from a validator to another without going through the 14 days unbonding period.
         */
        post: operations["postOsmoRedelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postOsmoPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Cosmos network
         */
        post: operations["postOsmoBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getOsmoTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/osmo/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getOsmoTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/egld/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of MultiversX stakes
         */
        get: operations["getEgldStakes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/egld/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards of MultiversX stakes
         */
        get: operations["getEgldRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/egld/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get stats on MutiversX network
         */
        get: operations["getEgldNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/egld/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get historical operations of MultiversX stakes
         */
        get: operations["getEgldOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/egld/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on MultiversX staking
         */
        get: operations["getEgldReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of Polkadot stakes
         */
        get: operations["getDotStakes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day or era of DOT stakes
         */
        get: operations["getDotRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of Polkadot stakes
         */
        get: operations["getDotOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Polkadot staking
         */
        get: operations["getDotReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get stats on Polkadot network
         */
        get: operations["getDotNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/bond": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bond Transaction
         * @description Generates a bond transaction on Polkadot
         */
        post: operations["postDotBondTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/bond-extra": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bond extra Transaction
         * @description Generates a bond extra transaction on Polkadot
         */
        post: operations["postDotBondExtraTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/rebond": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rebond Transaction
         * @description Generates a rebond transaction on Polkadot (to be used to rebond unbonding token)
         */
        post: operations["postDotRebondTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/unbond": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unbond Transaction
         * @description Generates an unbond transaction on Polkadot
         */
        post: operations["postDotUnbondTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/nominate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Nominate Transaction
         * @description Generates a nominate transaction on Polkadot
         */
        post: operations["postDotNominateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/withdraw-unbonded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw unbonded Transaction
         * @description Generates a withdraw unbonded transaction on Polkadot
         */
        post: operations["postDotWithdrawUnbondedTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/chill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chill Transaction
         * @description Generates a chill transaction on Polkadot
         */
        post: operations["postDotChillTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/set-payee": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set payee Transaction
         * @description Generates a set payee transaction on Polkadot
         */
        post: operations["postDotSetPayeeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/join-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join pool Transaction
         * @description Generates a join pool transaction on Polkadot
         */
        post: operations["postDotJoinPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/bond-extra-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bond extra to pool Transaction
         * @description Generates a bond extra to pool transaction on Polkadot
         */
        post: operations["postDotBondExtraToPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/bond-rewards-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bond rewards to pool Transaction
         * @description Generates a bond rewards to pool transaction on Polkadot
         */
        post: operations["postDotBondRewardsToPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/claim-payout-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim payout from pool Transaction
         * @description Generates a claim payout (rewards) from pool transaction on Polkadot
         */
        post: operations["postDotClaimPayoutFromPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/unbond-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unbond from pool Transaction
         * @description Generates an unbond from pool transaction on Polkadot
         */
        post: operations["postDotUnbondFromPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/withdraw-unbonded-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw unbonded from pool Transaction
         * @description Generates a withdraw unbonded from pool transaction on Polkadot
         */
        post: operations["postDotWithdrawUnbondedFromPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getDotTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getDotTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare a transaction for broadcast on Polkadot by adding a signature to it
         */
        post: operations["postDotPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dot/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction on Polkadot
         */
        post: operations["postDotBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of Kusama stakes. Data since block [#1496832 (2020-03-18 04:27:54 (+UTC)](https://kusama.subscan.io/block/1496832) is available.
         */
        get: operations["getKsmStakes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day or era of KSM stakes. Data since block [#1496832 (2020-03-18 04:27:54 (+UTC)](https://kusama.subscan.io/block/1496832) is available.
         */
        get: operations["getKsmRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of Kusama stakes
         */
        get: operations["getKsmOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Kusama staking
         */
        get: operations["getKsmReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get stats on Kusama network
         */
        get: operations["getKsmNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/bond": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bond Transaction
         * @description Generates a bond transaction on Kusama
         */
        post: operations["postKsmBondTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/bond-extra": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bond extra Transaction
         * @description Generates a bond extra transaction on Kusama
         */
        post: operations["postKsmBondExtraTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/rebond": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rebond Transaction
         * @description Generates a rebond transaction on Kusama (to be used to rebond unbonding token)
         */
        post: operations["postKsmRebondTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/unbond": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unbond Transaction
         * @description Generates an unbond transaction on Kusama
         */
        post: operations["postKsmUnbondTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/nominate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Nominate Transaction
         * @description Generates a nominate transaction on Kusama
         */
        post: operations["postKsmNominateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/withdraw-unbonded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw unbonded Transaction
         * @description Generates a withdraw unbonded transaction on Kusama
         */
        post: operations["postKsmWithdrawUnbondedTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/chill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chill Transaction
         * @description Generates a chill transaction on Kusama
         */
        post: operations["postKsmChillTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/set-payee": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set payee Transaction
         * @description Generates a set payee transaction on Kusama
         */
        post: operations["postKsmSetPayeeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/join-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join pool Transaction
         * @description Generates a join pool transaction on Kusama
         */
        post: operations["postKsmJoinPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/bond-extra-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bond extra to pool Transaction
         * @description Generates a bond extra to pool transaction on Kusama
         */
        post: operations["postKsmBondExtraToPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/bond-rewards-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bond rewards to pool Transaction
         * @description Generates a bond rewards to pool transaction on Kusama
         */
        post: operations["postKsmBondRewardsToPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/claim-payout-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim payout from pool Transaction
         * @description Generates a claim payout (rewards) from pool transaction on Kusama
         */
        post: operations["postKsmClaimPayoutFromPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/unbond-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unbond from pool Transaction
         * @description Generates an unbond from pool transaction on Kusama
         */
        post: operations["postKsmUnbondFromPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/withdraw-unbonded-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw unbonded from pool Transaction
         * @description Generates a withdraw unbonded from pool transaction on Kusama
         */
        post: operations["postKsmWithdrawUnbondedFromPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getKsmTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getKsmTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare a transaction for broadcast on Kusama by adding a signature to it
         */
        post: operations["postKsmPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ksm/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction on Kusama
         */
        post: operations["postKsmBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/validators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Kiln validator details for a given network
         * @description Get Kiln validators
         */
        get: operations["getValidators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of DYDX stakes. Units are in uDYDX (10⁻⁶ DYDX).
         */
        get: operations["getDydxStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link a DYDX stake to a Kiln account
         */
        post: operations["postCelsdydxStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of DYDX stakes. Units are in uDYDX (10⁻⁶ DYDX).
         */
        get: operations["getDydxRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of DYDX stakes. Units are in uDYDX (10⁻⁶ DYDX).
         */
        get: operations["getDydxOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on dYdX
         */
        get: operations["getDydxNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Cosmos staking
         */
        get: operations["getDydxReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get balance
         * @description Get balance of a DYDX account
         */
        post: operations["postDydxGetBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on DYDX
         */
        post: operations["postDydxStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on DYDX
         */
        post: operations["postDydxWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on DYDX
         */
        post: operations["postDydxUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/transaction/redelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redelegate Transaction
         * @description Generates a redelegate transaction on DYDX to move a stake from a validator to another without going through the 30 days unbonding period.
         */
        post: operations["postDydxRedelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/transaction/noble-ibc-transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Noble IBC Transfer Transaction
         * @description Generates an IBC transfer transaction on DYDX to Noble
         */
        post: operations["postDydxNobleIbcTransferTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postDydxPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the DYDX network
         */
        post: operations["postDydxBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getDydxTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dydx/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getDydxTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of TIA stakes. Units are in uTIA (10⁻⁶ TIA).
         */
        get: operations["getCelestiaStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link an CELESTIA stake to a Kiln account
         */
        post: operations["postCelstiaStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of CELESTIA stakes. Units are in uTIA (10⁻⁶ TIA).
         */
        get: operations["getCelestiaRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of TIA stakes. Units are in uTIA (10⁻⁶ TIA).
         */
        get: operations["getCelestiaOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Celestia
         */
        get: operations["getCelestiaNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Cosmos staking
         */
        get: operations["getCelestiaReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on Celestia
         */
        post: operations["postTiaStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on Celestia
         */
        post: operations["postTiaWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/transaction/restake-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restake Rewards Transaction
         * @description Generates a restake rewards transaction on Celestia
         */
        post: operations["postTiaRestakeRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on Celestia
         */
        post: operations["postTiaUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/transaction/redelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redelegate Transaction
         * @description Generates a redelegate transaction on Celestia to move a stake from a validator to another without going through the 21 days unbonding period.
         */
        post: operations["postTiaRedelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postTiaPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Celestia network
         */
        post: operations["postTiaBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getTiaTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tia/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getTiaTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of ZETA stakes. Units are in uZETA (10⁻⁶ ZETA).
         */
        get: operations["getZetachainStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link a ZetaChain stake to a Kiln account
         */
        post: operations["postZetachainStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of ZETA stakes. Units are in uZETA (10⁻⁶ ZETA).
         */
        get: operations["getZetachainRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of ZETACHAIN stakes. Units are in uZETA (10⁻⁶ ZETA).
         */
        get: operations["getZetachainOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Zetachain
         */
        get: operations["getZetachainNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Cosmos staking
         */
        get: operations["getZetachainReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get balance
         * @description Get balance of a Zeta account
         */
        post: operations["postZetaGetBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on ZetaChain
         */
        post: operations["postZetaStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/transaction/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Transaction
         * @description Generates a send transaction on ZetaChain
         */
        post: operations["postZetaSendTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on ZetaChain
         */
        post: operations["postZetaWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on ZetaChain
         */
        post: operations["postZetaUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/transaction/redelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redelegate Transaction
         * @description Generates a redelegate transaction on ZetaChain to move a stake from a validator to another without going through the 21 days unbonding period.
         */
        post: operations["postZetaRedelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postZetaPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the ZetaChain network
         */
        post: operations["postZetaBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getZetaTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zeta/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getZetaTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of KAVA stakes. Units are in uKAVA (10⁻⁶ KAVA).
         */
        get: operations["getKavaStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link a Kava stake to a Kiln account
         */
        post: operations["postKavaStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of KAVA stakes. Units are in uKAVA (10⁻⁶ KAVA).
         */
        get: operations["getKavaRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of Kava stakes. Units are in uKAVA (10⁻⁶ KAVA).
         */
        get: operations["getKavaOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Kava
         */
        get: operations["getKavaNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Kava staking
         */
        get: operations["getKavaReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get balance
         * @description Get balance of a Kava account
         */
        post: operations["postKavaGetBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on Kava
         */
        post: operations["postKavaStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on Kava
         */
        post: operations["postKavaWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on Kava
         */
        post: operations["postKavaUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/transaction/restake-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restake Rewards Transaction
         * @description Generates a restake rewards transaction on Kava
         */
        post: operations["postKavaRestakeRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/transaction/redelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redelegate Transaction
         * @description Generates a redelegate transaction on Kava to move a stake from a validator to another without going through the 21 days unbonding period.
         */
        post: operations["postKavaRedelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postKavaPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Kava network
         */
        post: operations["postKavaBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/transaction/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Transaction
         * @description Generates a send transaction on Kava
         */
        post: operations["postKavaSendTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getKavaTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kava/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getKavaTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of FET stakes. Units are in uFET (10⁻⁶ FET).
         */
        get: operations["getFetchStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link a FETCH stake to a Kiln account
         */
        post: operations["postFetchStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of FETCH stakes. Units are in uFET (10⁻⁶ FET).
         */
        get: operations["getFetchRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of FET stakes. Units are in uFET (10⁻⁶ FET).
         */
        get: operations["getFetchOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Fetch
         */
        get: operations["getFetchNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Cosmos staking
         */
        get: operations["getFetchReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get balance
         * @description Get balance of a Fet account
         */
        post: operations["postFetGetBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on Fetch
         */
        post: operations["postFetchStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on Fetch
         */
        post: operations["postFetchWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/transaction/restake-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restake Rewards Transaction
         * @description Generates a restake rewards transaction on Fetch
         */
        post: operations["postFetchRestakeRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on Fetch
         */
        post: operations["postFetchUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/transaction/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Transaction
         * @description Generates a send transaction on Fetch
         */
        post: operations["postFetchSendTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/transaction/redelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redelegate Transaction
         * @description Generates a redelegate transaction on Fetch to move a stake from a validator to another without going through the 21 days unbonding period.
         */
        post: operations["postFetchRedelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postFetchPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Fetch network
         */
        post: operations["postFetchBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getFetchTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fet/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getFetchTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of INJ stakes. Units are in uINJ (10⁻⁶ INJ).
         */
        get: operations["getInjStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link a Inj stake to a Kiln account
         */
        post: operations["postInjStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of Inj stakes. Units are in uINJ (10⁻⁶ INJ).
         */
        get: operations["getInjRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Operations
         * @description Get the operations of INJ stakes. Units are in uINJ (10⁻⁶ INJ).
         */
        get: operations["getInjOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Inj
         */
        get: operations["getInjNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on Cosmos staking
         */
        get: operations["getInjReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake Transaction
         * @description Generates a delegate transaction on Inj
         */
        post: operations["postInjStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw Rewards Transaction
         * @description Generates a withdraw rewards transaction on Inj
         */
        post: operations["postInjWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake Transaction
         * @description Generates an undelegate transaction on Inj
         */
        post: operations["postInjUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/transaction/redelegate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redelegate Transaction
         * @description Generates a redelegate transaction on Inj to move a stake from a validator to another without going through the 21 days unbonding period.
         */
        post: operations["postInjRedelegateTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postInjPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Inj network
         */
        post: operations["postInjBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getInjTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inj/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getInjTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get the status of TON stakes
         */
        get: operations["getTonStakes"];
        put?: never;
        /**
         * Create stakes
         * @deprecated
         * @description Link an TON stake to a Kiln account
         */
        post: operations["postTonStakes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rewards
         * @description Get historical rewards by day of TON stakes. Units are in nanoton (10⁻⁹ TON).
         */
        get: operations["getTonRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on The Open Network
         */
        get: operations["getTonNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reports
         * @description Get reports on The Open Network
         */
        get: operations["getTonReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/wallet-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Wallet info
         * @description Get the status of a TON wallet
         */
        get: operations["getTonWalletInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/vesting-contract-owner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Vesting contract owner
         * @description Get the owner address of a TON vesting contract
         */
        get: operations["getTonVestingContractOwner"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/single-nominator-contract-owner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single nominator contract owner
         * @description Get the owner address of a TON single nominator contract
         */
        get: operations["getTonSingleNominatorContractOwner"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get balance
         * @description Get balance of a TON account
         */
        post: operations["postTonGetBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/withdraw-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Withdraw request
         * @description Get withdraw request for a pool
         */
        get: operations["getTonWithdrawRequest"];
        put?: never;
        /**
         * Withdraw request
         * @description Create withdraw request for a pool
         */
        post: operations["postTonWithdrawRequest"];
        /**
         * Withdraw request
         * @description Delete withdraw request for a pool
         */
        delete: operations["deleteTonWithdrawRequest"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postTonPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a serialized signed transaction to the blockchain
         */
        post: operations["postTonBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction by message hash
         */
        get: operations["getTonTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/transaction/stake-single-nomination-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake single nomination pool transaction
         * @description Craft a stake transaction to a single nomination pool.
         */
        post: operations["postTonStakeSingleNominationPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/transaction/stake-ton-whales-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake TON whales pool transaction
         * @description Craft a stake transaction to TON whales pool.
         */
        post: operations["postTonStakeWhalesPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/transaction/unstake-single-nomination-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake single nomination pool transaction
         * @description Craft an unstake transaction from a single nomination pool.
         */
        post: operations["postTonUnstakeSingleNominationPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/transaction/unstake-ton-whales-pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake TON whales pool transaction
         * @description Craft an unstake transaction from a TON whales pool.
         */
        post: operations["postTonUnstakeWhalesPoolTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ton/transaction/whitelist-vesting-contract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Whitelist address on vesting contract transaction
         * @description Craft whitelist address on vesting contract transaction.
         */
        post: operations["postTonWhitelistVestingContractTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/noble/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get balance
         * @description Get balance of a Noble account
         */
        post: operations["postNobleGetBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/noble/transaction/burn-usdc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Burn USDC transaction
         * @description Generates a burn USDC transaction on Noble in order to mint the USDC on Ethereum
         */
        post: operations["postNobleBurnUsdcTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/noble/transaction/osmo-ibc-transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * OSMO IBC transfer transaction
         * @description Generates an IBC transfer transaction to transfer USDC from Noble to Osmosis
         */
        post: operations["postNobleOsmoIbcTransferTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/noble/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare Transaction
         * @description Prepare an unsigned transaction for broadcast by adding signatures to it
         */
        post: operations["postNoblePrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/noble/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast Transaction
         * @description Broadcast a signed transaction to the Noble network
         */
        post: operations["postNobleBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/noble/transaction/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Status
         * @description Get the status of a transaction
         */
        get: operations["getNobleTxStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/noble/transaction/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Decoding
         * @description Decode a transaction
         */
        get: operations["getNobleTxDecoding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trx/network-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Network Stats
         * @description Get some network statistics on Tron staking
         */
        get: operations["getTrxNetworkStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trx/stakes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stakes
         * @description Get TRX stakes
         */
        get: operations["getTrxStakes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trx/transaction/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stake transaction
         * @description Craft a stake transaction to obtain bandwidth or energy, and obtain TRON Power.
         */
        post: operations["postTrxStakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trx/transaction/unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstake transaction
         * @description Craft an unstake transaction to unstake TRX, releases bandwidth or energy, and voting rights.
         */
        post: operations["postTrxUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trx/transaction/cancel-unstake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel unstake transaction
         * @description Craft an cancel unstake transaction to Cancel unstakings, all unstaked funds still in the waiting period will be re-staked, or withdrawn if the passed the lockup period.
         */
        post: operations["postTrxCancelUnstakeTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trx/transaction/withdraw-unstaked": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw unstaked transaction
         * @description Craft a withdraw unstaked transaction.
         */
        post: operations["postTrxWithdrawUnstakedTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trx/transaction/vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Vote transaction
         * @description Craft a vote transaction.
         */
        post: operations["postTrxVoteTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trx/transaction/withdraw-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw rewards transaction
         * @description Craft a withdraw rewards transaction.
         */
        post: operations["postTrxWithdrawRewardsTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trx/transaction/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare transaction
         * @description Prepare a transaction for broadcast by adding a signature to it.
         */
        post: operations["postTrxPrepareTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trx/transaction/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Broadcast transaction
         * @description Broadcast a signed transaction to the blockchain.
         */
        post: operations["postTrxBroadcastTx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Pagination information. This feature is enabled when `current_page` is specified */
        Pagination: {
            /**
             * @description Current number of the page
             * @example 2
             */
            current_page: number;
            /**
             * @description Number of the next page if there is one
             * @example 3
             */
            next_page?: number;
            /**
             * @description Number of the previous page if there is one
             * @example 1
             */
            previous_page?: number;
            /**
             * @description Number of entries per page. Can be overriden with the `page_size` parameter
             * @default 25
             * @example 25
             */
            page_size: number;
            /**
             * @description Total number of pages
             * @example 17
             */
            total_pages: number;
            /**
             * @description Total number of entries
             * @example 423
             */
            total_entries: number;
        };
        CoreStake: {
            /**
             * Format: uuid
             * @description Stake id
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            id: string;
            /**
             * @description Stake identifiers, e.g. contract address.
             * @example 0x8b3c9a781dbfa14879c9dacbb54c3401710fc5b0b8191b9ed33ecfb86c91b08bb878b79c27596f3d665046666d27c09e
             */
            stake_id: string;
            /**
             * @description Protocol name
             * @example ethereum
             * @enum {string}
             */
            protocol: "near" | "ethereum" | "cosmos" | "polygon" | "cardano" | "osmosis" | "tezos" | "polkadot" | "kusama" | "solana" | "dydx" | "celestia" | "multiversx" | "zetachain" | "injective" | "fetch" | "ton" | "kava" | "babylon" | "cronos" | "mantra" | "sui" | "tron";
            /**
             * Format: date-time
             * @description Deleted at timestamp (null if not deleted)
             * @example null
             */
            deleted_at: string | null;
            /**
             * Format: date-time
             * @description Creation date
             * @example 2023-02-06T21:48:11.038Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update date
             * @example 2023-02-06T21:48:11.038Z
             */
            updated_at: string;
        };
        AccountsResponse: components["schemas"]["Account"][];
        Account: {
            /**
             * Format: date-time
             * @description Date at which the account was created
             * @example 2023-02-06T21:48:11.038Z
             */
            created_at?: string;
            /**
             * Format: uuid
             * @description Account id
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            id?: string;
            /**
             * @description Account name
             * @example account name
             */
            name?: string;
            /**
             * @description Account description
             * @example account description
             */
            description?: string | null;
        };
        BasePortfolio: {
            /** @description Token name */
            token: string;
            /**
             * @description Protocol name
             * @example Ethereum
             */
            name: string;
            /**
             * @description Total number of stakes for this protocol
             * @example 12
             */
            total_stakes: number;
            /**
             * @description Total number of stakes actively collecting rewards for this protocol
             * @example 10
             */
            total_active_stakes: number;
            total_balance: {
                /**
                 * Format: float
                 * @description Total USD balance of stakes for this protocol
                 * @example 10896.4568
                 */
                amount_usd: number;
                /**
                 * Format: float
                 * @description Total balance of stakes in the native protocol token for this protocol
                 * @example 1896.4563
                 */
                amount: number;
            };
            total_rewards: {
                /**
                 * Format: float
                 * @description Total USD of rewards earned for this protocol
                 * @example 10896.4568
                 */
                amount_usd: number;
                /**
                 * Format: float
                 * @description Total rewards earned in the native protocol token for this protocol
                 * @example 1896.4568
                 */
                amount: number;
            };
            /**
             * Format: float
             * @description Protocol share of the total balance
             * @example 42.59
             */
            balance_share_percent: number;
            /**
             * Format: float
             * @description Protocol share of the total rewards earned
             * @example 42.59
             */
            rewards_share_percent: number;
        };
        DefaultPortfolio: components["schemas"]["BasePortfolio"] & {
            /**
             * @description Token name
             * @example NEAR
             * @enum {string}
             */
            token: "NEAR" | "ATOM" | "POL" | "ADA" | "OSMO" | "XTZ" | "DOT" | "KSM" | "SOL" | "TIA" | "EGLD" | "ZETA" | "INJ" | "FET" | "TON" | "KAVA" | "BTC" | "OM" | "CRO" | "TRX";
        };
        XTZPortfolio: components["schemas"]["BasePortfolio"] & {
            /**
             * @description Token name
             * @example XTZ
             * @enum {string}
             */
            token: "XTZ";
            total_delegated: {
                /**
                 * Format: float
                 * @description Total delegated balance in XTZ for this protocol
                 * @example 1896.4568
                 */
                amount: number;
                /**
                 * Format: float
                 * @description Total USD value of delegated balance in XTZ for this protocol
                 * @example 10896.4568
                 */
                amount_usd: number;
            };
            total_delegated_rewards: {
                /**
                 * Format: float
                 * @description Total delegated rewards earned in XTZ for this protocol
                 * @example 1896.4568
                 */
                amount: number;
                /**
                 * Format: float
                 * @description Total USD value of delegated rewards earned for this protocol
                 * @example 10896.4568
                 */
                amount_usd: number;
            };
            total_staked_rewards: {
                /**
                 * Format: float
                 * @description Total staked rewards earned in XTZ for this protocol
                 * @example 1896.4568
                 */
                amount: number;
                /**
                 * Format: float
                 * @description Total USD value of staked rewards earned for this protocol
                 * @example 10896.4568
                 */
                amount_usd: number;
            };
        };
        DYDXPortfolio: components["schemas"]["BasePortfolio"] & {
            /**
             * @description Token name
             * @example DYDX
             * @enum {string}
             */
            token: "DYDX";
            total_rewards_usdc: {
                /**
                 * Format: float
                 * @description Total rewards earned in USDC for this protocol
                 * @example 10896.4568
                 */
                amount: number;
                /**
                 * Format: float
                 * @description Total USD of USDC rewards earned for this protocol
                 * @example 1896.4568
                 */
                amount_usd: number;
            };
        };
        ETHPortfolio: components["schemas"]["BasePortfolio"] & {
            /**
             * @description Token name
             * @example ETH
             * @enum {string}
             */
            token: "ETH";
            /**
             * Format: float
             * @description Historical GRR
             * @example 1.9731192967741933
             */
            historical_grr: number;
            activating_stakes: {
                /**
                 * @description Total amount of ETH staked in activating stakes
                 * @example 0
                 */
                amount: number;
                /**
                 * @description Total USD balance of ETH staked in activating stakes
                 * @example 0
                 */
                amount_usd: number;
                /**
                 * @description Total number of activating stakes
                 * @example 0
                 */
                total: number;
            };
            exited_stakes: {
                /**
                 * @description Total amount of ETH staked in exited stakes
                 * @example 32
                 */
                amount: number;
                /**
                 * @description Total USD balance of ETH staked in exited stakes
                 * @example 74914.9572243136
                 */
                amount_usd: number;
                /**
                 * @description Total number of exited stakes
                 * @example 1
                 */
                total: number;
            };
            exiting_stakes: {
                /**
                 * @description Total amount of ETH staked in exiting stakes
                 * @example 0
                 */
                amount: number;
                /**
                 * @description Total USD balance of ETH staked in exiting stakes
                 * @example 0
                 */
                amount_usd: number;
                /**
                 * @description Total number of exiting stakes
                 * @example 0
                 */
                total: number;
            };
            eigenlayer: {
                /**
                 * @description Total restaked points
                 * @example 1260256.471111111
                 */
                restaked_points: number;
                /**
                 * @description Total number of restaked stakes
                 * @example 13
                 */
                total_restaked: number;
                /**
                 * @description Total number of stakes that can be restaked
                 * @example 0
                 */
                total_is_restakable: number;
                /**
                 * @description Total number of eigenlayer stakes
                 * @example 13
                 */
                total: number;
                /** @description List of eigenpods present in the account */
                eigenpods: string[];
            };
        };
        Portfolio: {
            /**
             * Format: float
             * @description Total USD balance of all the account's stakes
             * @example 182981229.16751668
             */
            total_balance_usd: number;
            /**
             * Format: float
             * @description Total USD of rewards earned from all the account's stakes
             * @example 4526.16751668
             */
            total_rewards_usd: number;
            /**
             * @description Total number of stakes
             * @example 56
             */
            total_stakes: number;
            /**
             * @description Total number of stakes actively collecting rewards
             * @example 52
             */
            total_active_stakes: number;
            /** @description List of protocols staked within the account */
            protocols: (components["schemas"]["DefaultPortfolio"] | components["schemas"]["DYDXPortfolio"] | components["schemas"]["ETHPortfolio"] | components["schemas"]["XTZPortfolio"])[];
            /**
             * @description Error message if some protocol data could not be retrieved
             * @example We could not fetch data for the following protocols: TON
             */
            error: string | null;
            /**
             * Format: date-time
             * @description Date at which the account portfolio was last updated. The portfolio is cached for 24h. However it gets updated every time a stake is added or deleted from the account.
             * @example 2023-02-06T21:48:11.038Z
             */
            updated_at: string;
        };
        AccountPayload: {
            /**
             * @description Account name
             * @example name
             */
            name: string;
            /**
             * @description Account description
             * @example description
             */
            description: string;
        };
        Deployment: {
            /**
             * @description The unique ID of the deployment
             * @example 9c4520b7-838c-4feb-aefa-679a498af845
             */
            id: string;
            /**
             * @description The type of product that the deployment is for
             * @example defi
             * @enum {string}
             */
            product_type: "defi" | "dedicated" | "pooling";
            /**
             * @description The name of the deployment
             * @example ETH Dedicated Staking
             */
            name: string;
            /**
             * @description The display name of the deployment (used in the UI)
             * @example Dedicated Staking
             */
            display_name: string;
            /**
             * @description The description of the deployment
             * @example A Dedicated Staking deployment that earns ETH rewards
             */
            description: string;
            /**
             * @description The blockchain that the deployment is on
             * @example eth
             * @enum {string}
             */
            chain: "eth" | "bsc" | "arb" | "matic" | "base" | "op";
            /**
             * @description The chain ID of the deployment
             * @example 1
             * @enum {integer}
             */
            chain_id: 42161 | 56 | 1 | 137 | 8453 | 11155111 | 17000 | 10;
            /**
             * @description The address of the deployment
             * @example 0x81Ca2c97f491b13c1EAFeF1ae2cF72DDD1fCBFB6
             */
            address: string;
            /**
             * @description The status of the deployment
             * @example active
             * @enum {string}
             */
            status: "pending" | "active" | "disabled" | "deposit_paused";
            /**
             * @description Custom icon of the asset
             * @example https://example.com/icon.png
             */
            asset_icon: string | null;
            /**
             * @description Custom icon of the protocol
             * @example https://example.com/icon.png
             */
            protocol_icon: string | null;
            /**
             * @description The fee of the product (present only for `dedicated` product_type for now)
             * @example 0.01
             */
            product_fee: string;
        };
        ETHOperationDeposit: {
            /**
             * @description type of the operation
             * @example deposit
             */
            type: string;
            /**
             * Format: date-time
             * @description Time of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time: string;
            /**
             * @description Validator address of the operation
             * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
             */
            validator_address: string;
            /**
             * @description Index of the public key of the validator
             * @example 1
             */
            validator_index?: number;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Ordered list of smart-contracts in the calling chain
             * @example [
             *       "0x1e68238cE926DEC62b3FBC99AB06eB1D85CE0270",
             *       "0x43244f90814b31dec250de24df5bb023eB1D85CE"
             *     ]
             */
            proxies: string[];
            /**
             * @description Slot of the deposit
             * @example 15955054
             */
            slot: number;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * @description Base fee used for this block in WEI
             * @example 7
             */
            block_base_fee?: string;
            /**
             * @description Withdrawal credentials of the deposit
             * @example 010000000000000000000000e1f4acc0affb36a805474e3b6ab786738c6900a2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in WEI of the deposit transaction
             * @example 32000000000000000000000
             */
            amount: string;
        };
        ETHOperationExecutionReward: {
            /** @example execution_reward */
            type: string;
            /**
             * Format: date-time
             * @description Time of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time: string;
            /**
             * @description Validator address of the operation
             * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
             */
            validator_address: string;
            /**
             * @description Validator's consensus layer index
             * @example 1
             */
            validator_index: number;
            /**
             * @description Slot of the execution reward
             * @example 15955054
             */
            slot: number;
            /**
             * @description Block number of the reward
             * @example 15955054
             */
            block: number;
            /**
             * @description Fee recipient of the reward
             * @example 0x1e68238cE926DEC62b3FBC99AB06eB1D85CE0270
             */
            fee_recipient?: string;
            /**
             * @description The block was created through the MEV (Maximum Extractable Value) system
             * @example true
             */
            is_mev_block?: boolean;
            /**
             * @description Hash of the MEV payout transaction when applicable. It is provided on a "best effort" basis.
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            mev_payout_tx_hash?: string;
            /**
             * @description Amount in WEI of the reward
             * @example 3467036438000000000
             */
            amount: string;
        };
        ETHOperationConsensusWithdrawal: {
            /** @example consensus_withdrawal */
            type: string;
            /**
             * Format: date-time
             * @description Time of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time: string;
            /**
             * @description Validator address of the operation
             * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
             */
            validator_address: string;
            /**
             * @description Validator's consensus layer index
             * @example 1
             */
            validator_index: number;
            /**
             * @description Slot of the withdrawal
             * @example 15955054
             */
            slot: number;
            /**
             * @description Block number of the reward
             * @example 15955054
             */
            block: number;
            /**
             * @description Fee recipient of the reward
             * @example 0x1e68238cE926DEC62b3FBC99AB06eB1D85CE0270
             */
            fee_recipient: string;
            /**
             * @description Amount in WEI of the reward
             * @example 3467036438000000000
             */
            amount: string;
        };
        ETHOperationKilnExitRequest: {
            /**
             * @description type of the operation
             * @example kiln_exit_request
             */
            type: string;
            /**
             * Format: date-time
             * @description Time of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time: string;
            /**
             * @description Validator address of the operation
             * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
             */
            validator_address: string;
            /**
             * @description Index of the public key of the validator
             * @example 1
             */
            validator_index: number;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Slot of the deposit
             * @example 15955054
             */
            slot: number;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * @description Base fee used for this block in WEI
             * @example 7
             */
            block_base_fee?: string;
            /**
             * @description Address of the contract from which the request originate
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            emitting_contract: string;
            /**
             * @description Address that called the contract
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            caller?: string;
        };
        ETHOperationLidoExitRequest: {
            /**
             * @description type of the operation
             * @example lido_exit_request
             */
            type: string;
            /**
             * Format: date-time
             * @description Time of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time: string;
            /**
             * @description Validator address of the operation
             * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
             */
            validator_address: string;
            /**
             * @description Index of the public key of the validator
             * @example 1
             */
            validator_index: number;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Slot of the deposit
             * @example 15955054
             */
            slot: number;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * @description Base fee used for this block in WEI
             * @example 7
             */
            block_base_fee?: string;
            /**
             * @description Address of the contract from which the request originate
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            emitting_contract: string;
        };
        ETHOperationRioExitRequest: {
            /**
             * @description type of the operation
             * @example rio_exit_request
             */
            type: string;
            /**
             * Format: date-time
             * @description Time of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time: string;
            /**
             * @description Validator address of the operation
             * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
             */
            validator_address: string;
            /**
             * @description Index of the public key of the validator
             * @example 1
             */
            validator_index: number;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Slot of the deposit
             * @example 15955054
             */
            slot: number;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * @description Base fee used for this block in WEI
             * @example 7
             */
            block_base_fee?: string;
            /**
             * @description Address of the contract from which the request originate
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            emitting_contract: string;
        };
        ETHOperationVoluntaryExit: {
            /**
             * @description type of the operation
             * @example voluntary_exit
             */
            type: string;
            /**
             * Format: date-time
             * @description Time of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time: string;
            /**
             * @description Validator address of the operation
             * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
             */
            validator_address: string;
            /**
             * @description Index of the public key of the validator
             * @example 1
             */
            validator_index: number;
            /**
             * @description Slot of the deposit
             * @example 15955054
             */
            slot: number;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * @description Index in the list of Voluntary Exits in the block's payload
             * @example 0
             */
            index_in_payload: number;
            /**
             * @description Exit epoch set in the message sent to the Beacon Chain
             * @example 2000
             */
            message_epoch: number;
            /**
             * @description Signature of the message sent to the Beacon Chain
             * @example 0xabc
             */
            message_signature: string;
        };
        ETHStake: {
            /**
             * @description Public key of the validator
             * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
             */
            validator_address: string;
            /**
             * @description Validator's consensus layer index
             * @example 1
             */
            validator_index?: number;
            /**
             * @description State of the Ethereum stake
             * @example active_ongoing
             * @enum {string}
             */
            state: "unknown" | "unstaked" | "deposit_in_progress" | "pending_initialized" | "pending_queued" | "active_ongoing" | "active_exiting" | "active_slashed" | "exited_unslashed" | "exited_slashed" | "withdrawal_possible" | "withdrawal_done";
            /**
             * Format: date-time
             * @description Date of activation on the Ethereum consensus layer
             * @example 2023-01-14T01:13:59Z
             */
            activated_at?: string;
            /**
             * @description Epoch of activation on the Ethereum consensus layer
             * @example 174049
             */
            activated_epoch?: number;
            /**
             * Format: date-time
             * @description Timestamp of the block at which the corresponding staking transaction was executed
             * @example 2023-01-14T01:13:59Z
             */
            delegated_at?: string;
            /**
             * @description Block at which the corresponding staking transaction was executed
             * @example 16397387
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of exit on the Ethereum consensus layer
             * @example 2023-01-14T01:13:59Z
             */
            exited_at?: string;
            /**
             * @description Epoch of exit on the Ethereum consensus layer
             * @example 174049
             */
            exited_epoch?: number;
            /**
             * @description Address of the sender of the first deposit transaction
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            deposit_tx_sender?: string;
            /**
             * @description Address of the last recipient of an execution reward
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            execution_fee_recipient?: string;
            /**
             * @description Ethereum withdrawal credentials
             * @example 010000000000000000000000e1f4acc0affb36a805474e3b6ab786738c6900a2
             */
            withdrawal_credentials?: string;
            /**
             * @description Effective balance in WEI of the stake as seen by the Ethereum consensus layer
             * @example 32000000000000000000
             */
            effective_balance?: string;
            /**
             * @description Current balance in WEI on the Ethereum consensus layer
             * @example 32076187808000000000
             */
            balance?: string;
            /**
             * @description Sum of consensus rewards in WEI earned by this stake
             * @example 76187808000000000
             */
            consensus_rewards?: string;
            /**
             * @description Sum of execution rewards in WEI earned by this stake
             * @example 0
             */
            execution_rewards?: string;
            /**
             * @description Sum of consensus and execution rewards in WEI earned by this stake
             * @example 76187808000000000
             */
            rewards?: string;
            /**
             * @description For Kiln On-Chain stakes only, the amount of execution rewards in WEI that can be withdrawn.
             * @example 76187808000000000
             */
            claimable_execution_rewards?: string;
            /**
             * @description For Kiln On-Chain stakes only, the amount of consensus rewards in WEI that can be withdrawn.
             * @example 76187808000000000
             */
            claimable_consensus_rewards?: string;
            /**
             * @description Gross annual percentage yield
             * @example 3.407
             */
            gross_apy?: number;
            /**
             * @description Whether this stake is managed by Kiln
             * @example true
             */
            is_kiln: boolean;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
            /** @description EigenLayer data of the stake, present if `include_eigenlayer=true` and if the stake has an EigenPod as withdrawal credentials */
            eigenlayer?: {
                /**
                 * @description Whether the stake is restaked
                 * @example true
                 */
                is_restaked: boolean;
                /**
                 * @description Whether the stake can be restaked
                 * @example true
                 */
                is_restakable: boolean;
                /**
                 * @description Whether the stake is pending restakability
                 * @example true
                 */
                is_pending: boolean;
                /**
                 * @description Whether the stake is withdrawn from EigenLayer
                 * @example true
                 */
                is_withdrawn: boolean;
                /**
                 * @description Last timestamp this stake was checkpointed
                 * @example 16397387
                 */
                last_checkpointed_at: number;
                /**
                 * @deprecated
                 * @description Amount of restaked points of the stake
                 * @example 16287.724444444444
                 */
                points: number;
            };
            /**
             * @description Estimation of the next slot where the validator's CL rewards will be skimmed
             * @example 16397387
             */
            estimated_next_skimming_slot?: number;
            /**
             * Format: date-time
             * @description Estimation of when the validator's CL rewards will be skimmed
             * @example 2023-01-14T01:13:59Z
             */
            estimated_next_skimming_at?: string;
            /** @description Set if an exit was requested for this stake. This is only applicable to kiln stakes until EIP-7002 (Pectra upgrade). */
            exit_requested?: boolean;
        };
        PostETHStakesPayload: {
            stakes: {
                /**
                 * @description Validator pubkey
                 * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
                 */
                validator?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        ETHReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated consensus rewards WEI during the day
             * @example 2988504000000000
             */
            consensus_rewards: string;
            /**
             * @description Accumulated execution rewards in WEI during the day (MEV + non-MEV)
             * @example 0
             */
            execution_rewards: string;
            /**
             * @description Sum of execution rewards in WEI earned by this stake via MEV. Only available when the 'scope' parameter is used.
             * @example 0
             */
            mev_execution_rewards?: string;
            /**
             * @description Sum of execution rewards in WEI earned by this stake without MEV. Only available when the 'scope' parameter is used.
             * @example 0
             */
            non_mev_execution_rewards?: string;
            /**
             * @description Median execution reward in WEI for the day (MEV + non-MEV). Only available when the 'scope' parameter is used.
             * @example 0
             */
            median_execution_reward?: string;
            /**
             * @description Accumulated consensus and execution rewards in WEI during the day
             * @example 2988504000000000
             */
            rewards: string;
            /**
             * @description Sum of effective balances in WEI that contributed to these rewards
             * @example 64000000000000000000
             */
            stake_balance: string;
            /**
             * @description Gross annual percentage yield
             * @example 3.407
             */
            gross_apy: number;
            /**
             * @description Consensus annual percentage yield
             * @example 3.407
             */
            cl_apy: number;
            /**
             * @description Execution annual percentage yield
             * @example 0
             */
            el_apy: number;
            /**
             * @description Weighted number of active validators during the day. Only available when the 'scope' parameter is used.
             * @example 152636.33
             */
            active_validator_count?: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            stake_balance_usd?: number;
        };
        ETHNetworkStats: {
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Ethereum currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Price of Ethereum in USD
             * @example 2000
             */
            eth_price_usd: number;
            /**
             * @description Estimated queue entry time in seconds from a deposit to an active stake
             * @example 3600
             */
            estimated_entry_time_seconds: number;
            /**
             * @description Estimated queue exit time in seconds from an exit request to an exited stake
             * @example 3600
             */
            estimated_exit_time_seconds: number;
            /**
             * @description Estimated time for a stake to receive Consensus rewards on the execution layer
             * @example 3600
             */
            estimated_withdrawal_time_seconds: number;
            /**
             * @description Number of active validators on the network
             * @example 100
             */
            nb_validators: number;
            /**
             * Format: date-time
             * @description Last time the data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        ETHKilnStats: {
            gross_apy: {
                /** @description Kiln's average APR from yesterday */
                last_1d: number;
                /** @description Kiln's average APR from the last 7 days */
                last_7d: number;
                /** @description Kiln's average APR from the last 30 days */
                last_30d: number;
                /**
                 * Format: date
                 * @description Last date the data was updated
                 * @example 2023-01-14
                 */
                updated_at?: string;
            };
        };
        ETHExitMessage: {
            /**
             * @description Public key of the validator
             * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
             */
            validator_address: string;
            /**
             * @description GnuPG UID of the public key used to encrypt payload
             * @example Hubert Bonisseur de La Bath (hubert) <hubert@kiln.fi>
             */
            gpg_public_key: string;
            /**
             * @description GnuPG encrypted consensus message to exit the validator
             * @example -----BEGIN PGP MESSAGE-----
             *
             *     hQEMAw2MqHavoVh9AQf/f5paxAuOB25SlXqKmLea0yHJBXnwuMuByfDZbXOBe4mD
             *     iXz4ZJakeKGLbeJ/pP3Nwtu9vnIagQKF0YVNmrenkt8bL1jo/B6r34ycGIat/+GX
             *     1dc3GxyOBxju2q4JMe5chXdR4HXX3uU9QaynD24D5tsFgTxGM2I8JqV6BXEXgbBZ
             *     MXqtAjBcYd+krE1w135fuEYA6Nb/89QjLPcWXk92aS1K0WC39iAZxPsa7nyuhvRg
             *     dGXGQX+RrJ8jHAS4a074C3eAB3wCecvDk9d+FoUI3kaczUd4Ew7vUY0FX55oO60N
             *     qZxA5VwSHTfoH4fNPINeKr4Dx1mVLNcNM3z5qWcA6NKaAQak+arCnAYhLFCg/ydh
             *     zEcEWW1ebI4Ab3aweR17jme2I+XoWEwIBtUX7op6K7RUb3x9cBdGy4PDw6syBQJ3
             *     LExv8qZ43F9u0hD8UizpYQZESduT3x+To1/UQ3qBILuq2yszWaXP/kav1+fafLNb
             *     yEuHE2EoB27vDv6hSpwlDrXesGoMCc5NlAZBLnWiUcwzu2X19ASWnBSAmQ==
             *     =9AeP
             *     -----END PGP MESSAGE-----
             *
             */
            payload: string;
            /**
             * Format: date-time
             * @description When the exit message was generated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        ETHEigenLayerMetadata: {
            /**
             * @description Name of the operator
             * @example Kiln
             */
            name: string;
            /**
             * @description Website of the operator
             * @example https://kiln.fi
             */
            website: string;
            /**
             * @description Description of the operator
             * @example Enterprise-grade staking made easy
             */
            description: string;
            /**
             * @description URL of the operator's logo
             * @example https://raw.githubusercontent.com/kilnfi/public/main/icon.png
             */
            logo: string;
            /**
             * @description Twitter handle of the operator
             * @example https://twitter.com/Kiln_finance
             */
            twitter: string;
            /**
             * @description Last time the metadata was fetched
             * @example 1711479048
             */
            updated_at: number;
        };
        ETHEigenLayerAvsReward: {
            /**
             * @description Address of the token
             * @example 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
             */
            token_address: string;
            /**
             * @description Symbol of the token
             * @example EIGEN
             */
            token_symbol: string;
            /**
             * @description Decimals of the token
             * @example 18
             */
            token_decimals: number;
            /**
             * @description Amount of claimable rewards
             * @example 423768272961631825
             */
            claimable_amount: string;
        };
        ETHEigenLayerSummary: {
            /**
             * @description Address of the EigenPod
             * @example 0x991c468AbcE2b4DD627a6210C145373EbABdd186
             */
            eigenpod: string;
            /**
             * @description Address of the owner of the EigenPod
             * @example 0x7fF0B7D8b99E4cD685355A786B6ad5287B6552C1
             */
            owner: string;
            /**
             * @description Address of the operator the owner is delegated to
             * @example 0xA4e245C3a1Cb2F0512a71B9CD908dCa2F1641781
             */
            delegated_to: string | null;
            /**
             * @description The EigenPod's `withdrawableRestakedExecutionLayerGwei` minus the sum of undelegations that are already or will be withdrawable for ETH
             * @example 233079323000000000
             */
            eigenpod_queuable_restaked_balance: string;
            /**
             * @description The sum of undelegations that are claimable but cannot be withdrawn for ETH
             * @example 233079323000000000
             */
            eigenpod_redelegatable_balance: string;
            /**
             * @description The EigenPod's balance minus the `withdrawableRestakedExecutionLayerGwei`
             * @example 233079323000000000
             */
            eigenpod_available_balance: string;
            /**
             * @description The minimum between:
             *       - The sum of undelegations that are not yet claimable and are withdrawable for ETH.
             *       - The EigenPod's balance minus the sum of undelegations that are withdrawable for ETH
             *
             * @example 233079323000000000
             */
            eigenpod_pending_balance: string;
            /**
             * @description The sum of undelegations that are withdrawable for ETH
             * @example 233079323000000000
             */
            eigenpod_withdrawable_balance: string;
            /**
             * @description The sum of active validators that are restaked in the EigenPod
             * @example 64000000000000000000
             */
            beaconchain_restaked_balance: string;
            /**
             * @description The sum of validators that are not restaked in the eigenpod and that are not `active_ongoing`
             * @example 32000000000000000000
             */
            beaconchain_pending_balance: string;
            /**
             * @description The sum of validators that are not restaked in the eigenpod and that are `active_ongoing`
             * @example 32000000000000000000
             */
            beaconchain_restakable_balance: string;
        };
        ETHEigenLayerOperator: {
            operator: {
                /**
                 * @description Address of the operator
                 * @example 0xa4e245c3a1cb2f0512a71b9cd908dca2f1641781
                 */
                address: string;
                /** @description Metadata of the operator */
                metadata: components["schemas"]["ETHEigenLayerMetadata"];
                /** @description Breakdown of the shares of the operator */
                shares_breakdown: {
                    /**
                     * @description Address of the strategy
                     * @example 0x31b6f59e1627cefc9fa174ad03859fc337666af7
                     */
                    strategy: string;
                    /**
                     * @description Address of the token
                     * @example 0xb4f5fc289a778b80392b86fa70a7111e5be0f859
                     */
                    token: string;
                    /**
                     * @description Amount of shares
                     * @example 10000000000000000
                     */
                    shares: string;
                }[];
            };
            avs: {
                /**
                 * @description Address of the AVS
                 * @example 0xa7b2e7830c51728832d33421670dbbe30299fd92
                 */
                address: string;
                /** @description Metadata of the AVS */
                metadata: components["schemas"]["ETHEigenLayerMetadata"];
            }[];
        };
        ETHEigenLayerLiquidDeposit: {
            /**
             * @description Unique hash of the deposit
             * @example 0x00000abacf28adf70937550a99b01a745bf49a58893fb1a2383973f1c9e0862ea1000000
             */
            id: string;
            /**
             * @description Address that made the deposit
             * @example 0x7ff0b7d8b99e4cd685355a786b6ad5287b6552c1
             */
            staker: string;
            /**
             * @description Address of the strategy used for the deposit
             * @example 0x7d704507b76571a51d9cae8addabbfd0ba0e63d3
             */
            strategy: string;
            /**
             * @description Address of the token deposited
             * @example 0x3f1c547b21f65e10480de3ad8e19faac46c95034
             */
            token: string;
            /**
             * @description Amount of shares deposited
             * @example 100035705916232161
             */
            shares: string;
            /**
             * @description Block number of the deposit
             * @example 1260927
             */
            block_number: number;
            /**
             * @description Timestamp of the deposit
             * @example 1711990200
             */
            timestamp: number;
            /**
             * @description Hash of the transaction of the deposit
             * @example 0xb46702e30e723fad1e03a95baa5183f4d05e497429f6e89476d2383ddafe3224
             */
            tx_hash: string;
        };
        ETHEigenLayerNativePoints: {
            /**
             * @description Total amount of native restaked points
             * @example 1321313.12313
             */
            total: number;
            /** @description Breakdown of native restaked points per validator */
            breakdown: {
                /**
                 * @description Validator address
                 * @example 0x800390da57b384873178a7db4e0b80bc1ed6528510713bcef75f46d339a7bd4957f54159c375d7dc811e52122ad9b604
                 */
                validator_address: string;
                /**
                 * @description Amount of native restaked points
                 * @example 16234.9066666
                 */
                points: number;
            }[];
        };
        ETHEigenLayerLiquidPoints: {
            /**
             * @description Total amount of liquid restaked points
             * @example 1321313.12313
             */
            total: number;
            /** @description Breakdown of liquid restaked points per strategy */
            breakdown: {
                /**
                 * @description Address of the strategy
                 * @example 0x7d704507b76571a51d9cae8addabbfd0ba0e63d3
                 */
                strategy: string;
                /**
                 * @description Address of the token
                 * @example 0x3f1c547b21f65e10480de3ad8e19faac46c95034
                 */
                token: string;
                /**
                 * @description Amount of liquid restaked points
                 * @example 45.2870433486
                 */
                points: number;
            }[];
        };
        ETHEigenLayerLiquidWithdrawal: {
            /**
             * @description Unique hash of the withdrawal values
             * @example 0x116d1dbc99ec69f11fecbf409e0e7a204df2bbd6df606138092b2f4748dc254c00000000
             */
            id: string;
            /**
             * @description Address of the withdrawer
             * @example 0x991c468abce2b4dd627a6210c145373ebabdd186
             */
            withdrawer: string;
            /**
             * @description Address of the staker
             * @example 0x991c468abce2b4dd627a6210c145373ebabdd186
             */
            staker: string;
            /**
             * @description Address of the current delegation
             * @example 0xa4e245c3a1cb2f0512a71b9cd908dca2f1641781
             */
            delegated_to: string;
            /**
             * @description Nonce of the withdrawal
             * @example 4
             */
            nonce: number;
            /** @description List of tokens withdrawn */
            tokens: {
                /**
                 * @description Address of the strategy used for the withdrawal
                 * @example 0x7d704507b76571a51d9cae8addabbfd0ba0e63d3
                 */
                strategy: string;
                /**
                 * @description Address of the token withdrawn
                 * @example 0x3f1c547b21f65e10480de3ad8e19faac46c95034
                 */
                token: string;
                /**
                 * @description Amount of shares withdrawn
                 * @example 1951305012863276
                 */
                shares: string;
            }[];
            /**
             * @description Block number of the withdrawal
             * @example 1260939
             */
            block_number: number;
            /**
             * @description Timestamp of the withdrawal
             * @example 1711990356
             */
            timestamp: number;
            /**
             * @description Transaction hash of the withdrawal
             * @example 0xb4677739bc1fb3402c63111be2b593aa9b8e1db6b99f68114f8b177c082bb151
             */
            tx_hash: string;
            /**
             * @description Whether the withdrawal can be claimed
             * @example true
             */
            claimable: boolean;
            /**
             * @description Block number at which the withdrawal can be claimed
             * @example 1260949
             */
            claimable_at_block: number;
            /**
             * @description Whether the withdrawal has been claimed
             * @example true
             */
            claimed: boolean;
            /**
             * @description Transaction hash of when it was claimed
             * @example 0x7702378acb84937775e575a91b679bf911beb1202a7105cbfdf1c4071ab70f98
             */
            claimed_tx_hash: string | null;
        };
        ETHEigenLayerNativeUndelegation: {
            /**
             * @description Unique hash of the withdrawal values
             * @example 0x116d1dbc99ec69f11fecbf409e0e7a204df2bbd6df606138092b2f4748dc254c00000000
             */
            id: string;
            /**
             * @description Amount of native ETH withdrawn
             * @example 1017210384000000000
             */
            shares: string;
            /**
             * @description Address of the staker
             * @example 0x991c468abce2b4dd627a6210c145373ebabdd186
             */
            staker: string;
            /**
             * @description Address of the current delegation
             * @example 0xa4e245c3a1cb2f0512a71b9cd908dca2f1641781
             */
            delegated_to: string;
            /**
             * @description Address of the withdrawer
             * @example 0x991c468abce2b4dd627a6210c145373ebabdd186
             */
            withdrawer: string;
            /**
             * @description Nonce of the withdrawal
             * @example 4
             */
            nonce: string;
            /**
             * @description Block number of the withdrawal
             * @example 1301849
             */
            block_number: number;
            /**
             * @description Timestamp of the withdrawal
             * @example 1712523564
             */
            timestamp: number;
            /**
             * @description Hash of the transaction of the withdrawal
             * @example 0x3780bb9a46d0d9a3279f744cf3a9700d58d99a662f891659f0b3428c0bb69030
             */
            tx_hash: string;
            /**
             * @description Whether the withdrawal can be claimed
             * @example true
             */
            claimable: boolean;
            /**
             * @description Block number at which the withdrawal can be claimed
             * @example 19200000
             */
            claimable_at_block: number;
            /**
             * @description Whether the withdrawal has been claimed
             * @example false
             */
            claimed: boolean;
            /**
             * @description Hash of the transaction of the claim
             * @example 0x6b6823670af880e4394d9602a8dd86e95a88cd9ec2440903715537d7bd3e94a5
             */
            claimed_tx_hash: string | null;
            /**
             * @description Whether the withdrawal can be claimed as token when calling `completeQueuedWithdrawals` by passing the parameter `receiveAsTokens=true`
             * @example true
             */
            withdrawable_as_eth: boolean;
        };
        ETHSignedTx: {
            /**
             * @description Signed serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            signed_tx_serialized: string;
        };
        ETHBroadcastTxPayload: {
            /**
             * @description Signed serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            tx_serialized: string;
        };
        ETHBroadcastedTx: {
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
        };
        ETHPostKeysPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into.
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Ethereum withdrawal address used for the withdrawals credentials of the validators.
             *     This is the address that will receive consensus rewards.
             *     BLS format is not supported.
             *     This address is used as the execution-layer fee-recipient unless `fee_recipient_address` is specified.
             *
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            withdrawal_address: string;
            /**
             * @description Ethereum fee-recipient address for execution rewards.
             *     Uses the `withdrawal_address` both for consensus and execution rewards if not specified.
             *
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            fee_recipient_address?: string;
            /**
             * @description Number of validator keys to generate. You can generate up to 150 keys at once.
             * @example 1
             */
            number: number;
            /**
             * @description Response format. Use `"cli_deposit"` for more information about each key.
             * @default batch_deposit
             * @example cli_deposit
             * @enum {string}
             */
            format: "cli_deposit" | "batch_deposit";
        };
        ETHPostKeysOnChainPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into.
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Number of validator keys to generate. You can generate up to 150 keys at once.
             * @example 1
             */
            number: number;
            /**
             * @description Kiln V1 Smart-contract that will handle the dispatch of fees.
             *
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            fee_recipient_contract_address: string;
            /**
             * @description Kiln V1 Smart-contract used to stake generated keys.
             *
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            staking_contract_address: string;
        };
        ETHPostKeysVSuitePayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into.
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Number of validator keys to generate. You can generate up to 150 keys at once.
             * @example 1
             */
            number: number;
            /**
             * @description Smart-Contract address on the Ethereum execution layer of the Kiln vSuite Factory.
             *
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            factory_contract_address?: string;
        };
        ETHPostKeysCliResponse: {
            /**
             * @description Format of the key
             * @example cli_deposit
             * @enum {string}
             */
            format: "cli_deposit";
            /**
             * @description Public key of the validator
             * @example 8f36e2f4e921b1ed5ce9c94f21e1f26a748ac4e0c57f0d8973e7d576a2f8953b87dd86300de718238de23b1fecb19db5
             */
            pubkey: string;
            /**
             * @description Withdrawals credentials of the validator
             * @example 010000000000000000000000e1f4acc0affb36a805474e3b6ab786738c6900a2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in GWEI that needs to be deposited to activate the validator
             * @example 32000000000
             */
            amount: number;
            /**
             * @description BLS signature for the deposit data structure required to stake on the Ethereum chain
             * @example b7947eabf631d4772c4014a9fec2ecac2c15fc5175ad83023bbdfc9e6618cb8e78829231477c060bc9339482058ff195141f2aeb801c0329a1a4afebd7e76ce0ba1d9d88f8820d052836a79d59aea673db9eb5009db4a4f6e04fb7ffbdbdd604
             */
            signature: string;
            /**
             * @description Root hash ensuring the deposit message integrity
             * @example 65db6ae73c6465311a7acf2cd8a2863eececf09901872550639f0d8f6c1876f5
             */
            deposit_message_root: string;
            /**
             * @description Root hash ensuring the deposit data integrity
             * @example 9b74cccf3a3c501374179be4bb6f505c4b40da41c205a101db3342a8df0af2dd
             */
            deposit_data_root: string;
            /**
             * @description Identifier for the fork version
             * @example 00000000
             */
            fork_version: string;
            /**
             * @description Ethereum network for the generated validation key(s)
             * @example mainnet
             */
            network_name: string;
            /**
             * @description Version of the deposit-cli tool used to generate the validation key
             * @example 2.2.0
             */
            deposit_cli_version: string;
        }[];
        ETHPostKeysBatchResponse: {
            /**
             * @description Format of the key
             * @example batch_deposit
             * @enum {string}
             */
            format: "batch_deposit";
            /** @description Public keys of the validators */
            pubkeys: string[];
            /** @description Withdrawals credentials of the validators */
            withdrawal_credentials: string[];
            /** @description BLS signatures for the deposit data structure required to stake on the Ethereum chain */
            signatures: string[];
            /** @description Root hashes ensuring the deposit data integrity */
            deposit_data_roots: string[];
        };
        ETHCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet to stake from and be used as a withdrawal credentials in the deposit. Losing access to this wallet will result in losing the stake.
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Amount to stake in WEI (must be a multiple of "32000000000000000000")
             * @example 32000000000000000000
             */
            amount_wei: string;
        };
        ETHCraftRequestExitTxPayload: {
            /**
             * @description Wallet to request-exit from, it must be the owner of the stake OR of the EigenPod which owns this stake.
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Public keys of the validators to exit
             * @example [
             *       "0x8015a0ef9bf2cf742b5dc34c117ecd0191f27a8748a40cdfa27dbbbe6d6a52066d0743e8a9b7f5c7c2e9fa6db4943a70"
             *     ]
             */
            validators: string[];
        };
        ETHPrepareTxPayload: {
            /**
             * @description Unsigned serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            unsigned_tx_serialized: string;
            /**
             * @description r part of the ECDSA signature in hex
             * @example de28e9efee4c8de422a3c64bfaaee11a32f7cf12bdd3f00dcce41a79fe776c65
             */
            r: string;
            /**
             * @description s part of the ECDSA signature in hex
             * @example 3f233eb69495fa4741ad28ef0ba40612bacaf08331fd76041c371f5a2ecc2ab5
             */
            s: string;
            /**
             * @description v part of the ECDSA signature (0 or 1)
             * @example 0
             */
            v: number;
        };
        ETHTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error" | "pending_confirmation";
            /**
             * @description Transaction receipt. Object shape can be found [here](https://github.com/web3/web3.js/blob/c5072a35996eb232e2742e92b612c07ba7af98ab/packages/web3-types/src/eth_types.ts#L299)
             * @example {
             *       "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
             *       "blockNumber": 8608123,
             *       "contractAddress": null,
             *       "cumulativeGasUsed": 8180146,
             *       "effectiveGasPrice": 27391741855,
             *       "from": "0x9ce658155a6f05fe4aef83b7fa8f431d5e8ccb55",
             *       "gasUsed": 70098,
             *       "logs": [
             *         {
             *           "address": "0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b",
             *           "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
             *           "blockNumber": 8608123,
             *           "data": "0x00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003093b5ae8053213154d099ed7fc99f571a0c8124601f8a59540335c7c35e0b40aad7b033f84af365185c04812acab257460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000000000009ce658155a6f05fe4aef83b7fa8f431d5e8ccb550000000000000000000000000000000000000000000000000000000000000008004059730700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000609395a07d5e7eb073725049ecba8144d850b7a1a58f603fd1fc12049d32c98db47e3d81608074bca20ccdcc94f7f4767d0d6b852edf4f6231532f33242e64d0617ac93465bc4cdabe9cebf0abe6d169830fcf375b28c0641487e5f86df2875a970000000000000000000000000000000000000000000000000000000000000008ecce030000000000000000000000000000000000000000000000000000000000",
             *           "logIndex": 150,
             *           "removed": false,
             *           "topics": [
             *             "0x649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c5"
             *           ],
             *           "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
             *           "transactionIndex": 33,
             *           "id": "log_4115d183"
             *         },
             *         {
             *           "address": "0x5FaDfdb7eFffd3B4AA03f0F29d9200Cf5F191F31",
             *           "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
             *           "blockNumber": 8608123,
             *           "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000003093b5ae8053213154d099ed7fc99f571a0c8124601f8a59540335c7c35e0b40aad7b033f84af365185c04812acab257460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000000000009ce658155a6f05fe4aef83b7fa8f431d5e8ccb55",
             *           "logIndex": 151,
             *           "removed": false,
             *           "topics": [
             *             "0x737feedde71ce80c08f73125e4350b001be2dfb6a00fb455086c2b0a514cdfac"
             *           ],
             *           "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
             *           "transactionIndex": 33,
             *           "id": "log_b4bb5ff7"
             *         }
             *       ],
             *       "logsBloom": "0x
             *       "status": true,
             *       "to": "0x5fadfdb7efffd3b4aa03f0f29d9200cf5f191f31",
             *       "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
             *       "transactionIndex": 33,
             *       "type": "0x2"
             *     }
             */
            receipt?: Record<string, never>;
        };
        ETHUnsignedTx: {
            /**
             * @description Hash of the unsigned transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            unsigned_tx_hash: string;
            /**
             * @description Unsigned serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            unsigned_tx_serialized: string;
            /**
             * @description Contract address of the transaction recipient
             * @example 0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852
             */
            to: string;
            /**
             * @description Hex encoded contract data to be sent with the transaction
             * @example 0xca0bfcce0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000309696c02ec4dbb99f714e26ff1acdf6b258d36dcbad7b8b549553bc99b94ea639cd247f31683564995afd48568c1b6edd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020010000000000000000000000bc86717bad3f8ccf86d2882a6bc351c94580a994000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060a3869da2ed5cc558f016d59fc5ceb0cac28e58743836aa3cf146221f1ef0b959e3cc5c589e05e171f1473596aadf36411767ad92edaae421ba0291bd7568267b3faabc3ab6ed9ddfc048ea6640370977f16f4f626a0e567a11ba25acdc520bb000000000000000000000000000000000000000000000000000000000000000012dd65914dda46639df6344701de54ac3ebe34a4b230262d3017fcd6c29954452
             */
            contract_call_data: string;
            /**
             * @description Amount of ETH to send in wei
             * @example 32000000000000000000
             */
            amount_wei: string;
            /**
             * @description Nonce of the transaction
             * @example 1
             */
            nonce: number;
            /**
             * @description Gas limit of the transaction in gas units. We provide a default value of two times the estimated gas limit
             * @example 140244
             */
            gas_limit: number;
            /**
             * @description Max priority fee per gas in wei. This is basically the miner fee. We provide a default value of 2 gwei so transactions are mined faster.
             * @example 2000000000
             */
            max_priority_fee_per_gas_wei: string;
            /**
             * @description Max fee per gas in wei. This is the maxium amount of gas that you are willing to pay for the transaction.
             * @example 383687469748
             */
            max_fee_per_gas_wei: string;
            /**
             * @description Chain ID of the network
             * @example 1
             */
            chain_id: number;
        };
        DefiStake: {
            /**
             * @description Vault id of the stake (chainID_vaultAddress)
             * @example 1_0x9ab5f9101a3c1b868e2c422e294cc2ee685551d5
             */
            vault_id: string;
            /**
             * @description Wallet address of the stake owner
             * @example 0x356c33675674691ad6b8ac92ecfb91960c5d2c30
             */
            owner: string;
            /**
             * @description Current balance in the lowest unit of the deposit asset (ie USDC) (ie asset_amount * 10**decimal)
             * @example 1880000
             */
            current_balance: string;
            /**
             * @description Shares balance in the lowest unit of the vault share (ie mshUSDC) (ie shares_amount * 10**decimal)
             * @example 1980000
             */
            shares_balance: string;
            /**
             * @description Total rewards in the lowest unit of the deposit asset (ie USDC) (ie asset_amount * 10**decimal)
             * @example 100000
             */
            total_rewards: string;
            /**
             * @description Current rewards represent the rewards since the last complete withdraw (last time a position went back to 0 in current_balance and a new deposit was performed) in the lowest unit of the token (ie asset_amount * 10**decimal)
             * @example 100000
             */
            current_rewards: string;
            /**
             * @description Total deposited amount in the lowest unit of the token (ie asset_amount * 10**decimal)
             * @example 1980000
             */
            total_deposited_amount: string;
            /**
             * @description Total withdrawn amount in the lowest unit of the token (ie asset_amount * 10**decimal)
             * @example 100000
             */
            total_withdrawn_amount: string;
            /**
             * @description Vault address
             * @example 0x9aB5F9101a3C1B868e2c422E294cc2ee685551D5
             */
            vault: string;
            /**
             * @description Chain name
             * @example eth
             */
            chain: string;
            /**
             * @description Chain identifier
             * @example 1
             */
            chain_id: number;
            /**
             * @description Last updated block number
             * @example 220379047
             */
            updated_at_block: number;
        };
        DefiMorphoClaimReward: {
            /**
             * @description Address of the rewards owner
             * @example 0x356c33675674691ad6b8ac92ecfb91960c5d2c30
             */
            wallet: string;
            /**
             * @description Address of the asset reward
             * @example 0x58D97B57BB95320F9a05dC918Aef65434969c2B2
             */
            asset: string;
            /** @description Address of the contract to interract with */
            to: string;
            /** @description Calldata of the transaction */
            data: string;
            /**
             * @description Value of the transaction
             * @example 0
             */
            value: string;
            /**
             * @description Chain id of the transaction
             * @example 1
             */
            chain_id: number;
        };
        DefiMorphoExtraReward: {
            /**
             * @description Address of the rewards owner
             * @example 0x356c33675674691ad6b8ac92ecfb91960c5d2c30
             */
            wallet: string;
            /**
             * @description Address of the asset reward
             * @example 0x58D97B57BB95320F9a05dC918Aef65434969c2B2
             */
            asset: string;
            /**
             * @description Symbol of the asset reward
             * @example MORPHO
             */
            asset_symbol: string;
            /**
             * @description Number of decimals of this reward asset
             * @example 18
             */
            asset_decimals: number;
            /**
             * @description Total rewards in the lowest unit of the asset (ie `asset_amount * 10**asset_decimals`)
             * @example 100123
             */
            total: string;
            /**
             * @description Total amount of this asset that can be claimed by the wallet in the lowest unit of the asset (ie `asset_amount * 10**asset_decimals`)
             * @example 1231343
             */
            claimable: string;
            /**
             * @description Total amount of this asset that is already accounted for but can't be claimed by the wallet for now in the lowest unit of the asset (ie `asset_amount * 10**asset_decimals`)
             * @example 345453
             */
            claimable_next: string;
            /**
             * @description Chain name
             * @example eth
             */
            chain: string;
            /**
             * @description Chain id
             * @example 1
             */
            chain_id: number;
        };
        DefiOperation: {
            /**
             * @description Vault id of the stake (chainID_vaultAddress)
             * @example 1_0x9ab5f9101a3c1b868e2c422e294cc2ee685551d5
             */
            vault_id: string;
            /**
             * @description Operation type
             * @example withdrawal
             * @enum {string}
             */
            type: "withdrawal" | "deposit";
            /**
             * @description Address of the stake owner
             * @example 0x356c33675674691ad6b8ac92ecfb91960c5d2c30
             */
            owner: string;
            /**
             * @description Asset amount in the lowest unit of the token (ie asset_amount * 10**decimal)
             * @example 100000
             */
            assets: string;
            /**
             * @description Shares amount in the lowest unit of the token share (ie asset_amount * 10**decimal)
             * @example 100000
             */
            shares: string;
            /**
             * @description Sender address
             * @example 0x356c33675674691ad6b8ac92ecfb91960c5d2c30
             */
            sender: string;
            /**
             * @description Operation timestamp (RFC3339 format)
             * @example 2024-05-22T11:59:01+00:00
             */
            timestamp: string;
            /**
             * @description Transaction hash
             * @example 0xca1e9f9a9ed7b632dbb71e9d22730d1541df010e915d65af91d1ca102600c965
             */
            tx_hash: string;
            /**
             * @description Vault address
             * @example 0x9aB5F9101a3C1B868e2c422E294cc2ee685551D5
             */
            vault: string;
            /**
             * @description Chain name
             * @example eth
             */
            chain: string;
            /**
             * @description Chain identifier
             * @example 1
             */
            chain_id: number;
        };
        DefiNetworkStats: {
            /**
             * @description Vault id of the stake (chainID_vaultAddress)
             * @example 1_0x9ab5f9101a3c1b868e2c422e294cc2ee685551d5
             */
            vault_id: string;
            /**
             * @description Vault asset address
             * @example 0x94a9d9ac8a22534e3faca9f4e7f2e2cf85d5e4c8
             */
            asset: string;
            /**
             * @description Vault asset icon
             * @example https://public.kiln.fi/icons/assets/usdc.svg
             */
            asset_icon: string;
            /**
             * @description Vault asset symbol
             * @example USDC
             */
            asset_symbol: string;
            /**
             * @description Asset decimals
             * @example 6
             */
            asset_decimals: number;
            /**
             * @description Vault asset price in USD (From Coingecko)
             * @example 1
             */
            asset_price_usd: number;
            /**
             * @description Vault share symbol
             * @example skcUSDC
             */
            share_symbol: string;
            /**
             * @description Total value locked in the vault in the lowest unit of the token (ie asset_amount * 10**decimal)
             * @example 1980000
             */
            tvl: string;
            /**
             * @description Protocol name
             * @example aave_v3
             * @enum {string}
             */
            protocol: "aave_v3" | "venus" | "compound_v3" | "morpho" | "sdai";
            /**
             * @description Protocol display name
             * @example Aave V3
             */
            protocol_display_name: string;
            /**
             * @description Protocol icon
             * @example https://public.kiln.fi/icons/defi-protocols/aave.svg
             */
            protocol_icon: string;
            /**
             * @description Total value locked in the protocol in the lowest unit of the token (ie asset_amount * 10**decimal)
             * @example 1980000
             */
            protocol_tvl: string;
            /**
             * @description Protocol supply limit in the lowest unit of the token (ie asset_amount * 10**decimal)
             * @example 1980000
             */
            protocol_supply_limit: string;
            /**
             * @description Gross reward rate of the vault
             * @example 14.9287953383104
             */
            grr: number;
            /**
             * @description Net reward rate of the vault
             * @example 11.9430363
             */
            nrr: number;
            /**
             * @description Vault address
             * @example 0x9aB5F9101a3C1B868e2c422E294cc2ee685551D5
             */
            vault: string;
            /**
             * @description Chain name
             * @example eth
             * @enum {string}
             */
            chain: "eth" | "bsc" | "arb" | "matic" | "base" | "op";
            /**
             * @description Chain identifier
             * @example 1
             * @enum {integer}
             */
            chain_id: 42161 | 56 | 1 | 137 | 8453 | 11155111 | 17000 | 10;
            /**
             * @description Last updated block number
             * @example 220379047
             */
            updated_at_block: number;
            /**
             * @description Net reward rate of all additional rewards
             * @example 7.763389587402344
             */
            additional_rewards_nrr?: number;
            /** @description Additional rewards of the vault */
            additional_rewards?: components["schemas"]["DefiNetworkStatsAdditionalRewards"][];
        };
        DefiNetworkStatsAdditionalRewards: {
            /**
             * @description Asset symbol of the additional rewards
             * @example MORPHO
             */
            asset_symbol: string;
            /**
             * @description Asset decimals of the additional rewards
             * @example 18
             */
            asset_decimals: number;
            /**
             * @description Asset address of the additional rewards
             * @example 0x58D97B57BB95320F9a05dC918Aef65434969c2B2
             */
            asset: string;
            /**
             * @description Net reward rate of additional rewards of the vault
             * @example 11.9430363
             */
            nrr: number;
        };
        DefiTransaction: {
            /**
             * @description Address of the transaction sender
             * @example 0x356c33675674691ad6b8ac92ecfb91960c5d2c30
             */
            wallet: string;
            /**
             * @description Contract address of the transaction recipient
             * @example 0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852
             */
            to: string;
            /**
             * @description Hex encoded contract data to be sent with the transaction
             * @example 0xca0bfcce0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000309696c02ec4dbb99f714e26ff1acdf6b258d36dcbad7b8b549553bc99b94ea639cd247f31683564995afd48568c1b6edd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020010000000000000000000000bc86717bad3f8ccf86d2882a6bc351c94580a994000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060a3869da2ed5cc558f016d59fc5ceb0cac28e58743836aa3cf146221f1ef0b959e3cc5c589e05e171f1473596aadf36411767ad92edaae421ba0291bd7568267b3faabc3ab6ed9ddfc048ea6640370977f16f4f626a0e567a11ba25acdc520bb000000000000000000000000000000000000000000000000000000000000000012dd65914dda46639df6344701de54ac3ebe34a4b230262d3017fcd6c29954452
             */
            data: string;
            /**
             * @description Amount of ETH to send in wei
             * @example 0
             */
            value: string | null;
            /**
             * @description Nonce of the transaction
             * @example 1
             */
            nonce: number;
            /**
             * @description Gas limit of the transaction in gas units. We provide a default value of two times the estimated gas limit
             * @example 140244
             */
            gas_limit: number;
            /**
             * @description Chain ID of the network
             * @example 1
             */
            chain_id: number;
        };
        DefiCraftApproveTxPayload: {
            /**
             * @description The Ethereum address of the user initiating the approval.
             * @example 0x991c468AbcE2b4DD627a6210C145373EbABdd186
             */
            wallet: string;
            /**
             * @description The contract address of the ERC20 token being approved for deposit. For Kiln DeFi It will be the asset address you will get from the /network-stats route for the vault you want to deposit into.
             * @example 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d
             */
            asset: string;
            /**
             * @description The unique identifier of the blockchain network where the transaction is executed (e.g., 1 for Ethereum Mainnet).
             * @example 1
             */
            chain_id: number;
            /**
             * @description The contract address of the vault that will receive the asset deposit authorization.
             * @example 0x6e90b52a5eab4e4a08135dcf8c93abdf6cae9c91
             */
            vault: string;
            /**
             * @description Amount to approve in the lowest unit of the asset (ie amount * 10**asset_decimals)
             * @example 10000000000000000
             */
            amount: string;
            /**
             * @description If true, bypasses existing approval checks and proceeds with creating a new approval transaction regardless of current allowance.
             * @default false
             * @example false
             */
            ignore_checks: boolean;
        };
        DefiCraftDepositTxPayload: {
            /**
             * @description The Ethereum address of the user initiating the deposit.
             * @example 0x991c468AbcE2b4DD627a6210C145373EbABdd186
             */
            wallet: string;
            /**
             * @description The contract address of the ERC20 token being deposited. For Kiln DeFi, it will be the asset address you will get from the /network-stats route for the vault you want to deposit into.
             * @example 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d
             */
            asset: string;
            /**
             * @description The unique identifier of the blockchain network where the transaction is executed (e.g., 1 for Ethereum Mainnet).
             * @example 1
             */
            chain_id: number;
            /**
             * @description The contract address of the vault that you will deposit into.
             * @example 0x6e90b52a5eab4e4a08135dcf8c93abdf6cae9c91
             */
            vault: string;
            /**
             * @description Amount to deposit into the vault in the lowest unit of the asset (ie amount * 10**asset_decimals).
             * @example 10000000000000000
             */
            amount: string;
            /**
             * @description If true, bypasses existing deposit checks and proceeds with creating a new deposit transaction regardless of current balance.
             * @default false
             * @example false
             */
            ignore_checks: boolean;
        };
        DefiCraftWithdrawTxPayload: {
            /**
             * @description The Ethereum address of the user initiating the withdrawal.
             * @example 0x991c468AbcE2b4DD627a6210C145373EbABdd186
             */
            wallet: string;
            /**
             * @description The unique identifier of the blockchain network where the transaction is executed (e.g., 1 for Ethereum Mainnet).
             * @example 1
             */
            chain_id: number;
            /**
             * @description The contract address of the vault that you will withdraw from.
             * @example 0x6e90b52a5eab4e4a08135dcf8c93abdf6cae9c91
             */
            vault: string;
            /**
             * @description Amount to withdraw from the vault in the lowest unit of the asset (ie amount * 10**asset_decimals). If you want to withdraw the maximum amount, you can use the string "max".
             * @example [
             *       "10000000000000000",
             *       "max"
             *     ]
             */
            amount: string;
            /**
             * @description If true, bypasses existing withdrawal checks and creates a new withdrawal transaction regardless of the current balance in the vault.
             * @default false
             * @example false
             */
            ignore_checks: boolean;
        };
        ETHOnchainV2Stake: {
            /**
             * @description Address of the owner of the stake (wallet)
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            owner?: string;
            /**
             * @description Name of the pooling integration
             * @example Pooled Staked ETH
             */
            integration?: string;
            /**
             * @description Address of the pooling integration
             * @example 0x5db5235b5c7e247488784986e58019fffd98fda4
             */
            integration_address?: string;
            /**
             * @description Balance of the stake in WEI
             * @example 300000000
             */
            balance?: string;
            /**
             * @description Balance of the stake in the integration's ERC20 token
             * @example 300000000
             */
            shares_balance?: string;
            /**
             * @description Rewards of the stake in WEI
             * @example 300000000
             */
            rewards?: string;
            /**
             * @description Net Reward Rate of the stake (one month)
             * @example 3.407
             */
            nrr?: number;
            /**
             * @description Gross Reward Rate of the stake (one month)
             * @example 3.9
             */
            grr?: number;
            one_year?: components["schemas"]["NRR_GRR"];
            six_months?: components["schemas"]["NRR_GRR"];
            three_months?: components["schemas"]["NRR_GRR"];
            one_month?: components["schemas"]["NRR_GRR"];
            one_week?: components["schemas"]["NRR_GRR"];
            /** @description Structure of the stake */
            structure?: {
                /**
                 * @description Name of the vPool
                 * @example Kiln
                 */
                pool?: string;
                /**
                 * @description Address of the vPool
                 * @example 0x00a0be1bbc0c99898df7e6524bf16e893c1e3bb9
                 */
                pool_address?: string;
                /**
                 * @description Share of the stake in the vPool
                 * @example 0.5
                 */
                share?: number;
            }[];
            /**
             * @description Block at which the stake was delegated
             * @example 123
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Timestamp at which the stake was delegated
             * @example 2023-01-14T01:13:59Z
             */
            delegated_at?: string;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
        };
        ETHOnchainV2Operation: {
            /**
             * @description ID for the operation
             * @example 10970
             */
            id?: string;
            /**
             * @description Owner (wallet) of the operation
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            owner?: string;
            /**
             * @description Timestamp of the operation
             * @example 2023-09-11T12:54:36.000Z
             */
            time?: string;
            /**
             * @description Block number of the operation
             * @example 9676129
             */
            block?: number;
            /**
             * @description Hash of the transaction associated with the operation
             * @example 0xce804f083605289e5a1e1d197876067e1d59474e3dbf7faf65f44e7f3db72722
             */
            tx_hash?: string;
        } & (components["schemas"]["ETHOnChainV2ExitOperation"] | components["schemas"]["ETHOnChainV2ClaimOperation"] | components["schemas"]["ETHOnChainV2DepositOperation"]);
        ETHOnChainV2ExitOperation: {
            /** @enum {string} */
            type?: "exit";
            /**
             * @description ID of the exit ticket
             * @example 6125082604576892342340792916294922100547
             */
            ticket_id?: string;
            /**
             * @description Status of the exit ticket
             * @example unfulfillable
             */
            ticket_status?: components["schemas"]["EthOnChainV2ExitTicketStatus"];
            /**
             * @description Size of the exit ticket in WEI
             * @example 49982523094294339
             */
            size?: string;
            /**
             * @description Size of the exit ticket in shares
             * @example 50157843875857851
             */
            size_shares?: string;
            /**
             * @description Claimable amount of the exit ticket in WEI
             * @example 0
             */
            claimable?: string;
            /**
             * @description Claimable amount of the exit ticket in shares
             * @example 0
             */
            claimable_shares?: string;
            /**
             * @description IDs of the casks associated with the exit ticket
             * @example [
             *       "43"
             *     ]
             */
            cask_ids?: string[];
        };
        ETHOnChainV2ClaimOperation: {
            /** @enum {string} */
            type?: "claim";
            ticket_id?: string;
            ticket_status?: components["schemas"]["EthOnChainV2ClaimTicketStatus"];
            claimed?: string;
            claimed_shares?: string;
            remaining?: string;
            remaining_shares?: string;
            used_cask_ids?: string[];
        };
        ETHOnChainV2DepositOperation: {
            /** @enum {string} */
            type?: "deposit";
            amount?: string;
            amount_shares?: string;
        };
        /** @enum {string} */
        EthOnChainV2ExitTicketStatus: "unfulfillable" | "fulfillable" | "partially_fulfillable";
        /** @enum {string} */
        EthOnChainV2ClaimTicketStatus: "fulfilled" | "fulfillable" | "partially_fulfillable";
        ETHOnchainV2Reward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date?: string;
            /**
             * @description Accumulated rewards in WEI during the day
             * @example 1000
             */
            rewards?: string;
            /**
             * @description Balance in WEI at the end of the day
             * @example 1000
             */
            balance?: string;
            /**
             * @description Net annual percentage yield
             * @example 3.407
             */
            nrr?: number;
            /**
             * @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko.
             * @example 400
             */
            rewards_usd?: number;
            /**
             * @description Estimated value of the balance at the end of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko.
             * @example 3400
             */
            balance_usd?: number;
        };
        NRR_GRR: {
            /**
             * @description Net Reward Rate
             * @example 3.407
             */
            nrr?: number;
            /**
             * @description Gross Reward Rate
             * @example 3.9
             */
            grr?: number;
        };
        ETHOnchainV2NetworkStats: {
            /**
             * @description Address of the integration
             * @example 0x5db5235b5c7e247488784986e58019fffd98fda4
             */
            address?: string;
            /**
             * @description Name of the integration
             * @example Pooled Staked ETH
             */
            name?: string;
            /**
             * @description Symbol of the integration
             * @example psETH
             */
            symbol?: string;
            /**
             * @description Fee of the integration
             * @example 10
             */
            fee?: number;
            /**
             * @description Total supply of the integration in Shares
             * @example 104865118570632775697
             */
            total_supply?: string;
            /**
             * @description Total underlying supply of the integration in WEI
             * @example 103891951311279705404
             */
            total_underlying_supply?: string;
            /**
             * @description Total number of stakers in the integration
             * @example 123
             */
            total_stakers?: number;
            /**
             * @description Net Reward Rate of the integration (one month)
             * @example 3.407
             */
            nrr?: number;
            /**
             * @description Gross Reward Rate of the integration (one month)
             * @example 3.9
             */
            grr?: number;
            one_year?: components["schemas"]["NRR_GRR"];
            six_months?: components["schemas"]["NRR_GRR"];
            three_months?: components["schemas"]["NRR_GRR"];
            one_month?: components["schemas"]["NRR_GRR"];
            one_week?: components["schemas"]["NRR_GRR"];
            pools?: {
                /**
                 * @description Address of the vPool
                 * @example 0x00a0be1bbc0c99898df7e6524bf16e893c1e3bb9
                 */
                address?: string;
                /**
                 * @description Name of the vPool
                 * @example Kiln
                 */
                name?: string;
                /**
                 * @description Ratio of the vPool, if 100% then the vPool is the only one
                 * @example 100
                 */
                ratio?: number;
                /**
                 * @description Commission of the vPool
                 * @example 10
                 */
                commission?: number;
                /**
                 * @description Total deposited in the vPool in WEI
                 * @example 104865118570632775697
                 */
                total_deposited?: string;
                /**
                 * @description Address of the vFactory
                 * @example 0xc63d9f0040d35f328274312fc8771a986fc4ba86
                 */
                factory_address?: string;
                /**
                 * @description Address of the operator
                 * @example 0xf9ef220543aaf0f4dc999382741883ce776064fb
                 */
                operator_address?: string;
            }[];
        };
        ETHOnchainV2ExitTicket: {
            /**
             * @description Address of the owner of the exit ticket
             * @example 0x991c468abce2b4dd627a6210c145373ebabdd186
             */
            owner: string;
            /**
             * @description State of the exit ticket
             * @enum {string}
             */
            state: "fulfillable" | "unfulfillable" | "partially_fulfillable";
            /**
             * @description Amount of the exit ticket that can be retrieved
             * @example 9999999999999998
             */
            retrievable_amount: string;
            /**
             * @description Amount of the exit ticket that is still exiting
             * @example 0
             */
            exiting_amount: string;
            /**
             * @description Address of the exit queue
             * @example 0x8979117a69dfa7f4d4e3c7b59197ff03f4a2ceaf
             */
            exit_queue_address: string | null;
            /**
             * @description Address of the integration from which the exit ticket was created
             * @example 0xf448e20f8a69aeb88a7dfb837e6afab5e7bcf80e
             */
            integration_address: string;
            /**
             * @description ID of the exit ticket
             * @example 63632802614215492667651061498899397423000
             */
            ticket_id: string;
            /**
             * @description ID of the cask associated with the exit ticket, will be `null` if the ticket's state is `unfulfillable`
             * @example 89
             */
            cask_id: string | null;
            /**
             * @description Estimated unix timestamp at which the exit ticket will be `fulfillable`. If the ticket's state is `fulfillable` the field will be `null`
             * @example 1725530777795
             */
            estimated_claimable_at: number | null;
        };
        XTZStake: {
            /**
             * @description Wallet address of the delegator
             * @example tz1VZ4iC4wzTR7iK2Q7PoQGVDAojuY42fDxD
             */
            stake_address: string;
            /**
             * @description Address of the baker
             * @example tz2FCNBrERXtaTtNX6iimR1UJ5JSDxvdHM93
             */
            baker_address: string;
            /**
             * @description State of the Tezos stake
             * @example active
             * @enum {string}
             */
            state: "activating" | "active" | "inactive";
            /**
             * @description Type of Tezos stake, delegation or stake
             * @example stake
             * @enum {string}
             */
            stake_type: "stake" | "delegation";
            /**
             * Format: date-time
             * @description Date at which the stake started earning rewards
             * @example 2023-01-14T01:13:59Z
             */
            activated_at?: string;
            /**
             * @description Cycle at which the stake started earning rewards
             * @example 542
             */
            activated_cycle?: number;
            /**
             * Format: date-time
             * @description Cycle in which the delegation transaction was made
             * @example 2023-01-14T01:13:59Z
             */
            delegated_at: string;
            /**
             * @description Date at which the staking transaction was made, corresponds to the block it was part of.
             * @example 542
             */
            delegated_cycle: number;
            /**
             * @description Block at which the corresponding staking transaction was executed
             * @example 16397387
             */
            delegated_block: string;
            /**
             * Format: date-time
             * @description Block time at which the undelegation transaction was made
             * @example 2023-01-14T01:13:59Z
             */
            undelegated_at?: string;
            /**
             * @description Cycle in which the unstaking transaction was made, corresponds to the block it was part of.
             * @example 542
             */
            undelegated_cycle?: number;
            /**
             * @description Current active delegated balance earning rewards in mutez
             * @example 32076187808000000000
             */
            balance: string;
            /**
             * @description Current staked balance in mutez
             * @example 32076187808000000000
             */
            staked_balance: string;
            /**
             * @description Wallet balance in mutez, this is a daily snapshot done every night.
             * @example 32076187808000000000
             */
            wallet_balance: string;
            /**
             * @description Sum of delegation rewards in mutez earned by this stake since delegation
             * @example 76187808000000000
             */
            rewards: string;
            /**
             * @description Sum of staking rewards in mutez earned by this stake since delegation (staking refers to Adaptive Issuance)
             * @example 1500000000
             */
            staked_rewards: string;
            /**
             * @description Gross annual percentage yield
             * @example 3.407
             */
            gross_apy: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        XTZRewardByDay: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Delegation rewards earned for that day in mutez
             * @example 27098488
             */
            rewards: string;
            /**
             * @description Wallet balance for that day in mutez
             * @example 420000000000
             */
            active_balance: string;
            /**
             * @description Staking rewards earned for that day in mutez (staking refers to Adaptive Issuance)
             * @example 1765200
             */
            staked_rewards: string;
            /**
             * @description Staking balance for that day in mutez (staking refers to Adaptive Issuance)
             * @example 1500000000
             */
            staked_balance: string;
            /**
             * @description Gross annual percentage yield
             * @example 3.42
             */
            gross_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the active balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            active_balance_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            staked_balance_usd?: number;
        };
        XTZRewardByCycle: {
            /**
             * @description The cycle number
             * @example 271
             */
            cycle: number;
            /**
             * Format: date-time
             * @description The date at which the cycle began
             * @example 2022-09-01T08:44:00Z
             */
            cycle_begins_at: string;
            /**
             * @description Delegation rewards for that cycle in mutez
             * @example 27098488
             */
            rewards: string;
            /**
             * @description Wallet balance for that cycle in mutez
             * @example 34329999165
             */
            active_balance: string;
            /**
             * @description Staking rewards earned for that day in mutez (staking refers to Adaptive Issuance)
             * @example 1765200
             */
            staked_rewards: string;
            /**
             * @description Staking balance for that day in mutez (staking refers to Adaptive Issuance)
             * @example 1500000000
             */
            staked_balance: string;
            /**
             * @description Gross annual percentage yield
             * @example 36.053
             */
            gross_apy: number;
        };
        XTZNetworkStats: {
            /**
             * @description XTZ price in USD
             * @example 3.5
             */
            xtz_price_usd: number;
            /**
             * @description Number of active bakers
             * @example 402
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply percentage of Tezos currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description XTZ inflation rate
             * @example 5.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        XTZOperationDelegate: {
            /**
             * @description Type of the operation
             * @example delegate
             */
            type: string;
            /**
             * Format: date-time
             * @description When did the operation occur in an RFC3339 format
             * @example 2023-01-14T01:13:59Z
             */
            date: string;
            /**
             * @description The wallet address for the stake
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            staker_address: string;
            /**
             * @description The baker address to which the wallet is staked
             * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
             */
            baker_address: string;
            /**
             * @description The operation hash
             * @example opLq44uJLP7f3V3zCVDCDgXayV3CQLGqihdoAYtMnXLW4f1q2fb
             */
            operation: string;
            /**
             * @description The operation gas used if any
             * @example 10
             */
            operation_gas_used: string;
            /**
             * @description The operation baker fee if applicable
             * @example 42
             */
            baker_fee: string;
            /**
             * @description The block number in which the operation was included
             * @example 1342
             */
            block: number;
            /**
             * @description The delegated amount
             * @example 420000
             */
            amount: string;
        };
        XTZOperationUndelegate: {
            /**
             * @description Type of the operation
             * @example undelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description When did the operation occur in an RFC3339 format
             * @example 2023-01-14T01:13:59Z
             */
            date: string;
            /**
             * @description The wallet address for the stake
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            staker_address: string;
            /**
             * @description The baker address to which the wallet is staked
             * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
             */
            baker_address: string;
            /**
             * @description The operation hash
             * @example opLq44uJLP7f3V3zCVDCDgXayV3CQLGqihdoAYtMnXLW4f1q2fb
             */
            operation: string;
            /**
             * @description The operation gas used if any
             * @example 10
             */
            operation_gas_used: string;
            /**
             * @description The operation baker fee if applicable
             * @example 42
             */
            baker_fee: string;
            /**
             * @description The block number in which the operation was included
             * @example 1342
             */
            block: number;
        };
        XTZOperationActivation: {
            /**
             * @description Type of the operation
             * @example activation
             */
            type: string;
            /**
             * Format: date-time
             * @description When did the operation occur in an RFC3339 format
             * @example 2023-01-14T01:13:59Z
             */
            date: string;
            /**
             * @description The wallet address for the stake
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            staker_address: string;
            /**
             * @description The baker address to which the wallet is staked
             * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
             */
            baker_address: string;
            /**
             * @description The cycle at which the stake was active and started earning
             * @example 585
             */
            cycle: number;
        };
        XTZOperationPayment: {
            /**
             * @description Type of the operation
             * @example payment
             */
            type: string;
            /**
             * Format: date-time
             * @description When did the operation occur in an RFC3339 format
             * @example 2023-01-14T01:13:59Z
             */
            date: string;
            /**
             * @description The wallet address for the stake
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            staker_address: string;
            /**
             * @description The baker address to which the wallet is staked
             * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
             */
            baker_address: string;
            /**
             * @description The address that executed the payment
             * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
             */
            sender_address: string;
            /**
             * @description The operation hash
             * @example opLq44uJLP7f3V3zCVDCDgXayV3CQLGqihdoAYtMnXLW4f1q2fb
             */
            operation: string;
            /**
             * @description The operation gas used if any
             * @example 10
             */
            operation_gas_used: string;
            /**
             * @description The operation baker fee if applicable
             * @example 42
             */
            baker_fee: string;
            /**
             * @description The block number in which the operation was included
             * @example 1342
             */
            block: number;
            /**
             * @description The reward amount that was paid out
             * @example 4200
             */
            amount: string;
        };
        XTZOperationStake: {
            /**
             * @description Type of the operation
             * @example stake
             */
            type: string;
            /**
             * Format: date-time
             * @description When did the operation occur in an RFC3339 format
             * @example 2023-01-14T01:13:59Z
             */
            date: string;
            /**
             * @description The wallet address for the stake
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            staker_address: string;
            /**
             * @description The baker address to which the wallet is staked
             * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
             */
            baker_address: string;
            /**
             * @description The operation hash
             * @example opLq44uJLP7f3V3zCVDCDgXayV3CQLGqihdoAYtMnXLW4f1q2fb
             */
            operation: string;
            /**
             * @description The operation gas used if any
             * @example 10
             */
            operation_gas_used: string;
            /**
             * @description The operation baker fee if applicable
             * @example 42
             */
            baker_fee: string;
            /**
             * @description The block number in which the operation was included
             * @example 1342
             */
            block: number;
            /**
             * @description The reward amount that was paid out
             * @example 4200
             */
            amount: string;
        };
        XTZOperationUnstake: {
            /**
             * @description Type of the operation
             * @example unstake
             */
            type: string;
            /**
             * Format: date-time
             * @description When did the operation occur in an RFC3339 format
             * @example 2023-01-14T01:13:59Z
             */
            date: string;
            /**
             * @description The wallet address for the stake
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            staker_address: string;
            /**
             * @description The baker address to which the wallet is staked
             * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
             */
            baker_address: string;
            /**
             * @description The operation hash
             * @example opLq44uJLP7f3V3zCVDCDgXayV3CQLGqihdoAYtMnXLW4f1q2fb
             */
            operation: string;
            /**
             * @description The operation gas used if anyfalse
             * @example 10
             */
            operation_gas_used: string;
            /**
             * @description The operation baker fee if applicable
             * @example 42
             */
            baker_fee: string;
            /**
             * @description The block number in which the operation was included
             * @example 1342
             */
            block: number;
            /**
             * @description The reward amount that was paid out
             * @example 4200
             */
            amount: string;
        };
        XTZOperationFinalize: {
            /**
             * @description Type of the operation
             * @example finalize
             */
            type: string;
            /**
             * Format: date-time
             * @description When did the operation occur in an RFC3339 format
             * @example 2023-01-14T01:13:59Z
             */
            date: string;
            /**
             * @description The wallet address for the stake
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            staker_address: string;
            /**
             * @description The baker address to which the wallet is staked
             * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
             */
            baker_address: string;
            /**
             * @description The operation hash
             * @example opLq44uJLP7f3V3zCVDCDgXayV3CQLGqihdoAYtMnXLW4f1q2fb
             */
            operation: string;
            /**
             * @description The operation gas used if any
             * @example 10
             */
            operation_gas_used: string;
            /**
             * @description The operation baker fee if applicable
             * @example 42
             */
            baker_fee: string;
            /**
             * @description The block number in which the operation was included
             * @example 1342
             */
            block: number;
            /**
             * @description The reward amount that was paid out
             * @example 4200
             */
            amount: string;
        };
        XTZCraftDelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet signing the transaction
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            wallet: string;
            /**
             * @description Baker address to delegate to
             * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
             */
            baker_address: string;
        };
        XTZCraftUndelegateTxPayload: {
            /**
             * @description Wallet signing the transaction
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            wallet: string;
        };
        XTZCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet signing the transaction
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            wallet: string;
            /**
             * @description Amount to stake in mutez (1 XTZ = 1000000 mutez)
             * @example 1000000
             */
            amount_mutez: string;
        };
        XTZCraftUnstakeTxPayload: {
            /**
             * @description Wallet signing the transaction
             * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
             */
            wallet: string;
            /**
             * @description Amount to stake in mutez (1 XTZ = 1000000 mutez)
             * @example 1000000
             */
            amount_mutez: string;
        };
        XTZPrepareTxPayload: {
            /**
             * @description Unsigned serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            unsigned_tx_serialized: string;
            /**
             * @description Transaction signature in hex
             * @example de28e9efee4c8de422a3c64bfaaee11a32f7cf12bdd3f00dcce41a79fe776c65
             */
            signature: string;
        };
        XTZUnsignedTx: {
            /**
             * @description Hash of the unsigned transaction
             * @example 7383fbcd64c1d95c92b5ebee44a569f15e557a773b6d733ab7bb4e3ce98de812
             */
            unsigned_tx_hash: string;
            /**
             * @description Unsigned serialized transaction
             * @example aef6da4e377364f07c2aa460d7148a8971dab767417b541fa473b2d8e038974f6e00566eaa0198f3df9230489abd1a64f5ef9b98b270940ac4cb9807f44e00ff00344c5e59a1de5370e1cee5d2fcf706a649bba15b
             */
            unsigned_tx_serialized: string;
            /**
             * @description Transaction object. Object shape can be found [here](https://github.com/ecadlabs/taquito/blob/master/packages/taquito-local-forging/src/interface.ts#L3)
             * @example {
             *       "branch": "BM3LZcG2SNz2DCWVGAAvT3gd8Vc17dS649CG6o9PhwJjmpUTptA",
             *       "contents": [
             *         {
             *           "kind": "delegation",
             *           "source": "tz1TX3Nh6h6js1VxXCuQ7rAF7LoGpd81FSw3",
             *           "fee": "1300",
             *           "counter": "15082948",
             *           "gas_limit": "10100",
             *           "storage_limit": "0",
             *           "delegate": "tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd"
             *         }
             *       ]
             *     }
             */
            unsigned_tx: Record<string, never>;
        };
        XTZSignedTx: {
            /**
             * @description Signed serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            signed_tx_serialized: string;
        };
        XTZBroadcastTxPayload: {
            /**
             * @description Signed serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            tx_serialized: string;
        };
        XTZBroadcastedTx: {
            /**
             * @description Hash of the transaction
             * @example oo3UAUpr685s3F7Fmc2ry8KHo4vdWGKo7LeimesAg56NBd6sDjs
             */
            tx_hash: string;
        };
        XTZTxStatus: {
            /**
             * @description Transaction status
             * @example applied
             * @enum {string}
             */
            status?: "applied" | "failed" | "skipped" | "backtracked";
            /**
             * @description Transaction receipt. Object shape can be found [here](https://github.com/ecadlabs/taquito/blob/master/packages/taquito-rpc/src/types.ts#L1206)
             * @example {
             *       "protocol": "PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1",
             *       "chain_id": "NetXnHfVqm9iesp",
             *       "hash": "op2Gu3xpBifNmj1dD88gwFdXuN4HT7EiqPcaERPCdyf48nYwZa9",
             *       "branch": "BMUmBJ3CSxDdzEUUYuS47DNHDv8ayxyMh12zSWZ7hKzYtv8Ny7S",
             *       "contents": [
             *         {
             *           "kind": "transaction",
             *           "source": "tz3TMbNR6YcMmRvXpssLi7wNr7RrBKsgruYU",
             *           "fee": "10277",
             *           "counter": "15413092",
             *           "gas_limit": "100000",
             *           "storage_limit": "30",
             *           "amount": "0",
             *           "destination": "KT1VbeN9etQe5c2b6EAFfCZVaSTpiieHj5u1",
             *           "parameters": {
             *             "entrypoint": "tick",
             *             "value": {
             *               "string": "tzBTC/EURL"
             *             }
             *           },
             *           "metadata": {
             *             "balance_updates": [
             *               {
             *                 "kind": "contract",
             *                 "contract": "tz3TMbNR6YcMmRvXpssLi7wNr7RrBKsgruYU",
             *                 "change": "-10277",
             *                 "origin": "block"
             *               },
             *               {
             *                 "kind": "accumulator",
             *                 "category": "block fees",
             *                 "change": "10277",
             *                 "origin": "block"
             *               }
             *             ],
             *             "operation_result": {
             *               "status": "applied",
             *               "storage": {
             *                 "prim": "Pair",
             *                 "args": [
             *                   [
             *                     {
             *                       "prim": "Pair",
             *                       "args": [
             *                         {
             *                           "prim": "Pair",
             *                           "args": [
             *                             {
             *                               "bytes": "0000b9ba1078c3324ee4e0162c28cbda4765c6518d21"
             *                             },
             *                             {
             *                               "prim": "Pair",
             *                               "args": [
             *                                 [
             *                                   {
             *                                     "prim": "Elt",
             *                                     "args": [
             *                                       {
             *                                         "string": "tzBTC/EURL"
             *                                       },
             *                                       {
             *                                         "int": "2078"
             *                                       }
             *                                     ]
             *                                   },
             *                                   {
             *                                     "prim": "Elt",
             *                                     "args": [
             *                                       {
             *                                         "string": "tzBTC/USDT"
             *                                       },
             *                                       {
             *                                         "int": "2079"
             *                                       }
             *                                     ]
             *                                   }
             *                                 ],
             *                                 {
             *                                   "int": "288949"
             *                                 }
             *                               ]
             *                             }
             *                           ]
             *                         },
             *                         {
             *                           "prim": "Pair",
             *                           "args": [
             *                             {
             *                               "int": "600"
             *                             },
             *                             {
             *                               "int": "10000"
             *                             }
             *                           ]
             *                         }
             *                       ]
             *                     },
             *                     {
             *                       "prim": "Pair",
             *                       "args": [
             *                         {
             *                           "bytes": "0000b28066369a8ed09ba9d3d47f19598440266013f0"
             *                         },
             *                         {
             *                           "int": "63"
             *                         }
             *                       ]
             *                     },
             *                     {
             *                       "int": "10"
             *                     },
             *                     {
             *                       "int": "288950"
             *                     }
             *                   ],
             *                   {
             *                     "prim": "Pair",
             *                     "args": [
             *                       {
             *                         "prim": "Pair",
             *                         "args": [
             *                           {
             *                             "prim": "Pair",
             *                             "args": [
             *                               {
             *                                 "int": "288951"
             *                               },
             *                               {
             *                                 "int": "1"
             *                               }
             *                             ]
             *                           },
             *                           {
             *                             "prim": "Pair",
             *                             "args": [
             *                               {
             *                                 "int": "288952"
             *                               },
             *                               [
             *                                 {
             *                                   "prim": "Elt",
             *                                   "args": [
             *                                     {
             *                                       "string": "tzBTC/EURL"
             *                                     },
             *                                     [
             *                                       [
             *                                         {
             *                                           "prim": "Pair",
             *                                           "args": [
             *                                             [
             *                                               {
             *                                                 "int": "0"
             *                                               },
             *                                               {
             *                                                 "string": "tzBTC"
             *                                               },
             *                                               {
             *                                                 "prim": "Some",
             *                                                 "args": [
             *                                                   {
             *                                                     "bytes": "019f8e6d69a501e050b36807de00fdc3f694dda39000"
             *                                                   }
             *                                                 ]
             *                                               },
             *                                               {
             *                                                 "int": "8"
             *                                               },
             *                                               {
             *                                                 "prim": "Some",
             *                                                 "args": [
             *                                                   {
             *                                                     "string": "FA1.2 token"
             *                                                   }
             *                                                 ]
             *                                               }
             *                                             ],
             *                                             {
             *                                               "int": "1"
             *                                             }
             *                                           ]
             *                                         },
             *                                         {
             *                                           "int": "0"
             *                                         },
             *                                         {
             *                                           "string": "EURL"
             *                                         },
             *                                         {
             *                                           "prim": "Some",
             *                                           "args": [
             *                                             {
             *                                               "bytes": "01dcb37511b08da5f8d794b690c7ad6a03206af75200"
             *                                             }
             *                                           ]
             *                                         },
             *                                         {
             *                                           "int": "6"
             *                                         },
             *                                         {
             *                                           "prim": "Some",
             *                                           "args": [
             *                                             {
             *                                               "string": "FA2 token"
             *                                             }
             *                                           ]
             *                                         }
             *                                       ],
             *                                       {
             *                                         "bytes": "01334d567a3617a22597eb783a65b04630e97c7fd600"
             *                                       },
             *                                       {
             *                                         "string": "BTC-EUR"
             *                                       },
             *                                       {
             *                                         "int": "6"
             *                                       },
             *                                       {
             *                                         "prim": "False"
             *                                       }
             *                                     ]
             *                                   ]
             *                                 },
             *                                 {
             *                                   "prim": "Elt",
             *                                   "args": [
             *                                     {
             *                                       "string": "tzBTC/USDT"
             *                                     },
             *                                     [
             *                                       [
             *                                         {
             *                                           "prim": "Pair",
             *                                           "args": [
             *                                             [
             *                                               {
             *                                                 "int": "0"
             *                                               },
             *                                               {
             *                                                 "string": "tzBTC"
             *                                               },
             *                                               {
             *                                                 "prim": "Some",
             *                                                 "args": [
             *                                                   {
             *                                                     "bytes": "019f8e6d69a501e050b36807de00fdc3f694dda39000"
             *                                                   }
             *                                                 ]
             *                                               },
             *                                               {
             *                                                 "int": "8"
             *                                               },
             *                                               {
             *                                                 "prim": "Some",
             *                                                 "args": [
             *                                                   {
             *                                                     "string": "FA1.2 token"
             *                                                   }
             *                                                 ]
             *                                               }
             *                                             ],
             *                                             {
             *                                               "int": "1"
             *                                             }
             *                                           ]
             *                                         },
             *                                         {
             *                                           "int": "0"
             *                                         },
             *                                         {
             *                                           "string": "USDT"
             *                                         },
             *                                         {
             *                                           "prim": "Some",
             *                                           "args": [
             *                                             {
             *                                               "bytes": "015dfb31bce51b9f71200fab36654d50cd877ef39500"
             *                                             }
             *                                           ]
             *                                         },
             *                                         {
             *                                           "int": "6"
             *                                         },
             *                                         {
             *                                           "prim": "Some",
             *                                           "args": [
             *                                             {
             *                                               "string": "FA2 token"
             *                                             }
             *                                           ]
             *                                         }
             *                                       ],
             *                                       {
             *                                         "bytes": "01334d567a3617a22597eb783a65b04630e97c7fd600"
             *                                       },
             *                                       {
             *                                         "string": "BTC-USDT"
             *                                       },
             *                                       {
             *                                         "int": "6"
             *                                       },
             *                                       {
             *                                         "prim": "False"
             *                                       }
             *                                     ]
             *                                   ]
             *                                 }
             *                               ]
             *                             ]
             *                           }
             *                         ]
             *                       },
             *                       [
             *                         {
             *                           "prim": "Elt",
             *                           "args": [
             *                             {
             *                               "string": "EURL"
             *                             },
             *                             [
             *                               {
             *                                 "int": "0"
             *                               },
             *                               {
             *                                 "string": "EURL"
             *                               },
             *                               {
             *                                 "prim": "Some",
             *                                 "args": [
             *                                   {
             *                                     "bytes": "01dcb37511b08da5f8d794b690c7ad6a03206af75200"
             *                                   }
             *                                 ]
             *                               },
             *                               {
             *                                 "int": "6"
             *                               },
             *                               {
             *                                 "prim": "Some",
             *                                 "args": [
             *                                   {
             *                                     "string": "FA2 token"
             *                                   }
             *                                 ]
             *                               }
             *                             ]
             *                           ]
             *                         },
             *                         {
             *                           "prim": "Elt",
             *                           "args": [
             *                             {
             *                               "string": "USDT"
             *                             },
             *                             [
             *                               {
             *                                 "int": "0"
             *                               },
             *                               {
             *                                 "string": "USDT"
             *                               },
             *                               {
             *                                 "prim": "Some",
             *                                 "args": [
             *                                   {
             *                                     "bytes": "015dfb31bce51b9f71200fab36654d50cd877ef39500"
             *                                   }
             *                                 ]
             *                               },
             *                               {
             *                                 "int": "6"
             *                               },
             *                               {
             *                                 "prim": "Some",
             *                                 "args": [
             *                                   {
             *                                     "string": "FA2 token"
             *                                   }
             *                                 ]
             *                               }
             *                             ]
             *                           ]
             *                         },
             *                         {
             *                           "prim": "Elt",
             *                           "args": [
             *                             {
             *                               "string": "tzBTC"
             *                             },
             *                             [
             *                               {
             *                                 "int": "0"
             *                               },
             *                               {
             *                                 "string": "tzBTC"
             *                               },
             *                               {
             *                                 "prim": "Some",
             *                                 "args": [
             *                                   {
             *                                     "bytes": "019f8e6d69a501e050b36807de00fdc3f694dda39000"
             *                                   }
             *                                 ]
             *                               },
             *                               {
             *                                 "int": "8"
             *                               },
             *                               {
             *                                 "prim": "Some",
             *                                 "args": [
             *                                   {
             *                                     "string": "FA1.2 token"
             *                                   }
             *                                 ]
             *                               }
             *                             ]
             *                           ]
             *                         }
             *                       ]
             *                     ]
             *                   }
             *                 ]
             *               },
             *               "balance_updates": [
             *                 {
             *                   "kind": "contract",
             *                   "contract": "tz3TMbNR6YcMmRvXpssLi7wNr7RrBKsgruYU",
             *                   "change": "-2500",
             *                   "origin": "block"
             *                 },
             *                 {
             *                   "kind": "burned",
             *                   "category": "storage fees",
             *                   "change": "2500",
             *                   "origin": "block"
             *                 }
             *               ],
             *               "consumed_milligas": "6668844",
             *               "storage_size": "1231820",
             *               "paid_storage_size_diff": "10",
             *               "lazy_storage_diff": [
             *                 {
             *                   "kind": "big_map",
             *                   "id": "288952",
             *                   "diff": {
             *                     "action": "update",
             *                     "updates": []
             *                   }
             *                 },
             *                 {
             *                   "kind": "big_map",
             *                   "id": "288951",
             *                   "diff": {
             *                     "action": "update",
             *                     "updates": [
             *                       {
             *                         "key_hash": "exprv54v2iFYQ5fHRM2GLzRgZKHpf3suvC9jyke2F3TcFwDxExPRjB",
             *                         "key": {
             *                           "string": "tzBTC/EURL"
             *                         },
             *                         "value": {
             *                           "prim": "Pair",
             *                           "args": [
             *                             [
             *                               {
             *                                 "prim": "Pair",
             *                                 "args": [
             *                                   [
             *                                     {
             *                                       "int": "0"
             *                                     },
             *                                     {
             *                                       "string": "tzBTC"
             *                                     },
             *                                     {
             *                                       "prim": "Some",
             *                                       "args": [
             *                                         {
             *                                           "bytes": "019f8e6d69a501e050b36807de00fdc3f694dda39000"
             *                                         }
             *                                       ]
             *                                     },
             *                                     {
             *                                       "int": "8"
             *                                     },
             *                                     {
             *                                       "prim": "Some",
             *                                       "args": [
             *                                         {
             *                                           "string": "FA1.2 token"
             *                                         }
             *                                       ]
             *                                     }
             *                                   ],
             *                                   {
             *                                     "int": "1"
             *                                   }
             *                                 ]
             *                               },
             *                               {
             *                                 "int": "0"
             *                               },
             *                               {
             *                                 "string": "EURL"
             *                               },
             *                               {
             *                                 "prim": "Some",
             *                                 "args": [
             *                                   {
             *                                     "bytes": "01dcb37511b08da5f8d794b690c7ad6a03206af75200"
             *                                   }
             *                                 ]
             *                               },
             *                               {
             *                                 "int": "6"
             *                               },
             *                               {
             *                                 "prim": "Some",
             *                                 "args": [
             *                                   {
             *                                     "string": "FA2 token"
             *                                   }
             *                                 ]
             *                               }
             *                             ],
             *                             {
             *                               "prim": "Pair",
             *                               "args": [
             *                                 {
             *                                   "prim": "Pair",
             *                                   "args": [
             *                                     {
             *                                       "int": "2664904905100"
             *                                     },
             *                                     {
             *                                       "int": "10000000000"
             *                                     }
             *                                   ]
             *                                 },
             *                                 {
             *                                   "int": "1683299700"
             *                                 }
             *                               ]
             *                             }
             *                           ]
             *                         }
             *                       }
             *                     ]
             *                   }
             *                 },
             *                 {
             *                   "kind": "big_map",
             *                   "id": "288950",
             *                   "diff": {
             *                     "action": "update",
             *                     "updates": []
             *                   }
             *                 },
             *                 {
             *                   "kind": "big_map",
             *                   "id": "288949",
             *                   "diff": {
             *                     "action": "update",
             *                     "updates": [
             *                       {
             *                         "key_hash": "exprtX5LinYF4NkttwZC7Y6eqfXT38Dxq1KBV1ctmQAfzsGb1G3nap",
             *                         "key": {
             *                           "int": "2078"
             *                         },
             *                         "value": [
             *                           {
             *                             "int": "2078"
             *                           },
             *                           {
             *                             "prim": "Left",
             *                             "args": [
             *                               {
             *                                 "prim": "Right",
             *                                 "args": [
             *                                   {
             *                                     "prim": "Pair",
             *                                     "args": [
             *                                       {
             *                                         "int": "1683299741"
             *                                       },
             *                                       {
             *                                         "int": "1683299141"
             *                                       }
             *                                     ]
             *                                   }
             *                                 ]
             *                               }
             *                             ]
             *                           },
             *                           [
             *                             {
             *                               "int": "0"
             *                             },
             *                             {
             *                               "int": "0"
             *                             },
             *                             {
             *                               "int": "0"
             *                             },
             *                             {
             *                               "int": "0"
             *                             },
             *                             {
             *                               "int": "0"
             *                             },
             *                             {
             *                               "int": "0"
             *                             },
             *                             {
             *                               "int": "0"
             *                             },
             *                             {
             *                               "int": "0"
             *                             }
             *                           ],
             *                           [
             *                             {
             *                               "int": "0"
             *                             },
             *                             {
             *                               "string": "tzBTC"
             *                             },
             *                             {
             *                               "prim": "Some",
             *                               "args": [
             *                                 {
             *                                   "bytes": "019f8e6d69a501e050b36807de00fdc3f694dda39000"
             *                                 }
             *                               ]
             *                             },
             *                             {
             *                               "int": "8"
             *                             },
             *                             {
             *                               "prim": "Some",
             *                               "args": [
             *                                 {
             *                                   "string": "FA1.2 token"
             *                                 }
             *                               ]
             *                             }
             *                           ],
             *                           {
             *                             "int": "0"
             *                           },
             *                           {
             *                             "string": "EURL"
             *                           },
             *                           {
             *                             "prim": "Some",
             *                             "args": [
             *                               {
             *                                 "bytes": "01dcb37511b08da5f8d794b690c7ad6a03206af75200"
             *                               }
             *                             ]
             *                           },
             *                           {
             *                             "int": "6"
             *                           },
             *                           {
             *                             "prim": "Some",
             *                             "args": [
             *                               {
             *                                 "string": "FA2 token"
             *                               }
             *                             ]
             *                           }
             *                         ]
             *                       }
             *                     ]
             *                   }
             *                 }
             *               ]
             *             }
             *           }
             *         }
             *       ],
             *       "signature": "sigaYuApxhkynr4VUasNY6GsSstUvVrcoS84VHtXv6V5e5Fmoqg17oEEsf5Vpahjrx1EFuPhnm4BnPwrxVyXrqh71uhG5Tf7"
             *     }
             */
            receipt?: Record<string, never>;
        };
        SOLStake: {
            /**
             * @description Delegated stake account
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            stake_account: string;
            /**
             * @description Vote account to which this stake was re-delegated.
             * @example 6hNweZvzTudTuprZrAXb1A9grKvVG6xgjyvdJUqAMk78
             */
            vote_account: string;
            /**
             * @description Withdraw pubkey
             * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
             */
            withdraw_pubkey: string;
            /**
             * @description Stake state
             * @example active
             * @enum {string}
             */
            state: "active" | "inactive" | "activating" | "deactivating" | "withdrawn";
            /**
             * Format: date-time
             * @description Date at which this stake was activated
             * @example 2023-01-14T01:13:59Z
             */
            activated_at: string;
            /**
             * @description Epoch at which this stake was activated
             * @example 150
             */
            activated_epoch: number;
            /**
             * Format: date-time
             * @description Date at which this stake was deactivated
             * @example 2023-01-14T01:13:59Z
             */
            deactivated_at?: string;
            /**
             * @description Epoch at which this stake was deactivated
             * @example 150
             */
            deactivated_epoch?: number;
            /**
             * @description Current balance in Lamport
             * @example 1000000000
             */
            balance: string;
            /**
             * @description Sum of rewards rewards in Lamport earned by this stake
             * @example 1000000000
             */
            rewards: string;
            /**
             * @description Net annual percentage yield
             * @example 3.407
             */
            net_apy: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        SOLRewardByDay: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in Lamport during the day
             * @example 1000
             */
            rewards: string;
            /**
             * @description Sum of Jito's MEV rewards in Lamport earned by this stake.
             * @example 100000000
             */
            gross_mev_rewards: string;
            /**
             * @description Commission amount in Lamport for MEV rewards
             * @example 10000000
             */
            mev_commission: string;
            /**
             * @description Active balance in Lamport after rewards computing
             * @example 1000
             */
            active_balance: string;
            /**
             * @description Net annual percentage yield
             * @example 3.407
             */
            net_apy: number;
            /**
             * @description Gross annual percentage yield from MEV rewards
             * @example 2.603
             */
            mev_gross_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            active_balance_usd?: number;
        };
        SOLRewardByEpoch: {
            /**
             * @description Epoch for this reward entry
             * @example 120
             */
            epoch: number;
            /**
             * Format: date-time
             * @description Epoch timestamp for this reward entry
             * @example 2023-01-14T01:13:59Z
             */
            epoch_ts: string;
            /**
             * @description Accumulated rewards in Lamport during the day
             * @example 1000
             */
            rewards: string;
            /**
             * @description Sum of Jito's MEV rewards in Lamport earned by this stake.
             * @example 100000000
             */
            gross_mev_rewards: string;
            /**
             * @description Commission amount in Lamport for MEV rewards
             * @example 10000000
             */
            mev_commission: string;
            /**
             * @description Active balance in Lamport after rewards computing
             * @example 1000
             */
            active_balance: string;
            /**
             * @description Net annual percentage yield
             * @example 3.407
             */
            net_apy: number;
            /**
             * @description Gross annual percentage yield from MEV rewards
             * @example 2.603
             */
            mev_gross_apy: number;
        };
        SOLOperationCreateAccountWithSeed: {
            /**
             * @description Operation type
             * @example create_account_with_seed
             */
            type?: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time?: string;
            /**
             * @description Transaction hash
             * @example 2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie
             */
            tx_hash?: string;
            /**
             * @description Fee charged to the associated transaction in Lamport
             * @example 1000
             */
            tx_fee?: string;
            /**
             * @description Memo associated with the transaction
             * @example kiln_memo
             */
            tx_memo?: string | null;
            /**
             * @description Block number of the operation
             * @example 1000
             */
            block?: number;
            /**
             * @description Created stake account
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            stake_account?: string;
            /**
             * @description Amount delegated to the new stake account in Lamport
             * @example 1000
             */
            amount?: string;
            /**
             * @description Stake authority
             * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
             */
            stake_authority?: string;
        };
        SOLOperationCreateAccount: {
            /**
             * @description Operation type
             * @example create_account
             */
            type?: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time?: string;
            /**
             * @description Transaction hash
             * @example 8nPu2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie8b7ty2Ni99QoSpZudCBoWXk6d
             */
            tx_hash?: string;
            /**
             * @description Fee charged to the associated transaction in Lamport
             * @example 1000
             */
            tx_fee?: string;
            /**
             * @description Memo associated with the transaction
             * @example kiln_memo
             */
            tx_memo?: string | null;
            /**
             * @description Block number of the operation
             * @example 1000
             */
            block?: number;
            /**
             * @description Created stake account
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            stake_account?: string;
            /**
             * @description Amount delegated to the new stake account in Lamport
             * @example 1000
             */
            amount?: string;
            /**
             * @description Stake authority
             * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
             */
            stake_authority?: string;
        };
        SOLOperationDelegate: {
            /**
             * @description Operation type
             * @example delegate
             */
            type?: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time?: string;
            /**
             * @description Transaction hash
             * @example 2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie
             */
            tx_hash?: string;
            /**
             * @description Fee charged to the associated transaction in Lamport
             * @example 1000
             */
            tx_fee?: string;
            /**
             * @description Memo associated with the transaction
             * @example kiln_memo
             */
            tx_memo?: string | null;
            /**
             * @description Block number of the operation
             * @example 1000
             */
            block?: number;
            /**
             * @description Delegated stake account
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            stake_account?: string;
            /**
             * @description Vote account to which this stake was re-delegated.
             * @example 6hNweZvzTudTuprZrAXb1A9grKvVG6xgjyvdJUqAMk78
             */
            vote_account?: string;
            /**
             * @description Stake authority
             * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
             */
            stake_authority?: string;
        };
        SOLOperationDeactivate: {
            /**
             * @description Operation type
             * @example deactivate
             */
            type?: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time?: string;
            /**
             * @description Transaction hash
             * @example 2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie
             */
            tx_hash?: string;
            /**
             * @description Fee charged to the associated transaction in Lamport
             * @example 1000
             */
            tx_fee?: string;
            /**
             * @description Memo associated with the transaction
             * @example kiln_memo
             */
            tx_memo?: string | null;
            /**
             * @description Block number of the operation
             * @example 1000
             */
            block?: number;
            /**
             * @description Deactivated stake account
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            stake_account?: string;
            /**
             * @description Stake authority
             * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
             */
            stake_authority?: string;
        };
        SOLOperationRedelegate: {
            /**
             * @description Operation type
             * @example redelegate
             */
            type?: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time?: string;
            /**
             * @description Transaction hash
             * @example 8nPu8b7ty2Ni99QoSpZudCBoWXk6d
             */
            tx_hash?: string;
            /**
             * @description Fee charged to the associated transaction in Lamport
             * @example 1000
             */
            tx_fee?: string;
            /**
             * @description Memo associated with the transaction
             * @example kiln_memo
             */
            tx_memo?: string | null;
            /**
             * @description Block number of the operation
             * @example 1000
             */
            block?: number;
            /**
             * @description Source of the re-delegation
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            stake_account?: string;
            /**
             * @description Destination of the re-delegation
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            new_stake_account?: string;
            /**
             * @description Vote account to which this stake was re-delegated.
             * @example 6hNweZvzTudTuprZrAXb1A9grKvVG6xgjyvdJUqAMk78
             */
            vote_account?: string;
            /**
             * @description Stake authority
             * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
             */
            stake_authority?: string;
        };
        SOLOperationSplit: {
            /**
             * @description Operation type
             * @example split
             */
            type?: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time?: string;
            /**
             * @description Transaction hash
             * @example 2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie
             */
            tx_hash?: string;
            /**
             * @description Fee charged to the associated transaction in Lamport
             * @example 1000
             */
            tx_fee?: string;
            /**
             * @description Memo associated with the transaction
             * @example kiln_memo
             */
            tx_memo?: string | null;
            /**
             * @description Block number of the operation
             * @example 1000
             */
            block?: number;
            /**
             * @description Stake account split
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            stake_account?: string | null;
            /**
             * @description New stake account which received the split-off amount.
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            new_stake_account?: string;
            /**
             * @description Amount of SOL in Lamport
             * @example 1000000000
             */
            amount?: string;
            /**
             * @description Stake authority
             * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
             */
            stake_authority?: string;
        };
        SOLOperationWithdraw: {
            /**
             * @description Operation type
             * @example withdraw
             */
            type?: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time?: string;
            /**
             * @description Transaction hash
             * @example 2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie
             */
            tx_hash?: string;
            /**
             * @description Fee charged to the associated transaction in Lamport
             * @example 1000
             */
            tx_fee?: string;
            /**
             * @description Memo associated with the transaction
             * @example kiln_memo
             */
            tx_memo?: string | null;
            /**
             * @description Block number of the operation
             * @example 1000
             */
            block?: number;
            /**
             * @description Source stake account for the merge and drained.
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            stake_account?: string;
            /**
             * @description Recipient account
             * @example 4qdoP4oJgKjVtHTE9t9kV1jKdF41uHQ5Q5e1G5VjRLCk
             */
            destination_account?: string;
            /**
             * @description Portion of the stake account balance withdrawn
             * @example 1000000000
             */
            amount?: string;
            /**
             * @description Withdraw authority
             * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
             */
            stake_authority?: string;
        };
        SOLOperationMerge: {
            /**
             * @description Operation type
             * @example merge
             */
            type?: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-01-14T01:13:59Z
             */
            time?: string;
            /**
             * @description Transaction hash
             * @example 8nPu8b7ty2Ni99QoSpZudCBoWXk6d
             */
            tx_hash?: string;
            /**
             * @description Fee charged to the associated transaction in Lamport
             * @example 1000
             */
            tx_fee?: string;
            /**
             * @description Memo associated with the transaction
             * @example kiln_memo
             */
            tx_memo?: string | null;
            /**
             * @description Block number of the operation
             * @example 1000
             */
            block?: number;
            /**
             * @description Destination stake account for the merge
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            stake_account?: string;
            /**
             * @description Source stake account for the merge and drained.
             * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
             */
            source_stake_account?: string;
            /**
             * @description Transaction signer
             * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
             */
            stake_authority?: string;
        };
        SOLNetworkStats: {
            /**
             * @description SOL price in USD
             * @example 3.5
             */
            sol_price_usd: number;
            /**
             * @description Number of active validators
             * @example 402
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Solana currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description SOL inflation rate
             * @example 8.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        SOLPostStakesPayload: {
            stakes: {
                /**
                 * @description Stake account to be delegated
                 * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
                 */
                stakeAccount?: string | null;
                /**
                 * @description Balance to delegate in SOL
                 * @example 1000000
                 */
                balance?: number;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        SOLStakeTxPayload: {
            /**
             * @description Kiln Account ID
             * @example d3f1b917-72b1-4982-a4dd-93fce579a708
             */
            account_id: string;
            /**
             * @description Wallet address
             * @example 4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9
             */
            wallet: string;
            /**
             * @description Amount in lamports (minimum value must be 10000001)
             * @example 1000000000000000
             */
            amount_lamports: string;
            /**
             * @description Vote account address
             * @example 5pPRHniefFjkiaArbGX3Y8NUysJmQ9tMZg3FrFGwHzSm
             */
            vote_account_address: string;
            /**
             * @description Custom message to send as a memo in the transaction
             * @example custom message
             */
            memo?: string;
        };
        SOLStakeTx: {
            /**
             * @description Hex encoded transaction data that need to be covered by signatures
             * @example 0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
             */
            unsigned_tx_hash: string;
            /**
             * @description Hex encoded full transaction
             * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
             */
            unsigned_tx_serialized: string;
            /**
             * @description Transaction message containing transaction instructions. Object shape can be found [here](https://github.com/solana-labs/solana-web3.js/blob/master/packages/library-legacy/src/message/legacy.ts#L59)
             * @example {
             *       "header": {
             *         "numRequiredSignatures": 3,
             *         "numReadonlySignedAccounts": 1,
             *         "numReadonlyUnsignedAccounts": 8
             *       },
             *       "accountKeys": [
             *         "4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9",
             *         "2sAwSXUrNW9PfaX6joGy62QAfmhHGnxpM7CYGNF7qdPX",
             *         "6WwYZH8zdqF7kELtRfo1yAnvD1wvXwTg4m1jBhUCqC68",
             *         "HoAGnvTdp4Qgrq3NWtNQFS6FixasBhLqui23Seq7riSw",
             *         "11111111111111111111111111111111",
             *         "5pPRHniefFjkiaArbGX3Y8NUysJmQ9tMZg3FrFGwHzSm",
             *         "Stake11111111111111111111111111111111111111",
             *         "StakeConfig11111111111111111111111111111111",
             *         "SysvarC1ock11111111111111111111111111111111",
             *         "SysvarRecentB1ockHashes11111111111111111111",
             *         "SysvarRent111111111111111111111111111111111",
             *         "SysvarStakeHistory1111111111111111111111111"
             *       ],
             *       "recentBlockhash": "HCAcHiKdfbnfZk6rgnrWxeCBxavYxcWWo7JLsQqwDquU",
             *       "instructions": [
             *         {
             *           "programIdIndex": 4,
             *           "accounts": [
             *             3,
             *             9,
             *             2
             *           ],
             *           "data": "6vx8P"
             *         },
             *         {
             *           "programIdIndex": 4,
             *           "accounts": [
             *             0,
             *             1
             *           ],
             *           "data": "11111255HrbrzNKE34jJbWojuhKCCFF5BqruMbtEe7CY3fPCMjUHYn7uEDqFavZELT1boD"
             *         },
             *         {
             *           "programIdIndex": 6,
             *           "accounts": [
             *             1,
             *             10
             *           ],
             *           "data": "1111BNVhr29wy4CUDfmP3ysWa9GUZMwYaMaAp9JVWCAzhqZ78HhuLB7fgzVCHGpmMQg4sJMrzXVvT3BxhUBDvroCMCJ5sKhVwNWL2phXwqXEH6mKiVgsJwPG3iKFVxiQoPLBXFx7Vv9USNmuAMcTWz6tvYb2w"
             *         },
             *         {
             *           "programIdIndex": 6,
             *           "accounts": [
             *             1,
             *             5,
             *             8,
             *             11,
             *             7,
             *             0
             *           ],
             *           "data": "3xyZh"
             *         }
             *       ],
             *       "indexToProgramIds": {}
             *     }
             */
            unsigned_tx: Record<string, never>;
        };
        SOLDeactivateStakeTxPayload: {
            /**
             * @description Stake account address
             * @example 3M7sFDMdUxfNNSmKk2ZmDKgKJFzuLvxpuXKDTLRGXpcK
             */
            stake_account: string;
            /**
             * @description Wallet address
             * @example 4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9
             */
            wallet: string;
        };
        SOLWithdrawStakeTxPayload: {
            /**
             * @description Stake account address
             * @example 3M7sFDMdUxfNNSmKk2ZmDKgKJFzuLvxpuXKDTLRGXpcK
             */
            stake_account: string;
            /**
             * @description Wallet address
             * @example 4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9
             */
            wallet: string;
            /**
             * @description Amount in lamports
             * @example 1000000000000000
             */
            amount_lamports?: string;
        };
        SOLMergeStakesTxPayload: {
            /**
             * @description Stake account address
             * @example HQQkoFXHz1XemQHFhC3mN1CGdfH8Pokw2DfFUmwZCRWb
             */
            stake_account_source: string;
            /**
             * @description Stake account address
             * @example GyPnKF88P8c3jESicELWLrxAmeF9PoaKzqYGREDuEAMx
             */
            stake_account_destination: string;
            /**
             * @description Wallet address
             * @example 4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9
             */
            wallet: string;
        };
        SOLSplitStakeTxPayload: {
            /**
             * @description Kiln Account ID
             * @example d3f1b917-72b1-4982-a4dd-93fce579a708
             */
            account_id: string;
            /**
             * @description Stake account address
             * @example GyPnKF88P8c3jESicELWLrxAmeF9PoaKzqYGREDuEAMx
             */
            stake_account: string;
            /**
             * @description Wallet address
             * @example 4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9
             */
            wallet: string;
            /**
             * @description Amount in lamports
             * @example 200000000
             */
            amount_lamports: string;
        };
        SOLPrepareTxPayload: {
            /**
             * @description Hex encoded unsigned transaction
             * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005812228c3ecf882e4ea4a608f7cbaa9c1557cefbdad3f781d0b6b562351eaef2a00c04273d6f9adc395d4ce59ed5e4b041221ff6892584943f8dd20b2a3d06ab2e486351d862d49c29a86b53cdc225e5ad717c7511a3fdc7a580a56406276191f1036a9efb951a61ca3922e9d7b59c74383b9c0028dc0e7a0270b71e1226070301080c3b9feaffd8e2dd3a59e1bbfe2b2de5090238b622f638cdf8066ebf946f1cd1652f35f8c8d7a43a970660e177489a647dba6caf2006a788657432e8d8e7107a7451f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c0000000000000000000000000000000000000000000000000000000000000000bb92012657eb9b0bbd98e0109c08a1a16514df3f22df949d5d1b9e2f04aaeb6e06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000b6fa88c0c34a62da18b6287ecbb3a406c9182922f331a5f75b801d7acff8fa8c0404030309020404000000040200013400000000002d310100000000c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a74000000003b9feaffd8e2dd3a59e1bbfe2b2de5090238b622f638cdf8066ebf946f1cd1653b9feaffd8e2dd3a59e1bbfe2b2de5090238b622f638cdf8066ebf946f1cd16500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
             */
            unsigned_tx_serialized: string;
            /** @description Hex encoded signatures */
            signatures: string[];
        };
        SOLPreparedTx: {
            /**
             * @description Hex encoded signed transaction
             * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
             */
            signed_tx_serialized: string;
        };
        SOLBroadcastTxPayload: {
            /**
             * @description Hex encoded signed transaction
             * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
             */
            tx_serialized: string;
        };
        SOLBroadcastTx: {
            /**
             * @description Hash of the transaction
             * @example sV6dgQyxByL66t9uTPmffitncWNmnkR8oEC1gQ29jPrKFHm9TkMGvS3TgcQeNz9pSN7913aPXe6MMHFS4xqTafL
             */
            tx_hash: string;
        };
        SOLNonceAccount: {
            /**
             * @description Nonce account address
             * @example 3M7sFDMdUxfNNSmKk2ZmDKgKJFzuLvxpuXKDTLRGXpcK
             */
            nonce_account: string;
            /**
             * @description Nonce account authority address
             * @example 6WwYZH8zdqF7kELtRfo1yAnvD1wvXwTg4m1jBhUCqC68
             */
            nonce_account_authority: string;
        };
        SOLTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Object shape can be found [here](https://github.com/solana-labs/solana-web3.js/blob/dfc6d588b4b7c880d74dc727399ee8a84979b480/packages/library-legacy/src/connection.ts#L1071)
             * @example {
             *       "blockTime": 1676916194,
             *       "meta": {
             *         "computeUnitsConsumed": 0,
             *         "err": null,
             *         "fee": 15000,
             *         "innerInstructions": [],
             *         "loadedAddresses": {
             *           "readonly": [],
             *           "writable": []
             *         },
             *         "logMessages": [
             *           "Program 11111111111111111111111111111111 invoke [1]",
             *           "Program 11111111111111111111111111111111 success",
             *           "Program 11111111111111111111111111111111 invoke [1]",
             *           "Program 11111111111111111111111111111111 success",
             *           "Program Stake11111111111111111111111111111111111111 invoke [1]",
             *           "Program Stake11111111111111111111111111111111111111 success",
             *           "Program Stake11111111111111111111111111111111111111 invoke [1]",
             *           "Program Stake11111111111111111111111111111111111111 success"
             *         ],
             *         "postBalances": [
             *           1587335720,
             *           200000000,
             *           1979975000,
             *           10000000,
             *           1,
             *           7292994607,
             *           1,
             *           960480,
             *           1169280,
             *           42706560,
             *           1009200,
             *           114979200
             *         ],
             *         "postTokenBalances": [],
             *         "preBalances": [
             *           1787350720,
             *           0,
             *           1979975000,
             *           10000000,
             *           1,
             *           7292994607,
             *           1,
             *           960480,
             *           1169280,
             *           42706560,
             *           1009200,
             *           114979200
             *         ],
             *         "preTokenBalances": [],
             *         "rewards": [],
             *         "status": {
             *           "Ok": null
             *         }
             *       },
             *       "slot": 197065694,
             *       "transaction": {
             *         "message": {
             *           "header": {
             *             "numReadonlySignedAccounts": 1,
             *             "numReadonlyUnsignedAccounts": 8,
             *             "numRequiredSignatures": 3
             *           },
             *           "accountKeys": [
             *             "4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9",
             *             "8qcpEjkWRi7LuZL4oQARDNTMVUwLQyakuno2syEMLsBi",
             *             "6WwYZH8zdqF7kELtRfo1yAnvD1wvXwTg4m1jBhUCqC68",
             *             "HoAGnvTdp4Qgrq3NWtNQFS6FixasBhLqui23Seq7riSw",
             *             "11111111111111111111111111111111",
             *             "FwR3PbjS5iyqzLiLugrBqKSa5EKZ4vK9SKs7eQXtT59f",
             *             "Stake11111111111111111111111111111111111111",
             *             "StakeConfig11111111111111111111111111111111",
             *             "SysvarC1ock11111111111111111111111111111111",
             *             "SysvarRecentB1ockHashes11111111111111111111",
             *             "SysvarRent111111111111111111111111111111111",
             *             "SysvarStakeHistory1111111111111111111111111"
             *           ],
             *           "recentBlockhash": "4emvYWMe99WbtKFHmtv5gEUYi9HfVnmQyf5Y7ccCEpWR",
             *           "instructions": [
             *             {
             *               "accounts": [
             *                 3,
             *                 9,
             *                 2
             *               ],
             *               "data": "6vx8P",
             *               "programIdIndex": 4
             *             },
             *             {
             *               "accounts": [
             *                 0,
             *                 1
             *               ],
             *               "data": "111112cxUqMWZDxCrGjkHwTWjy7bQNEqgy3xB2LZ8vt9NjVisJzdYK3W8eRceiR2k9CjMy",
             *               "programIdIndex": 4
             *             },
             *             {
             *               "accounts": [
             *                 1,
             *                 10
             *               ],
             *               "data": "1111BNVhr29wy4CUDfmP3ysWa9GUZMwYaMaAp9JVWCAzhqZ78HhuLB7fgzVCHGpmMQg4sJMrzXVvT3BxhUBDvroCMCJ5sKhVwNWL2phXwqXEH6mKiVgsJwPG3iKFVxiQoPLBXFx7Vv9USNmuAMcTWz6tvYb2w",
             *               "programIdIndex": 6
             *             },
             *             {
             *               "accounts": [
             *                 1,
             *                 5,
             *                 8,
             *                 11,
             *                 7,
             *                 0
             *               ],
             *               "data": "3xyZh",
             *               "programIdIndex": 6
             *             }
             *           ],
             *           "indexToProgramIds": {}
             *         },
             *         "signatures": [
             *           "569uGMNQR4vVeukdSTmLtrzs5ZSiAFTk3tPTBavJjZ1H7b3be2EB8ZjRcfhTA6gBApien2tbJgKYayDVtRKFRfUu",
             *           "3hSgNRnKero2XogfU6Dk3jDXrEMmknNaoPbW4dJ6BHCkDUV5J5rr5iRRdaAtoVLvat7QMox7qpanMu6fqUAUvs3w",
             *           "5djumEdbCJEAPxJk2r9FybpDLnSy4uazGbgP3EmtQrMQMW4edQrhb1nYK3aJtgf5svMtSXSgKoFho4tUxVAbZSUn"
             *         ]
             *       }
             *     }
             */
            receipt?: Record<string, never>;
        };
        ATOMStake: {
            /**
             * @description Public key of the validator
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator_address: string;
            /**
             * @description Public key of the delegator
             * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * Format: date-time
             * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 2023-06-16T03:13:23.058547Z
             */
            delegated_at?: string;
            /**
             * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 15739267
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of undelegation for the stake
             * @example 2023-07-14T03:56:13.561156Z
             */
            undelegated_at?: string;
            /**
             * @description Block of undelegation for the stake
             * @example 16126416
             */
            undelegated_block?: number;
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation in uATOM. Includes currently available rewards not yet withdrawn.
             * @example 735573808534727891000000
             */
            rewards: string;
            /**
             * @description Available rewards in uATOM that can be withdrawn from this stake
             * @example 36748808534727891000000
             */
            available_rewards: string;
            /**
             * @description Staked balance on this stake in uATOM
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 5.76
             */
            net_apy: number;
            /**
             * @description State of the ATOM stake
             * @example active
             * @enum {string}
             */
            state: "active" | "deactivating" | "inactive";
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /** @description permissions related to the stake currently active, ignored if there is no ongoing grants */
            permissions: {
                /**
                 * @description whether the stake is recipient (grantee) or the giver (granter) of the permissions
                 * @example granter
                 */
                source: string;
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
                 * @example Staking.MsgDelegate
                 */
                permission: string;
                /**
                 * Format: date-time
                 * @description Exact time at which the permissions will be revoked
                 * @example 2023-01-10T01:12:34Z
                 */
                expires_at?: string | null;
                /**
                 * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "cosmosvaloper1xyz",
                 *       "cosmosvaloper1abc"
                 *     ]
                 */
                allow_list?: string[] | null;
                /**
                 * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "cosmosvaloper1xyz",
                 *       "cosmosvaloper1abc"
                 *     ]
                 */
                deny_list?: string[] | null;
            }[];
            /** @description unbondings currently active on the stakes. ignored if no unbondings are returned */
            unbondings: {
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * Format: date-time
                 * @description Exact time at which the unbonding will take effect
                 * @example 2023-01-10T01:12:34Z
                 */
                completion_time: string;
                /**
                 * @description Amount currently associated with the unbonding (slashes included)
                 * @example 129300
                 */
                balance: string;
                /**
                 * @description Amount expected at creation (slashes non-included)
                 * @example 150300
                 */
                initial_balance: string;
            }[];
        };
        PostATOMStakesPayload: {
            stakes: {
                /**
                 * @description Stake id {validator_address}_{delegator_address}
                 * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2_cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl}
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        ATOMStakeMessage: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.MsgDelegate
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "delegatorAddress": "cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl",
             *       "validatorAddress": "cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2",
             *       "amount": {
             *         "denom": "uatom",
             *         "amount": "1000000"
             *       }
             *     }
             */
            value?: Record<string, never>;
        };
        ATOMStakeMessageRestake: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.StakeAuthorization
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "allowList": {
             *         "address": [
             *           "cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2"
             *         ]
             *       },
             *       "AuthorizationType": 1
             *     }
             */
            value?: Record<string, never>;
        };
        ATOMStakeUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "uatom",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description List of messages included in the transaction. The list contains one message for the staking delegation and one more message for rewards restaking in case specified as a parameter (`restake_rewards=true`).
             * @example [
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *         "value": {
             *           "delegatorAddress": "cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl",
             *           "validatorAddress": "cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2",
             *           "amount": {
             *             "denom": "uatom",
             *             "amount": "1000000"
             *           }
             *         }
             *       },
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.StakeAuthorization",
             *         "allowList": {
             *           "address": [
             *             "cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2"
             *           ]
             *         },
             *         "AuthorizationType": 1
             *       }
             *     ]
             */
            messages: (components["schemas"]["ATOMStakeMessage"] | components["schemas"]["ATOMStakeMessageRestake"])[];
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        ATOMUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Message included in the transaction
             * @example {
             *       "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *       "value": {
             *         "delegatorAddress": "cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl",
             *         "validatorAddress": "cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2",
             *         "amount": {
             *           "denom": "uatom",
             *           "amount": "1000000"
             *         }
             *       }
             *     }
             */
            message: Record<string, never>;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "uatom",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        ATOMSignedTx: {
            /**
             * @description Serialized signed transaction in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signed_tx_serialized: string;
        };
        ATOMTxHash: {
            /**
             * @description Hash of the transaction
             * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
             */
            tx_hash: string;
        };
        ATOMPrepareTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Transaction signature serialized in hex
             * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signature: string;
        };
        ATOMBroadcastTxPayload: {
            /**
             * @description Signed transaction serialized in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            tx_serialized: string;
        };
        ATOMTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
             * @example {
             *       "height": 16007296,
             *       "txIndex": 0,
             *       "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
             *       "code": 0,
             *       "events": [
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000uatom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "cosmos17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000uatom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "cosmos17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000uatom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "fee",
             *               "value": "5000uatom"
             *             },
             *             {
             *               "key": "fee_payer",
             *               "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "acc_seq",
             *               "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "signature",
             *               "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "action",
             *               "value": "/cosmos.staking.v1beta1.MsgDelegate"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5uatom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5uatom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5uatom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "withdraw_rewards",
             *           "attributes": [
             *             {
             *               "key": "amount",
             *               "value": "5uatom"
             *             },
             *             {
             *               "key": "validator",
             *               "value": "cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000uatom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "cosmos1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000uatom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "delegate",
             *           "attributes": [
             *             {
             *               "key": "validator",
             *               "value": "cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000uatom"
             *             },
             *             {
             *               "key": "new_shares",
             *               "value": "100000.000000000000000000"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "module",
             *               "value": "staking"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         }
             *       ],
             *       "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5uatom\"},{\"key\":\"receiver\",\"value\":\"cosmos1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000uatom\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5uatom\"},{\"key\":\"spender\",\"value\":\"cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000uatom\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2\"},{\"key\":\"amount\",\"value\":\"100000uatom\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5uatom\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5uatom\"},{\"key\":\"validator\",\"value\":\"cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2\"}]}]}]",
             *       "tx": {
             *         "0": 10,
             *         "1": 160,
             *         "2": 1,
             *         "3": 10,
             *         "4": 157,
             *         "5": 1,
             *         "6": 10,
             *         "7": 35,
             *         "8": 47,
             *         "9": 99,
             *         "10": 111,
             *         "11": 115,
             *         "12": 109,
             *         "13": 111,
             *         "14": 115,
             *         "15": 46,
             *         "16": 115,
             *         "17": 116,
             *         "18": 97,
             *         "19": 107,
             *         "20": 105,
             *         "21": 110,
             *         "22": 103,
             *         "23": 46,
             *         "24": 118,
             *         "25": 49,
             *         "26": 98,
             *         "27": 101,
             *         "28": 116,
             *         "29": 97,
             *         "30": 49,
             *         "31": 46,
             *         "32": 77,
             *         "33": 115,
             *         "34": 103,
             *         "35": 68,
             *         "36": 101,
             *         "37": 108,
             *         "38": 101,
             *         "39": 103,
             *         "40": 97,
             *         "41": 116,
             *         "42": 101,
             *         "43": 18,
             *         "44": 118,
             *         "45": 10,
             *         "46": 45,
             *         "47": 99,
             *         "48": 111,
             *         "49": 115,
             *         "50": 109,
             *         "51": 111,
             *         "52": 115,
             *         "53": 49,
             *         "54": 57,
             *         "55": 99,
             *         "56": 57,
             *         "57": 102,
             *         "58": 100,
             *         "59": 104,
             *         "60": 52,
             *         "61": 56,
             *         "62": 56,
             *         "63": 118,
             *         "64": 113,
             *         "65": 106,
             *         "66": 99,
             *         "67": 108,
             *         "68": 108,
             *         "69": 116,
             *         "70": 119,
             *         "71": 112,
             *         "72": 54,
             *         "73": 56,
             *         "74": 106,
             *         "75": 109,
             *         "76": 53,
             *         "77": 48,
             *         "78": 121,
             *         "79": 100,
             *         "80": 119,
             *         "81": 121,
             *         "82": 104,
             *         "83": 51,
             *         "84": 54,
             *         "85": 106,
             *         "86": 113,
             *         "87": 101,
             *         "88": 97,
             *         "89": 116,
             *         "90": 101,
             *         "91": 118,
             *         "92": 18,
             *         "93": 52,
             *         "94": 99,
             *         "95": 111,
             *         "96": 115,
             *         "97": 109,
             *         "98": 111,
             *         "99": 115,
             *         "100": 118,
             *         "101": 97,
             *         "102": 108,
             *         "103": 111,
             *         "104": 112,
             *         "105": 101,
             *         "106": 114,
             *         "107": 49,
             *         "108": 54,
             *         "109": 121,
             *         "110": 115,
             *         "111": 48,
             *         "112": 101,
             *         "113": 103,
             *         "114": 57,
             *         "115": 51,
             *         "116": 53,
             *         "117": 109,
             *         "118": 107,
             *         "119": 113,
             *         "120": 112,
             *         "121": 107,
             *         "122": 121,
             *         "123": 100,
             *         "124": 107,
             *         "125": 103,
             *         "126": 102,
             *         "127": 99,
             *         "128": 106,
             *         "129": 57,
             *         "130": 97,
             *         "131": 103,
             *         "132": 101,
             *         "133": 50,
             *         "134": 97,
             *         "135": 117,
             *         "136": 56,
             *         "137": 108,
             *         "138": 57,
             *         "139": 54,
             *         "140": 110,
             *         "141": 97,
             *         "142": 101,
             *         "143": 114,
             *         "144": 101,
             *         "145": 57,
             *         "146": 26,
             *         "147": 15,
             *         "148": 10,
             *         "149": 5,
             *         "150": 117,
             *         "151": 97,
             *         "152": 116,
             *         "153": 111,
             *         "154": 109,
             *         "155": 18,
             *         "156": 6,
             *         "157": 49,
             *         "158": 48,
             *         "159": 48,
             *         "160": 48,
             *         "161": 48,
             *         "162": 48,
             *         "163": 18,
             *         "164": 103,
             *         "165": 10,
             *         "166": 80,
             *         "167": 10,
             *         "168": 70,
             *         "169": 10,
             *         "170": 31,
             *         "171": 47,
             *         "172": 99,
             *         "173": 111,
             *         "174": 115,
             *         "175": 109,
             *         "176": 111,
             *         "177": 115,
             *         "178": 46,
             *         "179": 99,
             *         "180": 114,
             *         "181": 121,
             *         "182": 112,
             *         "183": 116,
             *         "184": 111,
             *         "185": 46,
             *         "186": 115,
             *         "187": 101,
             *         "188": 99,
             *         "189": 112,
             *         "190": 50,
             *         "191": 53,
             *         "192": 54,
             *         "193": 107,
             *         "194": 49,
             *         "195": 46,
             *         "196": 80,
             *         "197": 117,
             *         "198": 98,
             *         "199": 75,
             *         "200": 101,
             *         "201": 121,
             *         "202": 18,
             *         "203": 35,
             *         "204": 10,
             *         "205": 33,
             *         "206": 3,
             *         "207": 156,
             *         "208": 228,
             *         "209": 123,
             *         "210": 42,
             *         "211": 129,
             *         "212": 61,
             *         "213": 19,
             *         "214": 135,
             *         "215": 97,
             *         "216": 49,
             *         "217": 169,
             *         "218": 195,
             *         "219": 190,
             *         "220": 119,
             *         "221": 232,
             *         "222": 196,
             *         "223": 175,
             *         "224": 164,
             *         "225": 158,
             *         "226": 148,
             *         "227": 135,
             *         "228": 68,
             *         "229": 171,
             *         "230": 190,
             *         "231": 225,
             *         "232": 31,
             *         "233": 147,
             *         "234": 158,
             *         "235": 42,
             *         "236": 66,
             *         "237": 15,
             *         "238": 70,
             *         "239": 18,
             *         "240": 4,
             *         "241": 10,
             *         "242": 2,
             *         "243": 8,
             *         "244": 1,
             *         "245": 24,
             *         "246": 33,
             *         "247": 18,
             *         "248": 19,
             *         "249": 10,
             *         "250": 13,
             *         "251": 10,
             *         "252": 5,
             *         "253": 117,
             *         "254": 97,
             *         "255": 116,
             *         "256": 111,
             *         "257": 109,
             *         "258": 18,
             *         "259": 4,
             *         "260": 53,
             *         "261": 48,
             *         "262": 48,
             *         "263": 48,
             *         "264": 16,
             *         "265": 224,
             *         "266": 167,
             *         "267": 18,
             *         "268": 26,
             *         "269": 64,
             *         "270": 25,
             *         "271": 31,
             *         "272": 135,
             *         "273": 165,
             *         "274": 77,
             *         "275": 206,
             *         "276": 175,
             *         "277": 182,
             *         "278": 171,
             *         "279": 154,
             *         "280": 95,
             *         "281": 17,
             *         "282": 42,
             *         "283": 19,
             *         "284": 68,
             *         "285": 76,
             *         "286": 163,
             *         "287": 126,
             *         "288": 73,
             *         "289": 160,
             *         "290": 41,
             *         "291": 229,
             *         "292": 49,
             *         "293": 187,
             *         "294": 33,
             *         "295": 48,
             *         "296": 31,
             *         "297": 215,
             *         "298": 46,
             *         "299": 157,
             *         "300": 57,
             *         "301": 3,
             *         "302": 4,
             *         "303": 199,
             *         "304": 99,
             *         "305": 204,
             *         "306": 165,
             *         "307": 169,
             *         "308": 118,
             *         "309": 10,
             *         "310": 99,
             *         "311": 29,
             *         "312": 200,
             *         "313": 87,
             *         "314": 5,
             *         "315": 221,
             *         "316": 107,
             *         "317": 8,
             *         "318": 181,
             *         "319": 15,
             *         "320": 95,
             *         "321": 255,
             *         "322": 125,
             *         "323": 93,
             *         "324": 232,
             *         "325": 215,
             *         "326": 59,
             *         "327": 44,
             *         "328": 235,
             *         "329": 209,
             *         "330": 244,
             *         "331": 195,
             *         "332": 182,
             *         "333": 160
             *       },
             *       "gasUsed": 167798,
             *       "gasWanted": 300000
             *     }
             */
            receipt?: Record<string, never>;
        };
        ATOMCraftUnstakeTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator: string;
            /**
             * @description Amount to unstake in uATOM. Omit to unstake all the delegated amount
             * @example 1000000000000000000000000
             */
            amount_uatom?: string;
        };
        ATOMCraftRedelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to which the new stake will be linked
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator source address of current stake
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator_source: string;
            /**
             * @description Validator destination address to which redelegate the stake
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator_destination: string;
            /**
             * @description Amount to redelegate in uATOM
             * @example 1000000000000000000000000
             */
            amount_uatom?: string;
        };
        ATOMCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator: string;
            /**
             * @description Amount to stake in uatom
             * @example 1000000000000000000000000
             */
            amount_uatom: string;
            /**
             * @description If enabled, the rewards will be automatically restaked
             * @default false
             */
            restake_rewards: boolean;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address?: string;
        };
        ATOMCraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator_address: string;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address: string;
        };
        ATOMCraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator: string;
        };
        ATOMReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in uATOM during the day
             * @example 3575891083876864200000
             */
            rewards: string;
            /**
             * @description Staked balance in uATOM at the end of the day
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield
             * @example 20.76
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            balance_usd?: number;
        };
        ATOMOperationDelegate: {
            /**
             * @description Operation type
             * @example staking.MsgDelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uATOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * @description Amount added to the staked balance in uATOM
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uATOM
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        ATOMOperationUndelegate: {
            /**
             * @description Operation type
             * @example staking.MsgUndelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uATOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * @description Amount removed from the staked balance in uATOM
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uATOM
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        ATOMOperationRedelegate: {
            /**
             * @description Operation type
             * @example staking.MsgBeginRedelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uATOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Destination validator address
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator_address: string;
            /**
             * @description Source validator address
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator_address_source?: string;
            /**
             * @description Delegator address
             * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * @description Amount moved from the source validator staked balance to the destination validator staked balance in uATOM
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed from the destination validator alongside the operation in uATOM
             * @example 10841
             */
            withdraw_rewards?: string;
            /**
             * @description Rewards auto-claimed from the source validator alongside the operation in uATOM
             * @example 10841
             */
            withdraw_rewards_source?: string;
        };
        ATOMOperationWithdrawRewards: {
            /**
             * @description Operation type
             * @example distr.MsgWithdrawDelegatorReward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uATOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * @description Rewards claimed alongside the operation in uATOM
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        ATOMOperationGrant: {
            /**
             * @description Operation type
             * @example Authz.Grant
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uATOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Recipient of the permissions
             * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            grantee?: string;
            /**
             * @description Owner of the stake giving the permissions
             * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            granter?: string;
            /**
             * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
             * @example Staking.MsgDelegate
             */
            permission?: string;
            /**
             * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
             * @example [
             *       "cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl",
             *       "cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl"
             *     ]
             */
            allow_list?: string[] | null;
            /**
             * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
             * @example [
             *       "cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl",
             *       "cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl"
             *     ]
             */
            deny_list?: string[] | null;
        };
        ATOMOperationExec: {
            /**
             * @description Operation type
             * @example Authz.Exec
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uATOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uATOM
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uATOM
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uATOM
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        ATOMOperationContract: {
            /**
             * @description Contract type
             * @example wasm.Contract
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uATOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description address of the contract been called
             * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            contract: string;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uATOM
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uATOM
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uATOM
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        ATOMNetworkStats: {
            /**
             * @description Price of ATOM in USD
             * @example 10.53
             */
            atom_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of ATOM currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description ATOM inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        /**
         * @description Decoded transaction
         * @example {
         *       "authInfo": {
         *         "signerInfos": [
         *           {
         *             "publicKey": {
         *               "typeUrl": "/cosmos.crypto.secp256k1.PubKey",
         *               "value": {
         *                 "0": 10,
         *                 "1": 33,
         *                 "2": 3,
         *                 "3": 156,
         *                 "4": 228,
         *                 "5": 123,
         *                 "6": 42,
         *                 "7": 129,
         *                 "8": 61,
         *                 "9": 19,
         *                 "10": 135,
         *                 "11": 97,
         *                 "12": 49,
         *                 "13": 169,
         *                 "14": 195,
         *                 "15": 190,
         *                 "16": 119,
         *                 "17": 232,
         *                 "18": 196,
         *                 "19": 175,
         *                 "20": 164,
         *                 "21": 158,
         *                 "22": 148,
         *                 "23": 135,
         *                 "24": 68,
         *                 "25": 171,
         *                 "26": 190,
         *                 "27": 225,
         *                 "28": 31,
         *                 "29": 147,
         *                 "30": 158,
         *                 "31": 42,
         *                 "32": 66,
         *                 "33": 15,
         *                 "34": 70
         *               }
         *             },
         *             "modeInfo": {
         *               "single": {
         *                 "mode": 1
         *               }
         *             },
         *             "sequence": {
         *               "low": 102,
         *               "high": 0,
         *               "unsigned": true
         *             }
         *           }
         *         ],
         *         "fee": {
         *           "amount": [
         *             {
         *               "denom": "uatom",
         *               "amount": "5000"
         *             }
         *           ],
         *           "gasLimit": {
         *             "low": 2000000,
         *             "high": 0,
         *             "unsigned": true
         *           },
         *           "payer": "",
         *           "granter": ""
         *         }
         *       },
         *       "body": {
         *         "messages": [
         *           {
         *             "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
         *             "value": {
         *               "0": 10,
         *               "1": 45,
         *               "2": 99,
         *               "3": 111,
         *               "4": 115,
         *               "5": 109,
         *               "6": 111,
         *               "7": 115,
         *               "8": 49,
         *               "9": 57,
         *               "10": 99,
         *               "11": 57,
         *               "12": 102,
         *               "13": 100,
         *               "14": 104,
         *               "15": 52,
         *               "16": 56,
         *               "17": 56,
         *               "18": 118,
         *               "19": 113,
         *               "20": 106,
         *               "21": 99,
         *               "22": 108,
         *               "23": 108,
         *               "24": 116,
         *               "25": 119,
         *               "26": 112,
         *               "27": 54,
         *               "28": 56,
         *               "29": 106,
         *               "30": 109,
         *               "31": 53,
         *               "32": 48,
         *               "33": 121,
         *               "34": 100,
         *               "35": 119,
         *               "36": 121,
         *               "37": 104,
         *               "38": 51,
         *               "39": 54,
         *               "40": 106,
         *               "41": 113,
         *               "42": 101,
         *               "43": 97,
         *               "44": 116,
         *               "45": 101,
         *               "46": 118,
         *               "47": 18,
         *               "48": 52,
         *               "49": 99,
         *               "50": 111,
         *               "51": 115,
         *               "52": 109,
         *               "53": 111,
         *               "54": 115,
         *               "55": 118,
         *               "56": 97,
         *               "57": 108,
         *               "58": 111,
         *               "59": 112,
         *               "60": 101,
         *               "61": 114,
         *               "62": 49,
         *               "63": 54,
         *               "64": 121,
         *               "65": 115,
         *               "66": 48,
         *               "67": 101,
         *               "68": 103,
         *               "69": 57,
         *               "70": 51,
         *               "71": 53,
         *               "72": 109,
         *               "73": 107,
         *               "74": 113,
         *               "75": 112,
         *               "76": 107,
         *               "77": 121,
         *               "78": 100,
         *               "79": 107,
         *               "80": 103,
         *               "81": 102,
         *               "82": 99,
         *               "83": 106,
         *               "84": 57,
         *               "85": 97,
         *               "86": 103,
         *               "87": 101,
         *               "88": 50,
         *               "89": 97,
         *               "90": 117,
         *               "91": 56,
         *               "92": 108,
         *               "93": 57,
         *               "94": 54,
         *               "95": 110,
         *               "96": 97,
         *               "97": 101,
         *               "98": 114,
         *               "99": 101,
         *               "100": 57,
         *               "101": 26,
         *               "102": 16,
         *               "103": 10,
         *               "104": 5,
         *               "105": 117,
         *               "106": 97,
         *               "107": 116,
         *               "108": 111,
         *               "109": 109,
         *               "110": 18,
         *               "111": 7,
         *               "112": 49,
         *               "113": 48,
         *               "114": 48,
         *               "115": 48,
         *               "116": 48,
         *               "117": 48,
         *               "118": 48
         *             }
         *           }
         *         ],
         *         "memo": "",
         *         "timeoutHeight": {
         *           "low": 0,
         *           "high": 0,
         *           "unsigned": true
         *         },
         *         "extensionOptions": [],
         *         "nonCriticalExtensionOptions": []
         *       },
         *       "signatures": [
         *         {
         *           "0": 116,
         *           "1": 104,
         *           "2": 101,
         *           "3": 116,
         *           "4": 97,
         *           "5": 45,
         *           "6": 116,
         *           "7": 101,
         *           "8": 115,
         *           "9": 116,
         *           "10": 110,
         *           "11": 101,
         *           "12": 116,
         *           "13": 45,
         *           "14": 48,
         *           "15": 48,
         *           "16": 49
         *         }
         *       ]
         *     }
         */
        ATOMTxDecoding: Record<string, never>;
        ATOMCraftSendTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Recipient address
             * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            to: string;
            /**
             * @description Amount to send in uatom
             * @example 1000000000000000000000000
             */
            amount_uatom: string;
        };
        CROStake: {
            /**
             * @description Public key of the validator
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator_address: string;
            /**
             * @description Public key of the delegator
             * @example cro1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * Format: date-time
             * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 2023-06-16T03:13:23.058547Z
             */
            delegated_at?: string;
            /**
             * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 15739267
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of undelegation for the stake
             * @example 2023-07-14T03:56:13.561156Z
             */
            undelegated_at?: string;
            /**
             * @description Block of undelegation for the stake
             * @example 16126416
             */
            undelegated_block?: number;
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation in basecro. Includes currently available rewards not yet withdrawn.
             * @example 735573808534727891000000
             */
            rewards: string;
            /**
             * @description Available rewards in basecro that can be withdrawn from this stake
             * @example 36748808534727891000000
             */
            available_rewards: string;
            /**
             * @description Staked balance on this stake in basecro
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 5.76
             */
            net_apy: number;
            /**
             * @description State of the Cronos stake
             * @example active
             * @enum {string}
             */
            state: "active" | "deactivating" | "inactive";
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /** @description permissions related to the stake currently active, ignored if there is no ongoing grants */
            permissions: {
                /**
                 * @description whether the stake is recipient (grantee) or the giver (granter) of the permissions
                 * @example granter
                 */
                source: string;
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
                 * @example Staking.MsgDelegate
                 */
                permission: string;
                /**
                 * Format: date-time
                 * @description Exact time at which the permissions will be revoked
                 * @example 2023-01-10T01:12:34Z
                 */
                expires_at?: string | null;
                /**
                 * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "crovaloper1xyz",
                 *       "crovaloper1abc"
                 *     ]
                 */
                allow_list?: string[] | null;
                /**
                 * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "crovaloper1xyz",
                 *       "crovaloper1abc"
                 *     ]
                 */
                deny_list?: string[] | null;
            }[];
            /** @description unbondings currently active on the stakes. ignored if no unbondings are returned */
            unbondings: {
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * Format: date-time
                 * @description Exact time at which the unbonding will take effect
                 * @example 2023-01-10T01:12:34Z
                 */
                completion_time: string;
                /**
                 * @description Amount currently associated with the unbonding (slashes included)
                 * @example 129300
                 */
                balance: string;
                /**
                 * @description Amount expected at creation (slashes non-included)
                 * @example 150300
                 */
                initial_balance: string;
            }[];
        };
        PostCROStakesPayload: {
            stakes: {
                /**
                 * @description Stake id {validator_address}_{delegator_address}
                 * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry_cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h}
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        CROStakeMessage: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.MsgDelegate
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "delegatorAddress": "cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h",
             *       "validatorAddress": "crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry",
             *       "amount": {
             *         "denom": "basecro",
             *         "amount": "1000000"
             *       }
             *     }
             */
            value?: Record<string, never>;
        };
        CROStakeMessageRestake: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.StakeAuthorization
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "allowList": {
             *         "address": [
             *           "crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry"
             *         ]
             *       },
             *       "AuthorizationType": 1
             *     }
             */
            value?: Record<string, never>;
        };
        CROStakeUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "basecro",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description List of messages included in the transaction. The list contains one message for the staking delegation and one more message for rewards restaking in case specified as a parameter (`restake_rewards=true`).
             * @example [
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *         "value": {
             *           "delegatorAddress": "cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h",
             *           "validatorAddress": "crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry",
             *           "amount": {
             *             "denom": "basecro",
             *             "amount": "1000000"
             *           }
             *         }
             *       },
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.StakeAuthorization",
             *         "allowList": {
             *           "address": [
             *             "crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry"
             *           ]
             *         },
             *         "AuthorizationType": 1
             *       }
             *     ]
             */
            messages: (components["schemas"]["CROStakeMessage"] | components["schemas"]["CROStakeMessageRestake"])[];
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        CROUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Message included in the transaction
             * @example {
             *       "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *       "value": {
             *         "delegatorAddress": "cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h",
             *         "validatorAddress": "crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry",
             *         "amount": {
             *           "denom": "basecro",
             *           "amount": "1000000"
             *         }
             *       }
             *     }
             */
            message: Record<string, never>;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "basecro",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        CROSignedTx: {
            /**
             * @description Serialized signed transaction in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signed_tx_serialized: string;
        };
        CROTxHash: {
            /**
             * @description Hash of the transaction
             * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
             */
            tx_hash: string;
        };
        CROPrepareTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Transaction signature serialized in hex
             * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signature: string;
        };
        CROBroadcastTxPayload: {
            /**
             * @description Signed transaction serialized in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            tx_serialized: string;
        };
        CROTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
             * @example {
             *       "height": 16007296,
             *       "txIndex": 0,
             *       "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
             *       "code": 0,
             *       "events": [
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000basecro"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "cro17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000basecro"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "cro17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000basecro"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "fee",
             *               "value": "5000basecro"
             *             },
             *             {
             *               "key": "fee_payer",
             *               "value": "cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "acc_seq",
             *               "value": "cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "signature",
             *               "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "action",
             *               "value": "/cosmos.staking.v1beta1.MsgDelegate"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "cro1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5basecro"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5basecro"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "cro1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5basecro"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "cro1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "withdraw_rewards",
             *           "attributes": [
             *             {
             *               "key": "amount",
             *               "value": "5basecro"
             *             },
             *             {
             *               "key": "validator",
             *               "value": "crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000basecro"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "cro1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000basecro"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "delegate",
             *           "attributes": [
             *             {
             *               "key": "validator",
             *               "value": "crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000basecro"
             *             },
             *             {
             *               "key": "new_shares",
             *               "value": "100000.000000000000000000"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "module",
             *               "value": "staking"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         }
             *       ],
             *       "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5basecro\"},{\"key\":\"receiver\",\"value\":\"cro1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000basecro\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"cro1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5basecro\"},{\"key\":\"spender\",\"value\":\"cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000basecro\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry\"},{\"key\":\"amount\",\"value\":\"100000basecro\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"cro1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"cro19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"cro1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5basecro\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5basecro\"},{\"key\":\"validator\",\"value\":\"crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry\"}]}]}]",
             *       "tx": {
             *         "0": 10,
             *         "1": 160,
             *         "2": 1,
             *         "3": 10,
             *         "4": 157,
             *         "5": 1,
             *         "6": 10,
             *         "7": 35,
             *         "8": 47,
             *         "9": 99,
             *         "10": 111,
             *         "11": 115,
             *         "12": 109,
             *         "13": 111,
             *         "14": 115,
             *         "15": 46,
             *         "16": 115,
             *         "17": 116,
             *         "18": 97,
             *         "19": 107,
             *         "20": 105,
             *         "21": 110,
             *         "22": 103,
             *         "23": 46,
             *         "24": 118,
             *         "25": 49,
             *         "26": 98,
             *         "27": 101,
             *         "28": 116,
             *         "29": 97,
             *         "30": 49,
             *         "31": 46,
             *         "32": 77,
             *         "33": 115,
             *         "34": 103,
             *         "35": 68,
             *         "36": 101,
             *         "37": 108,
             *         "38": 101,
             *         "39": 103,
             *         "40": 97,
             *         "41": 116,
             *         "42": 101,
             *         "43": 18,
             *         "44": 118,
             *         "45": 10,
             *         "46": 45,
             *         "47": 99,
             *         "48": 111,
             *         "49": 115,
             *         "50": 109,
             *         "51": 111,
             *         "52": 115,
             *         "53": 49,
             *         "54": 57,
             *         "55": 99,
             *         "56": 57,
             *         "57": 102,
             *         "58": 100,
             *         "59": 104,
             *         "60": 52,
             *         "61": 56,
             *         "62": 56,
             *         "63": 118,
             *         "64": 113,
             *         "65": 106,
             *         "66": 99,
             *         "67": 108,
             *         "68": 108,
             *         "69": 116,
             *         "70": 119,
             *         "71": 112,
             *         "72": 54,
             *         "73": 56,
             *         "74": 106,
             *         "75": 109,
             *         "76": 53,
             *         "77": 48,
             *         "78": 121,
             *         "79": 100,
             *         "80": 119,
             *         "81": 121,
             *         "82": 104,
             *         "83": 51,
             *         "84": 54,
             *         "85": 106,
             *         "86": 113,
             *         "87": 101,
             *         "88": 97,
             *         "89": 116,
             *         "90": 101,
             *         "91": 118,
             *         "92": 18,
             *         "93": 52,
             *         "94": 99,
             *         "95": 111,
             *         "96": 115,
             *         "97": 109,
             *         "98": 111,
             *         "99": 115,
             *         "100": 118,
             *         "101": 97,
             *         "102": 108,
             *         "103": 111,
             *         "104": 112,
             *         "105": 101,
             *         "106": 114,
             *         "107": 49,
             *         "108": 54,
             *         "109": 121,
             *         "110": 115,
             *         "111": 48,
             *         "112": 101,
             *         "113": 103,
             *         "114": 57,
             *         "115": 51,
             *         "116": 53,
             *         "117": 109,
             *         "118": 107,
             *         "119": 113,
             *         "120": 112,
             *         "121": 107,
             *         "122": 121,
             *         "123": 100,
             *         "124": 107,
             *         "125": 103,
             *         "126": 102,
             *         "127": 99,
             *         "128": 106,
             *         "129": 57,
             *         "130": 97,
             *         "131": 103,
             *         "132": 101,
             *         "133": 50,
             *         "134": 97,
             *         "135": 117,
             *         "136": 56,
             *         "137": 108,
             *         "138": 57,
             *         "139": 54,
             *         "140": 110,
             *         "141": 97,
             *         "142": 101,
             *         "143": 114,
             *         "144": 101,
             *         "145": 57,
             *         "146": 26,
             *         "147": 15,
             *         "148": 10,
             *         "149": 5,
             *         "150": 117,
             *         "151": 97,
             *         "152": 116,
             *         "153": 111,
             *         "154": 109,
             *         "155": 18,
             *         "156": 6,
             *         "157": 49,
             *         "158": 48,
             *         "159": 48,
             *         "160": 48,
             *         "161": 48,
             *         "162": 48,
             *         "163": 18,
             *         "164": 103,
             *         "165": 10,
             *         "166": 80,
             *         "167": 10,
             *         "168": 70,
             *         "169": 10,
             *         "170": 31,
             *         "171": 47,
             *         "172": 99,
             *         "173": 111,
             *         "174": 115,
             *         "175": 109,
             *         "176": 111,
             *         "177": 115,
             *         "178": 46,
             *         "179": 99,
             *         "180": 114,
             *         "181": 121,
             *         "182": 112,
             *         "183": 116,
             *         "184": 111,
             *         "185": 46,
             *         "186": 115,
             *         "187": 101,
             *         "188": 99,
             *         "189": 112,
             *         "190": 50,
             *         "191": 53,
             *         "192": 54,
             *         "193": 107,
             *         "194": 49,
             *         "195": 46,
             *         "196": 80,
             *         "197": 117,
             *         "198": 98,
             *         "199": 75,
             *         "200": 101,
             *         "201": 121,
             *         "202": 18,
             *         "203": 35,
             *         "204": 10,
             *         "205": 33,
             *         "206": 3,
             *         "207": 156,
             *         "208": 228,
             *         "209": 123,
             *         "210": 42,
             *         "211": 129,
             *         "212": 61,
             *         "213": 19,
             *         "214": 135,
             *         "215": 97,
             *         "216": 49,
             *         "217": 169,
             *         "218": 195,
             *         "219": 190,
             *         "220": 119,
             *         "221": 232,
             *         "222": 196,
             *         "223": 175,
             *         "224": 164,
             *         "225": 158,
             *         "226": 148,
             *         "227": 135,
             *         "228": 68,
             *         "229": 171,
             *         "230": 190,
             *         "231": 225,
             *         "232": 31,
             *         "233": 147,
             *         "234": 158,
             *         "235": 42,
             *         "236": 66,
             *         "237": 15,
             *         "238": 70,
             *         "239": 18,
             *         "240": 4,
             *         "241": 10,
             *         "242": 2,
             *         "243": 8,
             *         "244": 1,
             *         "245": 24,
             *         "246": 33,
             *         "247": 18,
             *         "248": 19,
             *         "249": 10,
             *         "250": 13,
             *         "251": 10,
             *         "252": 5,
             *         "253": 117,
             *         "254": 97,
             *         "255": 116,
             *         "256": 111,
             *         "257": 109,
             *         "258": 18,
             *         "259": 4,
             *         "260": 53,
             *         "261": 48,
             *         "262": 48,
             *         "263": 48,
             *         "264": 16,
             *         "265": 224,
             *         "266": 167,
             *         "267": 18,
             *         "268": 26,
             *         "269": 64,
             *         "270": 25,
             *         "271": 31,
             *         "272": 135,
             *         "273": 165,
             *         "274": 77,
             *         "275": 206,
             *         "276": 175,
             *         "277": 182,
             *         "278": 171,
             *         "279": 154,
             *         "280": 95,
             *         "281": 17,
             *         "282": 42,
             *         "283": 19,
             *         "284": 68,
             *         "285": 76,
             *         "286": 163,
             *         "287": 126,
             *         "288": 73,
             *         "289": 160,
             *         "290": 41,
             *         "291": 229,
             *         "292": 49,
             *         "293": 187,
             *         "294": 33,
             *         "295": 48,
             *         "296": 31,
             *         "297": 215,
             *         "298": 46,
             *         "299": 157,
             *         "300": 57,
             *         "301": 3,
             *         "302": 4,
             *         "303": 199,
             *         "304": 99,
             *         "305": 204,
             *         "306": 165,
             *         "307": 169,
             *         "308": 118,
             *         "309": 10,
             *         "310": 99,
             *         "311": 29,
             *         "312": 200,
             *         "313": 87,
             *         "314": 5,
             *         "315": 221,
             *         "316": 107,
             *         "317": 8,
             *         "318": 181,
             *         "319": 15,
             *         "320": 95,
             *         "321": 255,
             *         "322": 125,
             *         "323": 93,
             *         "324": 232,
             *         "325": 215,
             *         "326": 59,
             *         "327": 44,
             *         "328": 235,
             *         "329": 209,
             *         "330": 244,
             *         "331": 195,
             *         "332": 182,
             *         "333": 160
             *       },
             *       "gasUsed": 167798,
             *       "gasWanted": 300000
             *     }
             */
            receipt?: Record<string, never>;
        };
        CROCraftUnstakeTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator: string;
            /**
             * @description Amount to unstake in basecro. Omit to unstake all the delegated amount
             * @example 1000000000000000000000000
             */
            amount_basecro?: string;
        };
        CROCraftRedelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to which the new stake will be linked
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator source address of current stake
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator_source: string;
            /**
             * @description Validator destination address to which redelegate the stake
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator_destination: string;
            /**
             * @description Amount to redelegate in basecro
             * @example 1000000000000000000000000
             */
            amount_basecro?: string;
        };
        CROCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator: string;
            /**
             * @description Amount to stake in basecro
             * @example 1000000000000000000000000
             */
            amount_basecro: string;
            /**
             * @description If enabled, the rewards will be automatically restaked
             * @default false
             */
            restake_rewards: boolean;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address?: string;
        };
        CROCraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator_address: string;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address: string;
        };
        CROCraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator: string;
        };
        CROReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in basecro during the day
             * @example 3575891083876864200000
             */
            rewards: string;
            /**
             * @description Staked balance in basecro at the end of the day
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield
             * @example 20.76
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            balance_usd?: number;
        };
        CROOperationDelegate: {
            /**
             * @description Operation type
             * @example staking.MsgDelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in basecro
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h
             */
            delegator_address: string;
            /**
             * @description Amount added to the staked balance in basecro
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in basecro
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        CROOperationUndelegate: {
            /**
             * @description Operation type
             * @example staking.MsgUndelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in basecro
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h
             */
            delegator_address: string;
            /**
             * @description Amount removed from the staked balance in basecro
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in basecro
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        CROOperationRedelegate: {
            /**
             * @description Operation type
             * @example staking.MsgBeginRedelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in basecro
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Destination validator address
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator_address: string;
            /**
             * @description Source validator address
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator_address_source?: string;
            /**
             * @description Delegator address
             * @example cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h
             */
            delegator_address: string;
            /**
             * @description Amount moved from the source validator staked balance to the destination validator staked balance in basecro
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed from the destination validator alongside the operation in basecro
             * @example 10841
             */
            withdraw_rewards?: string;
            /**
             * @description Rewards auto-claimed from the source validator alongside the operation in basecro
             * @example 10841
             */
            withdraw_rewards_source?: string;
        };
        CROOperationWithdrawRewards: {
            /**
             * @description Operation type
             * @example distr.MsgWithdrawDelegatorReward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in basecro
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h
             */
            delegator_address: string;
            /**
             * @description Rewards claimed alongside the operation in basecro
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        CROOperationGrant: {
            /**
             * @description Operation type
             * @example Authz.Grant
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in basecro
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Recipient of the permissions
             * @example cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h
             */
            grantee?: string;
            /**
             * @description Owner of the stake giving the permissions
             * @example cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h
             */
            granter?: string;
            /**
             * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
             * @example Staking.MsgDelegate
             */
            permission?: string;
            /**
             * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
             * @example [
             *       "cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h",
             *       "cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h"
             *     ]
             */
            allow_list?: string[] | null;
            /**
             * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
             * @example [
             *       "cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h",
             *       "cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h"
             *     ]
             */
            deny_list?: string[] | null;
        };
        CROOperationExec: {
            /**
             * @description Operation type
             * @example Authz.Exec
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in basecro
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in basecro
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in basecro
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in basecro
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        CROOperationContract: {
            /**
             * @description Contract type
             * @example wasm.Contract
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in basecro
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description address of the contract been called
             * @example cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h
             */
            contract: string;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example crocncl10skwvezaqkngyw9uyskzsqe2cu8jc2ysrrndry
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example cro1egww25see7x6pg2lp2mhmnd5s6smzlfmdlwm0h
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in basecro
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in basecro
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in basecro
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        CRONetworkStats: {
            /**
             * @description Price of Cronos in USD
             * @example 10.53
             */
            cro_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Cronos currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Cronos inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        /**
         * @description Decoded transaction
         * @example {
         *       "authInfo": {
         *         "signerInfos": [
         *           {
         *             "publicKey": {
         *               "typeUrl": "/cosmos.crypto.secp256k1.PubKey",
         *               "value": {
         *                 "0": 10,
         *                 "1": 33,
         *                 "2": 3,
         *                 "3": 156,
         *                 "4": 228,
         *                 "5": 123,
         *                 "6": 42,
         *                 "7": 129,
         *                 "8": 61,
         *                 "9": 19,
         *                 "10": 135,
         *                 "11": 97,
         *                 "12": 49,
         *                 "13": 169,
         *                 "14": 195,
         *                 "15": 190,
         *                 "16": 119,
         *                 "17": 232,
         *                 "18": 196,
         *                 "19": 175,
         *                 "20": 164,
         *                 "21": 158,
         *                 "22": 148,
         *                 "23": 135,
         *                 "24": 68,
         *                 "25": 171,
         *                 "26": 190,
         *                 "27": 225,
         *                 "28": 31,
         *                 "29": 147,
         *                 "30": 158,
         *                 "31": 42,
         *                 "32": 66,
         *                 "33": 15,
         *                 "34": 70
         *               }
         *             },
         *             "modeInfo": {
         *               "single": {
         *                 "mode": 1
         *               }
         *             },
         *             "sequence": {
         *               "low": 102,
         *               "high": 0,
         *               "unsigned": true
         *             }
         *           }
         *         ],
         *         "fee": {
         *           "amount": [
         *             {
         *               "denom": "basecro",
         *               "amount": "5000"
         *             }
         *           ],
         *           "gasLimit": {
         *             "low": 2000000,
         *             "high": 0,
         *             "unsigned": true
         *           },
         *           "payer": "",
         *           "granter": ""
         *         }
         *       },
         *       "body": {
         *         "messages": [
         *           {
         *             "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
         *             "value": {
         *               "0": 10,
         *               "1": 45,
         *               "2": 99,
         *               "3": 111,
         *               "4": 115,
         *               "5": 109,
         *               "6": 111,
         *               "7": 115,
         *               "8": 49,
         *               "9": 57,
         *               "10": 99,
         *               "11": 57,
         *               "12": 102,
         *               "13": 100,
         *               "14": 104,
         *               "15": 52,
         *               "16": 56,
         *               "17": 56,
         *               "18": 118,
         *               "19": 113,
         *               "20": 106,
         *               "21": 99,
         *               "22": 108,
         *               "23": 108,
         *               "24": 116,
         *               "25": 119,
         *               "26": 112,
         *               "27": 54,
         *               "28": 56,
         *               "29": 106,
         *               "30": 109,
         *               "31": 53,
         *               "32": 48,
         *               "33": 121,
         *               "34": 100,
         *               "35": 119,
         *               "36": 121,
         *               "37": 104,
         *               "38": 51,
         *               "39": 54,
         *               "40": 106,
         *               "41": 113,
         *               "42": 101,
         *               "43": 97,
         *               "44": 116,
         *               "45": 101,
         *               "46": 118,
         *               "47": 18,
         *               "48": 52,
         *               "49": 99,
         *               "50": 111,
         *               "51": 115,
         *               "52": 109,
         *               "53": 111,
         *               "54": 115,
         *               "55": 118,
         *               "56": 97,
         *               "57": 108,
         *               "58": 111,
         *               "59": 112,
         *               "60": 101,
         *               "61": 114,
         *               "62": 49,
         *               "63": 54,
         *               "64": 121,
         *               "65": 115,
         *               "66": 48,
         *               "67": 101,
         *               "68": 103,
         *               "69": 57,
         *               "70": 51,
         *               "71": 53,
         *               "72": 109,
         *               "73": 107,
         *               "74": 113,
         *               "75": 112,
         *               "76": 107,
         *               "77": 121,
         *               "78": 100,
         *               "79": 107,
         *               "80": 103,
         *               "81": 102,
         *               "82": 99,
         *               "83": 106,
         *               "84": 57,
         *               "85": 97,
         *               "86": 103,
         *               "87": 101,
         *               "88": 50,
         *               "89": 97,
         *               "90": 117,
         *               "91": 56,
         *               "92": 108,
         *               "93": 57,
         *               "94": 54,
         *               "95": 110,
         *               "96": 97,
         *               "97": 101,
         *               "98": 114,
         *               "99": 101,
         *               "100": 57,
         *               "101": 26,
         *               "102": 16,
         *               "103": 10,
         *               "104": 5,
         *               "105": 117,
         *               "106": 97,
         *               "107": 116,
         *               "108": 111,
         *               "109": 109,
         *               "110": 18,
         *               "111": 7,
         *               "112": 49,
         *               "113": 48,
         *               "114": 48,
         *               "115": 48,
         *               "116": 48,
         *               "117": 48,
         *               "118": 48
         *             }
         *           }
         *         ],
         *         "memo": "",
         *         "timeoutHeight": {
         *           "low": 0,
         *           "high": 0,
         *           "unsigned": true
         *         },
         *         "extensionOptions": [],
         *         "nonCriticalExtensionOptions": []
         *       },
         *       "signatures": [
         *         {
         *           "0": 116,
         *           "1": 104,
         *           "2": 101,
         *           "3": 116,
         *           "4": 97,
         *           "5": 45,
         *           "6": 116,
         *           "7": 101,
         *           "8": 115,
         *           "9": 116,
         *           "10": 110,
         *           "11": 101,
         *           "12": 116,
         *           "13": 45,
         *           "14": 48,
         *           "15": 48,
         *           "16": 49
         *         }
         *       ]
         *     }
         */
        CROTxDecoding: Record<string, never>;
        CROCraftSendTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Recipient address
             * @example cro1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            to: string;
            /**
             * @description Amount to send in basecro
             * @example 1000000000000000000000000
             */
            amount_basecro: string;
        };
        CROGetBalancePayload: {
            /**
             * @description Wallet address
             * @example cro1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            address: string;
            /**
             * @description The denomination of the balance to query
             * @example basecro
             */
            denom: string;
        };
        OMStake: {
            /**
             * @description Public key of the validator
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator_address: string;
            /**
             * @description Public key of the delegator
             * @example mantra1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * Format: date-time
             * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 2023-06-16T03:13:23.058547Z
             */
            delegated_at?: string;
            /**
             * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 15739267
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of undelegation for the stake
             * @example 2023-07-14T03:56:13.561156Z
             */
            undelegated_at?: string;
            /**
             * @description Block of undelegation for the stake
             * @example 16126416
             */
            undelegated_block?: number;
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation in uOM. Includes currently available rewards not yet withdrawn.
             * @example 735573808534727891000000
             */
            rewards: string;
            /**
             * @description Available rewards in uOM that can be withdrawn from this stake
             * @example 36748808534727891000000
             */
            available_rewards: string;
            /**
             * @description Staked balance on this stake in uOM
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 5.76
             */
            net_apy: number;
            /**
             * @description State of the Mantra stake
             * @example active
             * @enum {string}
             */
            state: "active" | "deactivating" | "inactive";
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /** @description permissions related to the stake currently active, ignored if there is no ongoing grants */
            permissions: {
                /**
                 * @description whether the stake is recipient (grantee) or the giver (granter) of the permissions
                 * @example granter
                 */
                source: string;
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
                 * @example Staking.MsgDelegate
                 */
                permission: string;
                /**
                 * Format: date-time
                 * @description Exact time at which the permissions will be revoked
                 * @example 2023-01-10T01:12:34Z
                 */
                expires_at?: string | null;
                /**
                 * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "mantravaloper1xyz",
                 *       "mantravaloper1abc"
                 *     ]
                 */
                allow_list?: string[] | null;
                /**
                 * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "mantravaloper1xyz",
                 *       "mantravaloper1abc"
                 *     ]
                 */
                deny_list?: string[] | null;
            }[];
            /** @description unbondings currently active on the stakes. ignored if no unbondings are returned */
            unbondings: {
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * Format: date-time
                 * @description Exact time at which the unbonding will take effect
                 * @example 2023-01-10T01:12:34Z
                 */
                completion_time: string;
                /**
                 * @description Amount currently associated with the unbonding (slashes included)
                 * @example 129300
                 */
                balance: string;
                /**
                 * @description Amount expected at creation (slashes non-included)
                 * @example 150300
                 */
                initial_balance: string;
            }[];
        };
        PostOMStakesPayload: {
            stakes: {
                /**
                 * @description Stake id {validator_address}_{delegator_address}
                 * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g_mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a}
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        OMStakeMessage: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.MsgDelegate
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "delegatorAddress": "mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a",
             *       "validatorAddress": "mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g",
             *       "amount": {
             *         "denom": "uom",
             *         "amount": "1000000"
             *       }
             *     }
             */
            value?: Record<string, never>;
        };
        OMStakeMessageRestake: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.StakeAuthorization
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "allowList": {
             *         "address": [
             *           "mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g"
             *         ]
             *       },
             *       "AuthorizationType": 1
             *     }
             */
            value?: Record<string, never>;
        };
        OMStakeUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "uom",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description List of messages included in the transaction. The list contains one message for the staking delegation and one more message for rewards restaking in case specified as a parameter (`restake_rewards=true`).
             * @example [
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *         "value": {
             *           "delegatorAddress": "mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a",
             *           "validatorAddress": "mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g",
             *           "amount": {
             *             "denom": "uom",
             *             "amount": "1000000"
             *           }
             *         }
             *       },
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.StakeAuthorization",
             *         "allowList": {
             *           "address": [
             *             "mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g"
             *           ]
             *         },
             *         "AuthorizationType": 1
             *       }
             *     ]
             */
            messages: (components["schemas"]["OMStakeMessage"] | components["schemas"]["OMStakeMessageRestake"])[];
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        OMUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Message included in the transaction
             * @example {
             *       "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *       "value": {
             *         "delegatorAddress": "mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a",
             *         "validatorAddress": "mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g",
             *         "amount": {
             *           "denom": "uom",
             *           "amount": "1000000"
             *         }
             *       }
             *     }
             */
            message: Record<string, never>;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "uom",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        OMSignedTx: {
            /**
             * @description Serialized signed transaction in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signed_tx_serialized: string;
        };
        OMTxHash: {
            /**
             * @description Hash of the transaction
             * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
             */
            tx_hash: string;
        };
        OMPrepareTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Transaction signature serialized in hex
             * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signature: string;
        };
        OMBroadcastTxPayload: {
            /**
             * @description Signed transaction serialized in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            tx_serialized: string;
        };
        OMTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
             * @example {
             *       "height": 16007296,
             *       "txIndex": 0,
             *       "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
             *       "code": 0,
             *       "events": [
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000uom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "mantra17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000uom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "mantra17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000uom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "fee",
             *               "value": "5000uom"
             *             },
             *             {
             *               "key": "fee_payer",
             *               "value": "mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "acc_seq",
             *               "value": "mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "signature",
             *               "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "action",
             *               "value": "/cosmos.staking.v1beta1.MsgDelegate"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "mantra1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5uom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5uom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "mantra1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5uom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "mantra1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "withdraw_rewards",
             *           "attributes": [
             *             {
             *               "key": "amount",
             *               "value": "5uom"
             *             },
             *             {
             *               "key": "validator",
             *               "value": "mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000uom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "mantra1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000uom"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "delegate",
             *           "attributes": [
             *             {
             *               "key": "validator",
             *               "value": "mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000uom"
             *             },
             *             {
             *               "key": "new_shares",
             *               "value": "100000.000000000000000000"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "module",
             *               "value": "staking"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         }
             *       ],
             *       "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5uom\"},{\"key\":\"receiver\",\"value\":\"mantra1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000uom\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"mantra1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5uom\"},{\"key\":\"spender\",\"value\":\"mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000uom\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g\"},{\"key\":\"amount\",\"value\":\"100000uom\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"mantra1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"mantra19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"mantra1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5uom\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5uom\"},{\"key\":\"validator\",\"value\":\"mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g\"}]}]}]",
             *       "tx": {
             *         "0": 10,
             *         "1": 160,
             *         "2": 1,
             *         "3": 10,
             *         "4": 157,
             *         "5": 1,
             *         "6": 10,
             *         "7": 35,
             *         "8": 47,
             *         "9": 99,
             *         "10": 111,
             *         "11": 115,
             *         "12": 109,
             *         "13": 111,
             *         "14": 115,
             *         "15": 46,
             *         "16": 115,
             *         "17": 116,
             *         "18": 97,
             *         "19": 107,
             *         "20": 105,
             *         "21": 110,
             *         "22": 103,
             *         "23": 46,
             *         "24": 118,
             *         "25": 49,
             *         "26": 98,
             *         "27": 101,
             *         "28": 116,
             *         "29": 97,
             *         "30": 49,
             *         "31": 46,
             *         "32": 77,
             *         "33": 115,
             *         "34": 103,
             *         "35": 68,
             *         "36": 101,
             *         "37": 108,
             *         "38": 101,
             *         "39": 103,
             *         "40": 97,
             *         "41": 116,
             *         "42": 101,
             *         "43": 18,
             *         "44": 118,
             *         "45": 10,
             *         "46": 45,
             *         "47": 99,
             *         "48": 111,
             *         "49": 115,
             *         "50": 109,
             *         "51": 111,
             *         "52": 115,
             *         "53": 49,
             *         "54": 57,
             *         "55": 99,
             *         "56": 57,
             *         "57": 102,
             *         "58": 100,
             *         "59": 104,
             *         "60": 52,
             *         "61": 56,
             *         "62": 56,
             *         "63": 118,
             *         "64": 113,
             *         "65": 106,
             *         "66": 99,
             *         "67": 108,
             *         "68": 108,
             *         "69": 116,
             *         "70": 119,
             *         "71": 112,
             *         "72": 54,
             *         "73": 56,
             *         "74": 106,
             *         "75": 109,
             *         "76": 53,
             *         "77": 48,
             *         "78": 121,
             *         "79": 100,
             *         "80": 119,
             *         "81": 121,
             *         "82": 104,
             *         "83": 51,
             *         "84": 54,
             *         "85": 106,
             *         "86": 113,
             *         "87": 101,
             *         "88": 97,
             *         "89": 116,
             *         "90": 101,
             *         "91": 118,
             *         "92": 18,
             *         "93": 52,
             *         "94": 99,
             *         "95": 111,
             *         "96": 115,
             *         "97": 109,
             *         "98": 111,
             *         "99": 115,
             *         "100": 118,
             *         "101": 97,
             *         "102": 108,
             *         "103": 111,
             *         "104": 112,
             *         "105": 101,
             *         "106": 114,
             *         "107": 49,
             *         "108": 54,
             *         "109": 121,
             *         "110": 115,
             *         "111": 48,
             *         "112": 101,
             *         "113": 103,
             *         "114": 57,
             *         "115": 51,
             *         "116": 53,
             *         "117": 109,
             *         "118": 107,
             *         "119": 113,
             *         "120": 112,
             *         "121": 107,
             *         "122": 121,
             *         "123": 100,
             *         "124": 107,
             *         "125": 103,
             *         "126": 102,
             *         "127": 99,
             *         "128": 106,
             *         "129": 57,
             *         "130": 97,
             *         "131": 103,
             *         "132": 101,
             *         "133": 50,
             *         "134": 97,
             *         "135": 117,
             *         "136": 56,
             *         "137": 108,
             *         "138": 57,
             *         "139": 54,
             *         "140": 110,
             *         "141": 97,
             *         "142": 101,
             *         "143": 114,
             *         "144": 101,
             *         "145": 57,
             *         "146": 26,
             *         "147": 15,
             *         "148": 10,
             *         "149": 5,
             *         "150": 117,
             *         "151": 97,
             *         "152": 116,
             *         "153": 111,
             *         "154": 109,
             *         "155": 18,
             *         "156": 6,
             *         "157": 49,
             *         "158": 48,
             *         "159": 48,
             *         "160": 48,
             *         "161": 48,
             *         "162": 48,
             *         "163": 18,
             *         "164": 103,
             *         "165": 10,
             *         "166": 80,
             *         "167": 10,
             *         "168": 70,
             *         "169": 10,
             *         "170": 31,
             *         "171": 47,
             *         "172": 99,
             *         "173": 111,
             *         "174": 115,
             *         "175": 109,
             *         "176": 111,
             *         "177": 115,
             *         "178": 46,
             *         "179": 99,
             *         "180": 114,
             *         "181": 121,
             *         "182": 112,
             *         "183": 116,
             *         "184": 111,
             *         "185": 46,
             *         "186": 115,
             *         "187": 101,
             *         "188": 99,
             *         "189": 112,
             *         "190": 50,
             *         "191": 53,
             *         "192": 54,
             *         "193": 107,
             *         "194": 49,
             *         "195": 46,
             *         "196": 80,
             *         "197": 117,
             *         "198": 98,
             *         "199": 75,
             *         "200": 101,
             *         "201": 121,
             *         "202": 18,
             *         "203": 35,
             *         "204": 10,
             *         "205": 33,
             *         "206": 3,
             *         "207": 156,
             *         "208": 228,
             *         "209": 123,
             *         "210": 42,
             *         "211": 129,
             *         "212": 61,
             *         "213": 19,
             *         "214": 135,
             *         "215": 97,
             *         "216": 49,
             *         "217": 169,
             *         "218": 195,
             *         "219": 190,
             *         "220": 119,
             *         "221": 232,
             *         "222": 196,
             *         "223": 175,
             *         "224": 164,
             *         "225": 158,
             *         "226": 148,
             *         "227": 135,
             *         "228": 68,
             *         "229": 171,
             *         "230": 190,
             *         "231": 225,
             *         "232": 31,
             *         "233": 147,
             *         "234": 158,
             *         "235": 42,
             *         "236": 66,
             *         "237": 15,
             *         "238": 70,
             *         "239": 18,
             *         "240": 4,
             *         "241": 10,
             *         "242": 2,
             *         "243": 8,
             *         "244": 1,
             *         "245": 24,
             *         "246": 33,
             *         "247": 18,
             *         "248": 19,
             *         "249": 10,
             *         "250": 13,
             *         "251": 10,
             *         "252": 5,
             *         "253": 117,
             *         "254": 97,
             *         "255": 116,
             *         "256": 111,
             *         "257": 109,
             *         "258": 18,
             *         "259": 4,
             *         "260": 53,
             *         "261": 48,
             *         "262": 48,
             *         "263": 48,
             *         "264": 16,
             *         "265": 224,
             *         "266": 167,
             *         "267": 18,
             *         "268": 26,
             *         "269": 64,
             *         "270": 25,
             *         "271": 31,
             *         "272": 135,
             *         "273": 165,
             *         "274": 77,
             *         "275": 206,
             *         "276": 175,
             *         "277": 182,
             *         "278": 171,
             *         "279": 154,
             *         "280": 95,
             *         "281": 17,
             *         "282": 42,
             *         "283": 19,
             *         "284": 68,
             *         "285": 76,
             *         "286": 163,
             *         "287": 126,
             *         "288": 73,
             *         "289": 160,
             *         "290": 41,
             *         "291": 229,
             *         "292": 49,
             *         "293": 187,
             *         "294": 33,
             *         "295": 48,
             *         "296": 31,
             *         "297": 215,
             *         "298": 46,
             *         "299": 157,
             *         "300": 57,
             *         "301": 3,
             *         "302": 4,
             *         "303": 199,
             *         "304": 99,
             *         "305": 204,
             *         "306": 165,
             *         "307": 169,
             *         "308": 118,
             *         "309": 10,
             *         "310": 99,
             *         "311": 29,
             *         "312": 200,
             *         "313": 87,
             *         "314": 5,
             *         "315": 221,
             *         "316": 107,
             *         "317": 8,
             *         "318": 181,
             *         "319": 15,
             *         "320": 95,
             *         "321": 255,
             *         "322": 125,
             *         "323": 93,
             *         "324": 232,
             *         "325": 215,
             *         "326": 59,
             *         "327": 44,
             *         "328": 235,
             *         "329": 209,
             *         "330": 244,
             *         "331": 195,
             *         "332": 182,
             *         "333": 160
             *       },
             *       "gasUsed": 167798,
             *       "gasWanted": 300000
             *     }
             */
            receipt?: Record<string, never>;
        };
        OMCraftUnstakeTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator: string;
            /**
             * @description Amount to unstake in uOM. Omit to unstake all the delegated amount
             * @example 1000000000000000000000000
             */
            amount_uom?: string;
        };
        OMCraftRedelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to which the new stake will be linked
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator source address of current stake
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator_source: string;
            /**
             * @description Validator destination address to which redelegate the stake
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator_destination: string;
            /**
             * @description Amount to redelegate in uOM
             * @example 1000000000000000000000000
             */
            amount_uom?: string;
        };
        OMCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator: string;
            /**
             * @description Amount to stake in uom
             * @example 1000000000000000000000000
             */
            amount_uom: string;
            /**
             * @description If enabled, the rewards will be automatically restaked
             * @default false
             */
            restake_rewards: boolean;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address?: string;
        };
        OMCraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator_address: string;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address: string;
        };
        OMCraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator: string;
        };
        OMReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in uOM during the day
             * @example 3575891083876864200000
             */
            rewards: string;
            /**
             * @description Staked balance in uOM at the end of the day
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield
             * @example 20.76
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            balance_usd?: number;
        };
        OMOperationDelegate: {
            /**
             * @description Operation type
             * @example staking.MsgDelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a
             */
            delegator_address: string;
            /**
             * @description Amount added to the staked balance in uOM
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uOM
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        OMOperationUndelegate: {
            /**
             * @description Operation type
             * @example staking.MsgUndelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a
             */
            delegator_address: string;
            /**
             * @description Amount removed from the staked balance in uOM
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uOM
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        OMOperationRedelegate: {
            /**
             * @description Operation type
             * @example staking.MsgBeginRedelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Destination validator address
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator_address: string;
            /**
             * @description Source validator address
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator_address_source?: string;
            /**
             * @description Delegator address
             * @example mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a
             */
            delegator_address: string;
            /**
             * @description Amount moved from the source validator staked balance to the destination validator staked balance in uOM
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed from the destination validator alongside the operation in uOM
             * @example 10841
             */
            withdraw_rewards?: string;
            /**
             * @description Rewards auto-claimed from the source validator alongside the operation in uOM
             * @example 10841
             */
            withdraw_rewards_source?: string;
        };
        OMOperationWithdrawRewards: {
            /**
             * @description Operation type
             * @example distr.MsgWithdrawDelegatorReward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a
             */
            delegator_address: string;
            /**
             * @description Rewards claimed alongside the operation in uOM
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        OMOperationGrant: {
            /**
             * @description Operation type
             * @example Authz.Grant
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Recipient of the permissions
             * @example mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a
             */
            grantee?: string;
            /**
             * @description Owner of the stake giving the permissions
             * @example mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a
             */
            granter?: string;
            /**
             * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
             * @example Staking.MsgDelegate
             */
            permission?: string;
            /**
             * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
             * @example [
             *       "mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a",
             *       "mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a"
             *     ]
             */
            allow_list?: string[] | null;
            /**
             * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
             * @example [
             *       "mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a",
             *       "mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a"
             *     ]
             */
            deny_list?: string[] | null;
        };
        OMOperationExec: {
            /**
             * @description Operation type
             * @example Authz.Exec
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uOM
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uOM
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uOM
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        OMOperationContract: {
            /**
             * @description Contract type
             * @example wasm.Contract
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOM
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description address of the contract been called
             * @example mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a
             */
            contract: string;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example mantravaloper1qum83utf8833n4f857w98dxc5w8qlnq9eeew4g
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example mantra156h4wqz5p0xuj48cn0cv2sg8q9p2y3nycg3h3a
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uOM
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uOM
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uOM
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        OMNetworkStats: {
            /**
             * @description Price of Mantra in USD
             * @example 10.53
             */
            om_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Mantra currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Mantra inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        /**
         * @description Decoded transaction
         * @example {
         *       "authInfo": {
         *         "signerInfos": [
         *           {
         *             "publicKey": {
         *               "typeUrl": "/cosmos.crypto.secp256k1.PubKey",
         *               "value": {
         *                 "0": 10,
         *                 "1": 33,
         *                 "2": 3,
         *                 "3": 156,
         *                 "4": 228,
         *                 "5": 123,
         *                 "6": 42,
         *                 "7": 129,
         *                 "8": 61,
         *                 "9": 19,
         *                 "10": 135,
         *                 "11": 97,
         *                 "12": 49,
         *                 "13": 169,
         *                 "14": 195,
         *                 "15": 190,
         *                 "16": 119,
         *                 "17": 232,
         *                 "18": 196,
         *                 "19": 175,
         *                 "20": 164,
         *                 "21": 158,
         *                 "22": 148,
         *                 "23": 135,
         *                 "24": 68,
         *                 "25": 171,
         *                 "26": 190,
         *                 "27": 225,
         *                 "28": 31,
         *                 "29": 147,
         *                 "30": 158,
         *                 "31": 42,
         *                 "32": 66,
         *                 "33": 15,
         *                 "34": 70
         *               }
         *             },
         *             "modeInfo": {
         *               "single": {
         *                 "mode": 1
         *               }
         *             },
         *             "sequence": {
         *               "low": 102,
         *               "high": 0,
         *               "unsigned": true
         *             }
         *           }
         *         ],
         *         "fee": {
         *           "amount": [
         *             {
         *               "denom": "uom",
         *               "amount": "5000"
         *             }
         *           ],
         *           "gasLimit": {
         *             "low": 2000000,
         *             "high": 0,
         *             "unsigned": true
         *           },
         *           "payer": "",
         *           "granter": ""
         *         }
         *       },
         *       "body": {
         *         "messages": [
         *           {
         *             "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
         *             "value": {
         *               "0": 10,
         *               "1": 45,
         *               "2": 99,
         *               "3": 111,
         *               "4": 115,
         *               "5": 109,
         *               "6": 111,
         *               "7": 115,
         *               "8": 49,
         *               "9": 57,
         *               "10": 99,
         *               "11": 57,
         *               "12": 102,
         *               "13": 100,
         *               "14": 104,
         *               "15": 52,
         *               "16": 56,
         *               "17": 56,
         *               "18": 118,
         *               "19": 113,
         *               "20": 106,
         *               "21": 99,
         *               "22": 108,
         *               "23": 108,
         *               "24": 116,
         *               "25": 119,
         *               "26": 112,
         *               "27": 54,
         *               "28": 56,
         *               "29": 106,
         *               "30": 109,
         *               "31": 53,
         *               "32": 48,
         *               "33": 121,
         *               "34": 100,
         *               "35": 119,
         *               "36": 121,
         *               "37": 104,
         *               "38": 51,
         *               "39": 54,
         *               "40": 106,
         *               "41": 113,
         *               "42": 101,
         *               "43": 97,
         *               "44": 116,
         *               "45": 101,
         *               "46": 118,
         *               "47": 18,
         *               "48": 52,
         *               "49": 99,
         *               "50": 111,
         *               "51": 115,
         *               "52": 109,
         *               "53": 111,
         *               "54": 115,
         *               "55": 118,
         *               "56": 97,
         *               "57": 108,
         *               "58": 111,
         *               "59": 112,
         *               "60": 101,
         *               "61": 114,
         *               "62": 49,
         *               "63": 54,
         *               "64": 121,
         *               "65": 115,
         *               "66": 48,
         *               "67": 101,
         *               "68": 103,
         *               "69": 57,
         *               "70": 51,
         *               "71": 53,
         *               "72": 109,
         *               "73": 107,
         *               "74": 113,
         *               "75": 112,
         *               "76": 107,
         *               "77": 121,
         *               "78": 100,
         *               "79": 107,
         *               "80": 103,
         *               "81": 102,
         *               "82": 99,
         *               "83": 106,
         *               "84": 57,
         *               "85": 97,
         *               "86": 103,
         *               "87": 101,
         *               "88": 50,
         *               "89": 97,
         *               "90": 117,
         *               "91": 56,
         *               "92": 108,
         *               "93": 57,
         *               "94": 54,
         *               "95": 110,
         *               "96": 97,
         *               "97": 101,
         *               "98": 114,
         *               "99": 101,
         *               "100": 57,
         *               "101": 26,
         *               "102": 16,
         *               "103": 10,
         *               "104": 5,
         *               "105": 117,
         *               "106": 97,
         *               "107": 116,
         *               "108": 111,
         *               "109": 109,
         *               "110": 18,
         *               "111": 7,
         *               "112": 49,
         *               "113": 48,
         *               "114": 48,
         *               "115": 48,
         *               "116": 48,
         *               "117": 48,
         *               "118": 48
         *             }
         *           }
         *         ],
         *         "memo": "",
         *         "timeoutHeight": {
         *           "low": 0,
         *           "high": 0,
         *           "unsigned": true
         *         },
         *         "extensionOptions": [],
         *         "nonCriticalExtensionOptions": []
         *       },
         *       "signatures": [
         *         {
         *           "0": 116,
         *           "1": 104,
         *           "2": 101,
         *           "3": 116,
         *           "4": 97,
         *           "5": 45,
         *           "6": 116,
         *           "7": 101,
         *           "8": 115,
         *           "9": 116,
         *           "10": 110,
         *           "11": 101,
         *           "12": 116,
         *           "13": 45,
         *           "14": 48,
         *           "15": 48,
         *           "16": 49
         *         }
         *       ]
         *     }
         */
        OMTxDecoding: Record<string, never>;
        OMCraftSendTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Recipient address
             * @example mantra1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            to: string;
            /**
             * @description Amount to send in uom
             * @example 1000000000000000000000000
             */
            amount_uom: string;
        };
        OMGetBalancePayload: {
            /**
             * @description Wallet address
             * @example mantra1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            address: string;
            /**
             * @description The denomination of the balance to query
             * @example uOM
             */
            denom: string;
        };
        ADAPostStakesPayload: {
            stakes: {
                /**
                 * @description Stake address
                 * @example stake1u84uqy85qpsln9a49dtv7mrzzp0246v7s2cj7ypjr555ldqenardf
                 */
                stakeAddress?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        ADACraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet that you wish to delegate from
             * @example addr1q8rmz6kk2te6z2p44l2uvjgmf5cj5r6l0nwnw6xqk4srnlr5kh8wvl8mw3na7m3fd2py8n3zqs6ueqe0gwcuf9a77z9sxdz9xr
             */
            wallet: string;
            /**
             * @description Pool id to delegate to
             * @example pool10rdglgh4pzvkf936p2m669qzarr9dusrhmmz9nultm3uvq4eh5k
             */
            pool_id: string;
        };
        ADACraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet that you wish to withdraw rewards to
             * @example addr1q8rmz6kk2te6z2p44l2uvjgmf5cj5r6l0nwnw6xqk4srnlr5kh8wvl8mw3na7m3fd2py8n3zqs6ueqe0gwcuf9a77z9sxdz9xr
             */
            wallet: string;
            /**
             * @description Optional amount of rewards to withdraw in lovelace. 1 ADA = 1,000,000 lovelace. If omitted, all available rewards will be withdrawn.
             * @example 1000000
             */
            amount_lovelace?: string;
        };
        ADACraftUnstakeTxPayload: {
            /**
             * @description Wallet that you wish to undelegate
             * @example addr1q8rmz6kk2te6z2p44l2uvjgmf5cj5r6l0nwnw6xqk4srnlr5kh8wvl8mw3na7m3fd2py8n3zqs6ueqe0gwcuf9a77z9sxdz9xr
             */
            wallet: string;
        };
        ADAPrepareTxPayload: {
            /**
             * @description Unsigned serialized transaction
             * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
             */
            unsigned_tx_serialized: string;
            /**
             * @description Signed messages
             * @example null
             */
            signed_messages: {
                /** @description Public key of the signing key */
                pubkey?: string;
                /** @description Signature of the message */
                signature?: string;
            }[];
        };
        ADABroadcastTxPayload: {
            /**
             * @description Signed serialized transaction
             * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
             */
            tx_serialized: string;
        };
        ADATxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "pending_confirmation";
            /**
             * @description Transaction receipt. Object shape can be found [here](https://github.com/blockfrost/openapi/blob/master/src/generated-types.ts#L4493)
             * @example {
             *       "hash": "20082206aadbbb2dfded4afc9346831c5bd3a6a3f8a75f59dbe6166c05e918f6",
             *       "block": "2612449e345ec0f58aae05c693a09943f599592e28eedec70ee8c1a4f3d1e834",
             *       "block_height": 660450,
             *       "block_time": 1677170968,
             *       "slot": 21487768,
             *       "index": 1,
             *       "output_amount": [
             *         {
             *           "unit": "lovelace",
             *           "quantity": "10027100000"
             *         }
             *       ],
             *       "fees": "300000",
             *       "deposit": "2000000",
             *       "size": 429,
             *       "invalid_before": null,
             *       "invalid_hereafter": "21494910",
             *       "utxo_count": 2,
             *       "withdrawal_count": 0,
             *       "mir_cert_count": 0,
             *       "delegation_count": 1,
             *       "stake_cert_count": 1,
             *       "pool_update_count": 0,
             *       "pool_retire_count": 0,
             *       "asset_mint_or_burn_count": 0,
             *       "redeemer_count": 0,
             *       "valid_contract": true,
             *       "epoch": 429
             *     }
             */
            receipt?: Record<string, never>;
        };
        ADAUnsignedTx: {
            /**
             * @description Hash of the unsigned transaction
             * @example ea62bc381a2d8fc338f24634674a168fdc8f1a09b978f24f026041f4e00c876f
             */
            unsigned_tx_hash: string;
            /**
             * @description Unsigned serialized transaction
             * @example 84a500818258203d244a2821a0cb32df614cf4380e6c6e0114bc7c734cfa2a3940498ad86865e100018182583900491a1d0747fa91f319625e39076232ad4cc274e3257f345ced82dbb2a8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b1b0000000255928400021a000493e0031a01ad4330048282008200581ca8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b83028200581ca8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b581ce54d5f9340218a9816cafafc92dc3d5212b6d149ce75e9637cbcd7e0a0f5f6
             */
            unsigned_tx_serialized: string;
            /**
             * @description List of inputs to spend
             * @example [
             *       {
             *         "transaction_id": "3d244a2821a0cb32df614cf4380e6c6e0114bc7c734cfa2a3940498ad86865e1",
             *         "index": 0
             *       }
             *     ]
             */
            inputs: Record<string, never>[];
        };
        ADASignedTx: {
            /**
             * @description Signed serialized transaction
             * @example 84a500818258203d244a2821a0cb32df614cf4380e6c6e0114bc7c734cfa2a3940498ad86865e100018182583900491a1d0747fa91f319625e39076232ad4cc274e3257f345ced82dbb2a8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b1b0000000255928400021a000493e0031a01ad4330048282008200581ca8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b83028200581ca8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b581ce54d5f9340218a9816cafafc92dc3d5212b6d149ce75e9637cbcd7e0a0f5f6
             */
            signed_tx_serialized: string;
        };
        ADATxHash: {
            /**
             * @description Hash of the transaction
             * @example 7f12d9eacd762d130838289397480e495db0fd268bd3be4fd55c74a74fd8372d
             */
            tx_hash: string;
        };
        ADAStake: {
            /**
             * @description The list of wallet addresses associated to the stake address
             * @example [
             *       "addr_test1qqumsdyju8ee4tvee7kyzd6jenkl9jvgdjtzqlf729wqd66eay504fk550rss8ckhksw3t742vf5vy99kyxpz60cxqcqdeu78t"
             *     ]
             */
            wallet_addresses: string[];
            /**
             * @description The stake address
             * @example stake_test1upv7j2865m2283cgruttmg8g4l24xy6xzzjmzrq3d8urqvqla4ngk
             */
            stake_address: string;
            /**
             * @description The pool id associated to the stake address
             * @example pool1u4x4ly6qyx9fs9k2lt7f9hpa2gftd52fee67jcmuhnt7qqae3x0
             */
            pool_id: string;
            /**
             * @description Active saturation of the pool
             * @example 0.8
             */
            active_pool_saturation: string;
            /**
             * @description Live saturation of the pool
             * @example 0.82
             */
            live_pool_saturation: string;
            /**
             * @description Current stake balance in Lovelace
             * @example 30004690613
             */
            balance: string;
            /**
             * @description Total stake rewards in Lovelace
             * @example 37201548
             */
            rewards: string;
            /**
             * @description Withdrawal amount of rewards in Lovelace
             * @example 4588
             */
            available_rewards: string;
            /**
             * @description Epoch of the last delegation
             * @example 42
             */
            delegated_epoch: number;
            /**
             * Format: date-time
             * @description Date of the last delegation
             * @example 2023-01-06T22:00:00Z
             */
            delegated_at: string;
            /**
             * @description Epoch at which the stake was registered
             * @example 44
             */
            activated_epoch: number;
            /**
             * Format: date-time
             * @description Date at which the stake was registered
             * @example 2023-01-16T22:00:00Z
             */
            activated_at: string;
            /**
             * @description State of the stake
             * @example active
             * @enum {string}
             */
            state: "active" | "inactive";
            /**
             * @description Net annual percentage yield
             * @example 0.188014
             */
            net_apy: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        ADARewardByEpoch: {
            epoch: {
                /**
                 * @description Epoch number
                 * @example 44
                 */
                nb?: number;
                /**
                 * @description Epoch start date
                 * @example 2023-01-06T22:00:00Z
                 */
                begin_at?: string;
            };
            /**
             * @description Reward amount in lovelace
             * @example 1000000
             */
            rewards: string;
            /**
             * @description Active balance
             * @example 1000000
             */
            active_balance: string;
            /**
             * @description Net APY
             * @example 3.05
             */
            net_apy: number;
        };
        ADARewardByDay: {
            /**
             * @description Reward amount in lovelace
             * @example 1000000
             */
            rewards: string;
            /**
             * @description Date of reward
             * @example 2023-01-06
             */
            date: string;
            /**
             * @description Active balance
             * @example 1000000
             */
            active_balance: string;
            /**
             * @description Net APY
             * @example 3.05
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            active_balance_usd?: number;
        };
        ADAOperationStakeRegistration: {
            /**
             * @description stake_registration
             * @example stake_registration
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the stake registration based on the block.
             * @example 2021-01-03T21:49:34Z
             */
            time: string;
            /**
             * @description Stake address
             * @example stake1u84uqy85qpsln9a49dtv7mrzzp0246v7s2cj7ypjr555ldqenardf
             */
            stake_address: string;
            /**
             * @description Epoch number
             * @example 239
             */
            epoch: number;
            /**
             * @description Block number
             * @example 5162844
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 052306cc8ded7adee92ccd9e10e31c8352f568408eb1868cf3ca751d67695dc8
             */
            tx_hash: string;
        };
        ADAOperationStakeDeregistration: {
            /**
             * @description stake_deregistration
             * @example stake_deregistration
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the stake deregistration based on the block.
             * @example 2021-01-03T21:49:34Z
             */
            time: string;
            /**
             * @description Stake address
             * @example stake1u84uqy85qpsln9a49dtv7mrzzp0246v7s2cj7ypjr555ldqenardf
             */
            stake_address: string;
            /**
             * @description Epoch number
             * @example 239
             */
            epoch: number;
            /**
             * @description Block number
             * @example 5162844
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 052306cc8ded7adee92ccd9e10e31c8352f568408eb1868cf3ca751d67695dc8
             */
            tx_hash: string;
        };
        ADAOperationDelegation: {
            /**
             * @description delegation
             * @example delegation
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the delegation on a pool based on the block.
             * @example 2021-01-03T21:49:34Z
             */
            time: string;
            /**
             * @description Stake address
             * @example stake1u84uqy85qpsln9a49dtv7mrzzp0246v7s2cj7ypjr555ldqenardf
             */
            stake_address: string;
            /**
             * @description Epoch number
             * @example 239
             */
            epoch: number;
            /**
             * @description Block number
             * @example 5162844
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 052306cc8ded7adee92ccd9e10e31c8352f568408eb1868cf3ca751d67695dc8
             */
            tx_hash: string;
            /**
             * @description The pool receiving the delegation.
             * @example pool1q0a7a94cfk4ph7gugj636tsuhhd98l2sfjv2adhaff2mvs7kmtl
             */
            pool_id: string;
        };
        ADAOperationWithdrawal: {
            /**
             * @description withdrawal
             * @example withdrawal
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the withdrawal based on the block.
             * @example 2021-01-03T21:49:34Z
             */
            time: string;
            /**
             * @description Stake address
             * @example stake1u84uqy85qpsln9a49dtv7mrzzp0246v7s2cj7ypjr555ldqenardf
             */
            stake_address: string;
            /**
             * @description Epoch number
             * @example 239
             */
            epoch: number;
            /**
             * @description Block number
             * @example 5162844
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 052306cc8ded7adee92ccd9e10e31c8352f568408eb1868cf3ca751d67695dc8
             */
            tx_hash: string;
            /**
             * @description Amount in Lovelace
             * @example 305914672095
             */
            amount: string;
        };
        ADAOperationReward: {
            /**
             * @description reward
             * @example reward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date the rewards were earned on. It is the earned epoch end date.
             * @example 2021-01-03T21:49:34Z
             */
            time: string;
            /**
             * @description Stake address
             * @example stake1u84uqy85qpsln9a49dtv7mrzzp0246v7s2cj7ypjr555ldqenardf
             */
            stake_address: string;
            /**
             * @description Earned epoch number
             * @example 239
             */
            epoch: number;
            /**
             * @description Pool the rewards come from.
             * @example pool1q0a7a94cfk4ph7gugj636tsuhhd98l2sfjv2adhaff2mvs7kmtl
             */
            pool_id: string;
            /**
             * @description Amount in Lovelace
             * @example 305914672095
             */
            amount: string;
        };
        ADANetworkStats: {
            /**
             * @description Price of ADA in USD
             * @example 0.29
             */
            ada_price_usd: number;
            /**
             * @description Number of active validators
             * @example 3068
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 3.3
             */
            network_gross_apy: number;
            /**
             * @description Percentage of ADA being staked
             * @example 62.24
             */
            supply_staked_percent: number;
            /**
             * @description ADA inflation rate
             * @example 0.3
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-08-09T11:41:36Z
             */
            updated_at: string;
        };
        BBNUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 70736274ff0100cf02000000016b5253d7d86352e1d3f1eba7a1ebf6216477e4a945d1b879833eb10a3a60653e0200000000fdffffff0350c3000000000000225120b712455a29769599d30a5b589cfea040ca2a5f3b22c403d26667664a442cedfd0000000000000000496a476262623400bb37a6d29e7fc8eb6726243c08a0f85d431602ddcd669bf33c74ec85ee8f42b6053107172a3d5a2715754cd5793efdcf5e54364b855ed2305819e372aa685d7600964aca090000000000160014d21aac5179517528f2f158769086c50ea90c73db000000000001011f5b940a0000000000160014d21aac5179517528f2f158769086c50ea90c73db00000000
             */
            unsigned_tx_serialized: string;
        };
        BBNBroadcastTxPayload: {
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id?: string;
            /**
             * @description Signed serialized transaction
             * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
             */
            tx_serialized: string;
        };
        BBNPostStakesPayload: {
            stakes: {
                /**
                 * @description Transaction id of the stake
                 * @example 2e2127d3697df687b73367c1877fbb3e336d85d5068b822ba9c78a020b00bd88
                 */
                tx_id: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        BBNCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key in compressed 33 bytes format
             * @example 03bb37a6d29e7fc8eb6726243c08a0f85d431602ddcd669bf33c74ec85ee8f42b6
             */
            public_key: string;
            /**
             * @description Amount of BTC to lock up in satoshi unit
             * @example 100000
             */
            amount_satoshi: number;
            /**
             * @description Amount of blocks your BTC will remain locked
             * @example 150
             */
            time_lock: number;
            /**
             * @description Fee rate for the transaction, in satoshi per byte
             * @example 10
             */
            fee_rate: number;
        };
        BBNTxHash: {
            /**
             * @description Transaction id
             * @example 2e2127d3697df687b73367c1877fbb3e336d85d5068b822ba9c78a020b00bd88
             */
            tx_id: string;
        };
        BBNStake: {
            /**
             * @description The status of the stake
             * @example status
             */
            status: string;
            /**
             * @description The id/hash of the transaction
             * @example 2e2127d3697df687b73367c1877fbb3e336d85d5068b822ba9c78a020b00bd88
             */
            staking_tx: string;
            /**
             * @description The address of the staker
             * @example bc1q6gd2c5te296j3uh3tpmfppk9p65scu7m53kx93
             */
            staker: string;
            /**
             * @description The amount of the stake in satoshis
             * @example 50000
             */
            amount: number;
            /**
             * @description The public key of the finality provider
             * @example 053107172a3d5a2715754cd5793efdcf5e54364b855ed2305819e372aa685d76
             */
            finality_provider: string;
            /**
             * @description The amount of block for which the stake is blocked
             * @example 150
             */
            lock_time: number;
            /**
             * @description The timestamp of when the stake was activated_at
             * @example 2024-12-05T15:36:36+00:00
             */
            activated_at: string;
            /**
             * @description The amount of points the stake as earned
             * @example 15
             */
            points: number;
        };
        MATICStake: {
            /**
             * @description Public key owning shares of a validator
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            delegator_address?: string;
            /**
             * @description Validator's index
             * @example 1
             */
            validator_index?: number;
            /**
             * @description State of the MATIC stake
             * @example active
             * @enum {string}
             */
            state?: "active" | "unstaked";
            /**
             * @description Block at which the corresponding staking transaction was executed
             * @example 6307582
             */
            delegated_block?: number | null;
            /**
             * Format: date-time
             * @description Date of staking transaction on the Ethereum consensus layer
             * @example 2022-02-02T08:31:07Z
             */
            delegated_at?: string | null;
            /**
             * @description Current balance in WEI of the stake
             * @example 11364372934211323407387
             */
            balance?: string | null;
            /**
             * @description Amount of validator shares owned by the stake
             * @example 126664878892234995894
             */
            shares?: string | null;
            /**
             * @description Balance in wei waiting to be withdrawn
             * @example 11364372934211323407387
             */
            unbounded_balance?: string | null;
            /**
             * @description Epoch at which the withdrawn was requested
             * @example 8
             */
            unbounded_epoch?: number | null;
            /**
             * @description Whether the withdrawal delay since unbounded_epoch has passed
             * @example true
             */
            is_unbounding_complete?: boolean | null;
            /**
             * @description Sum of all rewards in WEI earned by this stake
             * @example 689020902235393456944
             */
            rewards?: string | null;
            /**
             * @description Net annual percentage yield
             * @example 4.066307880973232
             */
            net_apy?: number | null;
            /**
             * @description Available rewards in WEI that can be withdrawn from this stake
             * @example 659936623311645699
             */
            available_rewards?: string | null;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-07-31T13:56:58Z
             */
            updated_at?: string | null;
            /** @description unbounds, created via sellVoucher_new, currently active on the stakes. ignored if no unbounds are returned */
            unbounds_with_id?: {
                /**
                 * @description id of the unbound
                 * @example 1
                 */
                nonce?: number;
                /**
                 * @description Balance in wei waiting to be withdrawn
                 * @example 11364372934211323407387
                 */
                balance?: string;
                /**
                 * @description Epoch at which the withdrawn was requested
                 * @example 8
                 */
                epoch?: number;
                /**
                 * @description Whether the withdrawal delay since unbounded_epoch has passed
                 * @example true
                 */
                is_complete?: boolean;
            }[] | null;
        };
        MATICReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date?: string;
            /**
             * @description Accumulated rewards in WEI during the day
             * @example 2988504000000000
             */
            rewards?: string;
            /**
             * @description Staked balance in WEI that contributed to this rewards
             * @example 64000000000000000000
             */
            active_balance?: string;
            /**
             * @description Gross annual percentage yield
             * @example 3.407
             */
            net_apy?: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            stake_balance_usd?: number;
        };
        MATICOperationShareMinted: {
            /**
             * @description Event emitted by a ValidatorShare contract when minting new shares.
             *     This can happen through the buyVoucher, restake and migrateIn methods.
             * @example share_minted
             */
            type?: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block?: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time?: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash?: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index?: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender?: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string | null;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used?: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string | null;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string | null;
            /**
             * @description Index of the validator recipient of the delegation
             * @example 1
             */
            validator_id?: number;
            /**
             * @description Address receiving the shares
             * @example 0xa
             */
            user?: string;
            /**
             * @description Amount in WEI deposited by the user
             * @example 300000000
             */
            amount?: string;
            /**
             * @description Amount of shares received
             * @example 300000000
             */
            tokens?: string;
        };
        MATICOperationShareBurned: {
            /**
             * @description Event emitted by a ValidatorShare contract when burning shares.
             *     This can happen through the sellVoucher and migrateOut methods.
             * @example share_burned
             */
            type?: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block?: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time?: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash?: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index?: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender?: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string | null;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used?: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string | null;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string | null;
            /**
             * @description Index of the validator reducing its shares
             * @example 1
             */
            validator_id?: number;
            /**
             * @description Address burning the shares
             * @example 0xa
             */
            user?: string;
            /**
             * @description Amount in WEI retrieved by the user
             * @example 300000000
             */
            amount?: string;
            /**
             * @description Amount of shares burnt
             * @example 300000000
             */
            tokens?: string;
        };
        MATICOperationShareBurnedWithID: {
            /**
             * @description Event emitted by a ValidatorShare contract when burning shares.
             *     This can happen through the sellVoucher_new method.
             * @example share_burned
             */
            type?: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block?: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time?: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash?: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index?: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender?: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string | null;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used?: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string | null;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string | null;
            /**
             * @description Index of the validator reducing its shares
             * @example 1
             */
            validator_id?: number;
            /**
             * @description Address burning the shares
             * @example 0xa
             */
            user?: string;
            /**
             * @description Amount in WEI retrieved by the user
             * @example 300000000
             */
            amount?: string;
            /**
             * @description Amount of shares burnt
             * @example 300000000
             */
            tokens?: string;
            /**
             * @description Id of the event, matching a DelegatorUnstakedWithID
             * @example 1
             */
            nonce?: number;
        };
        MATICOperationDelegatorRestaked: {
            /**
             * @description Event emitted by a ValidatorShare contract when one of its delegators restake its rewards.
             *     This can happen through the restake method.
             *     It is important to note that this event only shows how much matic the delegator has delegated in total, it doesn't show how many rewards were restaked.
             * @example delegator_restaked
             */
            type?: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block?: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time?: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash?: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index?: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender?: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string | null;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used?: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string | null;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string | null;
            /**
             * @description Index of the validator recipient of the re-delegation
             * @example 1
             */
            validator_id?: number;
            /**
             * @description Address re-delegating
             * @example 0xa
             */
            user?: string;
            /**
             * @description Total amount of WEI staked
             * @example 300000000
             */
            total_staked?: string;
        };
        MATICOperationDelegatorUnstaked: {
            /**
             * @description Event emitted by a ValidatorShare contract when one of its delegators unstake MATIC for which shares were burned previously.
             *     This can happen through the unstakeClaimTokens and migrateOut methods.
             * @example delegator_unstaked
             */
            type?: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block?: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time?: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash?: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index?: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender?: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string | null;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used?: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string | null;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string | null;
            /**
             * @description Index of the validator from which the user is unstaking
             * @example 1
             */
            validator_id?: number;
            /**
             * @description Address unstaking
             * @example 0xa
             */
            user?: string;
            /**
             * @description Amount of WEI unstaked
             * @example 300000000
             */
            amount?: string;
        };
        MATICOperationDelegatorUnstakedWithID: {
            /**
             * @description Event emitted by a ValidatorShare contract when one of its delegators unstake MATIC for which shares were burned previously.
             *     This can happen through the unstakeClaimTokens_new.
             * @example delegator_unstaked
             */
            type?: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block?: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time?: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash?: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index?: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender?: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string | null;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used?: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string | null;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string | null;
            /**
             * @description Index of the validator from which the user is unstaking
             * @example 1
             */
            validator_id?: number;
            /**
             * @description Address unstaking
             * @example 0xa
             */
            user?: string;
            /**
             * @description Amount of WEI unstaked
             * @example 300000000
             */
            amount?: string;
            /**
             * @description Id of the event, matching a ShareBurnedWithID
             * @example 1
             */
            nonce?: number;
        };
        MATICOperationDelegatorClaimedRewards: {
            /**
             * @description Event emitted by a ValidatorShare contract when one of its delegators withdraw its rewards.
             *     This can happen through most interactions with the contract when the delegators has enough rewards.
             * @example delegator_claimed_rewards
             */
            type?: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block?: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time?: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash?: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index?: number;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string | null;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender?: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used?: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string | null;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string | null;
            /**
             * @description Index of the validator from which the user claims its rewards
             * @example 1
             */
            validator_id?: number;
            /**
             * @description Address claiming its rewards
             * @example 0xa
             */
            user?: string;
            /**
             * @description Amount claimed in WEI
             * @example 300000000
             */
            rewards?: string;
        };
        MATICOperationSharesTransfer: {
            /**
             * @description Event emitted by a ValidatorShare contract when one of its delegators transfers its shares to another address.
             *     This can happen through the transfer method.
             * @example delegator_claimed_rewards
             */
            type?: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block?: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time?: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash?: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index?: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender?: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string | null;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used?: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string | null;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string | null;
            /**
             * @description Index of the validator from which the user claims its rewards
             * @example 1
             */
            validator_id?: number;
            /**
             * @description Address transfering the shares
             * @example 0xa
             */
            from?: string;
            /**
             * @description Address receiving the shares
             * @example 0xa
             */
            to?: string;
            /**
             * @description Amount in WEI
             * @example 300000000
             */
            value?: string;
        };
        MATICNetworkStats: {
            /**
             * @description MATIC price in USD
             * @example 0.84
             */
            matic_price_usd: number;
            /**
             * @description Size of Polygon's active set
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Percentage of MATIC being staked
             * @example 20.4
             */
            supply_staked_percent: number;
            /**
             * @description MATIC inflation rate
             * @example 2.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-07-31T13:56:58Z
             */
            updated_at: string | null;
        };
        MATICPostStakesPayload: {
            stakes: {
                /**
                 * @description Stake ID. Format is {validator_index}_{wallet_address}
                 * @example 1_0x9ce658155a6f05fe4aef83b7fa8f431d5e8ccb55
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        MATICCraftApproveTxPayload: {
            /**
             * @description Wallet address to approve
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Contract address that needs approval
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            contract: string;
            /**
             * @description Optional amount to approve in WEI. If not specified, an infinite amount will be approved
             * @example 32000000000000000000
             */
            amount_wei?: string;
        };
        MATICUnsignedTx: {
            /**
             * @description Hash of the unsigned transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            unsigned_tx_hash: string;
            /**
             * @description Unsigned serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            unsigned_tx_serialized: string;
            /**
             * @description Contract address of the transaction recipient
             * @example 0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852
             */
            to: string;
            /**
             * @description Hex encoded contract data to be sent with the transaction
             * @example 0xca0bfcce0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000309696c02ec4dbb99f714e26ff1acdf6b258d36dcbad7b8b549553bc99b94ea639cd247f31683564995afd48568c1b6edd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020010000000000000000000000bc86717bad3f8ccf86d2882a6bc351c94580a994000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060a3869da2ed5cc558f016d59fc5ceb0cac28e58743836aa3cf146221f1ef0b959e3cc5c589e05e171f1473596aadf36411767ad92edaae421ba0291bd7568267b3faabc3ab6ed9ddfc048ea6640370977f16f4f626a0e567a11ba25acdc520bb000000000000000000000000000000000000000000000000000000000000000012dd65914dda46639df6344701de54ac3ebe34a4b230262d3017fcd6c29954452
             */
            contract_call_data: string;
            /**
             * @description Amount of MATIC to send in wei
             * @example 32000000000000000000
             */
            amount_wei: string | null;
            /**
             * @description Nonce of the transaction
             * @example 1
             */
            nonce: number;
            /**
             * @description Gas limit of the transaction in gas units. We provide a default value of two times the estimated gas limit
             * @example 140244
             */
            gas_limit: number;
            /**
             * @description Max priority fee per gas in wei. This is basically the miner fee. We provide a default value of 2 gwei so transactions are mined faster.
             * @example 2000000000
             */
            max_priority_fee_per_gas_wei: string;
            /**
             * @description Max fee per gas in wei. This is the maximum amount of gas that you are willing to pay for the transaction.
             * @example 383687469748
             */
            max_fee_per_gas_wei: string;
            /**
             * @description Chain ID of the network
             * @example 1
             */
            chain_id: number;
        };
        MATICCraftBuyVoucherTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet address
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Amount of MATIC to stake in WEI
             * @example 32000000000000000000
             */
            amount_wei: string;
            /**
             * @description Contract address of the validator share proxy contract
             * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
             */
            validator_share_proxy_address: string;
        };
        MATICCraftSellVoucherTxPayload: {
            /**
             * @description Wallet address
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Amount of MATIC to sell in WEI
             * @example 32000000000000000000
             */
            amount_wei: string;
            /**
             * @description Contract address of the validator share proxy contract
             * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
             */
            validator_share_proxy_address: string;
        };
        MATICCraftUnstakeClaimTokensTxPayload: {
            /**
             * @description Wallet address
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Contract address of the validator share proxy contract
             * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
             */
            validator_share_proxy_address: string;
        };
        MATICCraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet address
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Contract address of the validator share proxy contract
             * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
             */
            validator_share_proxy_address: string;
        };
        MATICCraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet address
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Contract address of the validator share proxy contract
             * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
             */
            validator_share_proxy_address: string;
        };
        MATICPrepareTxPayload: {
            /**
             * @description Unsigned serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            unsigned_tx_serialized: string;
            /**
             * @description r part of the ECDSA signature in hex
             * @example de28e9efee4c8de422a3c64bfaaee11a32f7cf12bdd3f00dcce41a79fe776c65
             */
            r: string;
            /**
             * @description s part of the ECDSA signature in hex
             * @example 3f233eb69495fa4741ad28ef0ba40612bacaf08331fd76041c371f5a2ecc2ab5
             */
            s: string;
            /**
             * @description v part of the ECDSA signature (0 or 1)
             * @example 0
             */
            v: number;
        };
        MATICTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error" | "pending_confirmation";
            /**
             * @description Transaction receipt. Object shape can be found [here](https://github.com/web3/web3.js/blob/c5072a35996eb232e2742e92b612c07ba7af98ab/packages/web3-types/src/eth_types.ts#L299)
             * @example {
             *       "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
             *       "blockNumber": 8608123,
             *       "contractAddress": null,
             *       "cumulativeGasUsed": 8180146,
             *       "effectiveGasPrice": 27391741855,
             *       "from": "0x9ce658155a6f05fe4aef83b7fa8f431d5e8ccb55",
             *       "gasUsed": 70098,
             *       "logs": [
             *         {
             *           "address": "0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b",
             *           "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
             *           "blockNumber": 8608123,
             *           "data": "0x00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003093b5ae8053213154d099ed7fc99f571a0c8124601f8a59540335c7c35e0b40aad7b033f84af365185c04812acab257460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000000000009ce658155a6f05fe4aef83b7fa8f431d5e8ccb550000000000000000000000000000000000000000000000000000000000000008004059730700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000609395a07d5e7eb073725049ecba8144d850b7a1a58f603fd1fc12049d32c98db47e3d81608074bca20ccdcc94f7f4767d0d6b852edf4f6231532f33242e64d0617ac93465bc4cdabe9cebf0abe6d169830fcf375b28c0641487e5f86df2875a970000000000000000000000000000000000000000000000000000000000000008ecce030000000000000000000000000000000000000000000000000000000000",
             *           "logIndex": 150,
             *           "removed": false,
             *           "topics": [
             *             "0x649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c5"
             *           ],
             *           "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
             *           "transactionIndex": 33,
             *           "id": "log_4115d183"
             *         },
             *         {
             *           "address": "0x5FaDfdb7eFffd3B4AA03f0F29d9200Cf5F191F31",
             *           "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
             *           "blockNumber": 8608123,
             *           "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000003093b5ae8053213154d099ed7fc99f571a0c8124601f8a59540335c7c35e0b40aad7b033f84af365185c04812acab257460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000000000009ce658155a6f05fe4aef83b7fa8f431d5e8ccb55",
             *           "logIndex": 151,
             *           "removed": false,
             *           "topics": [
             *             "0x737feedde71ce80c08f73125e4350b001be2dfb6a00fb455086c2b0a514cdfac"
             *           ],
             *           "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
             *           "transactionIndex": 33,
             *           "id": "log_b4bb5ff7"
             *         }
             *       ],
             *       "logsBloom": "0x00000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000008000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000008000000000000000000000000000000400000000000000000000000020000000000000000000000000040000000000000000000000000000020000000000000000000000000000000000000000000000000004000000000000000000000000000000000000008000000000000000000000004",
             *       "status": true,
             *       "to": "0x5fadfdb7efffd3b4aa03f0f29d9200cf5f191f31",
             *       "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
             *       "transactionIndex": 33,
             *       "type": "0x2"
             *     }
             */
            receipt?: Record<string, never>;
        };
        MATICSignedTx: {
            /**
             * @description Signed serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            signed_tx_serialized: string;
        };
        MATICBroadcastTxPayload: {
            /**
             * @description Signed serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            tx_serialized: string;
        };
        MATICBroadcastedTx: {
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash?: string;
        };
        POLStake: {
            /**
             * @description Public key owning shares of a validator
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            delegator_address: string;
            /**
             * @description Validator's index
             * @example 1
             */
            validator_index: number;
            /**
             * @description State of the POL stake
             * @example active
             * @enum {string}
             */
            state: "active" | "unstaked";
            /**
             * @description Block at which the corresponding staking transaction was executed
             * @example 6307582
             */
            delegated_block: number;
            /**
             * Format: date-time
             * @description Date of staking transaction on the Ethereum consensus layer
             * @example 2022-02-02T08:31:07Z
             */
            delegated_at: string;
            /**
             * @description Current balance in WEI of the stake
             * @example 11364372934211323407387
             */
            balance: string;
            /**
             * @description Amount of validator shares owned by the stake
             * @example 126664878892234995894
             */
            shares: string;
            /**
             * @description Balance in wei waiting to be withdrawn
             * @example 11364372934211323407387
             */
            unbounded_balance?: string;
            /**
             * @description Epoch at which the withdrawn was requested
             * @example 8
             */
            unbounded_epoch?: number;
            /**
             * @description Whether the withdrawal delay since unbounded_epoch has passed
             * @example true
             */
            is_unbounding_complete?: boolean;
            /**
             * @description Sum of all rewards in WEI earned by this stake
             * @example 689020902235393456944
             */
            rewards?: string;
            /**
             * @description Net annual percentage yield
             * @example 4.066307880973232
             */
            net_apy?: number;
            /**
             * @description Available rewards in WEI that can be withdrawn from this stake
             * @example 659936623311645699
             */
            available_rewards?: string;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-07-31T13:56:58Z
             */
            updated_at: string;
            /** @description unbounds, created via sellVoucher_new, currently active on the stakes. ignored if no unbounds are returned */
            unbounds_with_id?: {
                /**
                 * @description id of the unbound
                 * @example 1
                 */
                nonce: number;
                /**
                 * @description Balance in wei waiting to be withdrawn
                 * @example 11364372934211323407387
                 */
                balance: string;
                /**
                 * @description Epoch at which the withdrawn was requested
                 * @example 8
                 */
                epoch: number;
                /**
                 * @description Whether the withdrawal delay since unbounded_epoch has passed
                 * @example true
                 */
                is_complete: boolean;
            }[];
        };
        POLReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in WEI during the day
             * @example 2988504000000000
             */
            rewards: string;
            /**
             * @description Staked balance in WEI that contributed to this rewards
             * @example 64000000000000000000
             */
            active_balance: string;
            /**
             * @description Gross annual percentage yield
             * @example 3.407
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            active_balance_usd?: number;
        };
        POLOperationShareMinted: {
            /**
             * @description Event emitted by a ValidatorShare contract when minting new shares.
             *     This can happen through the buyVoucher, restake and migrateIn methods.
             * @example share_minted
             */
            type: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string;
            /**
             * @description Index of the validator recipient of the delegation
             * @example 1
             */
            validator_id: number;
            /**
             * @description Address receiving the shares
             * @example 0xa
             */
            user: string;
            /**
             * @description Amount in WEI deposited by the user
             * @example 300000000
             */
            amount: string;
            /**
             * @description Amount of shares received
             * @example 300000000
             */
            tokens: string;
        };
        POLOperationShareBurned: {
            /**
             * @description Event emitted by a ValidatorShare contract when burning shares.
             *     This can happen through the sellVoucher and migrateOut methods.
             * @example share_burned
             */
            type: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string;
            /**
             * @description Index of the validator reducing its shares
             * @example 1
             */
            validator_id: number;
            /**
             * @description Address burning the shares
             * @example 0xa
             */
            user: string;
            /**
             * @description Amount in WEI retrieved by the user
             * @example 300000000
             */
            amount: string;
            /**
             * @description Amount of shares burnt
             * @example 300000000
             */
            tokens: string;
        };
        POLOperationShareBurnedWithID: {
            /**
             * @description Event emitted by a ValidatorShare contract when burning shares.
             *     This can happen through the sellVoucher_new method.
             * @example share_burned
             */
            type: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string;
            /**
             * @description Index of the validator reducing its shares
             * @example 1
             */
            validator_id: number;
            /**
             * @description Address burning the shares
             * @example 0xa
             */
            user: string;
            /**
             * @description Amount in WEI retrieved by the user
             * @example 300000000
             */
            amount: string;
            /**
             * @description Amount of shares burnt
             * @example 300000000
             */
            tokens: string;
            /**
             * @description Id of the event, matching a DelegatorUnstakedWithID
             * @example 1
             */
            nonce: number;
        };
        POLOperationDelegatorRestaked: {
            /**
             * @description Event emitted by a ValidatorShare contract when one of its delegators restake its rewards.
             *     This can happen through the restake method.
             *     It is important to note that this event only shows how much POL the delegator has delegated in total, it doesn't show how many rewards were restaked.
             * @example delegator_restaked
             */
            type: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string;
            /**
             * @description Index of the validator recipient of the re-delegation
             * @example 1
             */
            validator_id: number;
            /**
             * @description Address re-delegating
             * @example 0xa
             */
            user: string;
            /**
             * @description Total amount of WEI staked
             * @example 300000000
             */
            total_staked: string;
        };
        POLOperationDelegatorUnstaked: {
            /**
             * @description Event emitted by a ValidatorShare contract when one of its delegators unstake POL for which shares were burned previously.
             *     This can happen through the unstakeClaimTokens and migrateOut methods.
             * @example delegator_unstaked
             */
            type: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string;
            /**
             * @description Index of the validator from which the user is unstaking
             * @example 1
             */
            validator_id: number;
            /**
             * @description Address unstaking
             * @example 0xa
             */
            user: string;
            /**
             * @description Amount of WEI unstaked
             * @example 300000000
             */
            amount: string;
        };
        POLOperationDelegatorUnstakedWithID: {
            /**
             * @description Event emitted by a ValidatorShare contract when one of its delegators unstake POL for which shares were burned previously.
             *     This can happen through the unstakeClaimTokens_new.
             * @example delegator_unstaked
             */
            type: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string;
            /**
             * @description Index of the validator from which the user is unstaking
             * @example 1
             */
            validator_id: number;
            /**
             * @description Address unstaking
             * @example 0xa
             */
            user: string;
            /**
             * @description Amount of WEI unstaked
             * @example 300000000
             */
            amount: string;
            /**
             * @description Id of the event, matching a ShareBurnedWithID
             * @example 1
             */
            nonce: number;
        };
        POLOperationDelegatorClaimedRewards: {
            /**
             * @description Event emitted by a ValidatorShare contract when one of its delegators withdraw its rewards.
             *     This can happen through most interactions with the contract when the delegators has enough rewards.
             * @example delegator_claimed_rewards
             */
            type: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index: number;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string;
            /**
             * @description Index of the validator from which the user claims its rewards
             * @example 1
             */
            validator_id: number;
            /**
             * @description Address claiming its rewards
             * @example 0xa
             */
            user: string;
            /**
             * @description Amount claimed in WEI
             * @example 300000000
             */
            rewards: string;
        };
        POLOperationSharesTransfer: {
            /**
             * @description Event emitted by a ValidatorShare contract when one of its delegators transfers its shares to another address.
             *     This can happen through the transfer method.
             * @example delegator_claimed_rewards
             */
            type: string;
            /**
             * @description Block number containing the transaction
             * @example 15955054
             */
            block: number;
            /**
             * Format: date-time
             * @description Timestamp of the block
             * @example 2023-07-31T13:56:58Z
             */
            time: string;
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash: string;
            /**
             * @description Hash of the transaction
             * @example 1
             */
            tx_index: number;
            /**
             * @description Address of the sender of the transaction
             * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
             */
            tx_sender: string;
            /**
             * @description Name of the contract method executed by the transaction
             * @example buyVoucher
             */
            tx_method_name?: string;
            /**
             * @description Gas used by the transaction in WEI
             * @example 2700999916653262
             */
            tx_gas_used: string;
            /**
             * @description Effective gas price used for this TX in WEI
             * @example 1499997889
             */
            tx_effective_gas_price?: string;
            /**
             * @description Cumulative gas used for this TX in WEI
             * @example 1499997889
             */
            tx_cumulative_gas_used?: string;
            /**
             * @description Index of the validator from which the user claims its rewards
             * @example 1
             */
            validator_id: number;
            /**
             * @description Address transfering the shares
             * @example 0xa
             */
            from: string;
            /**
             * @description Address receiving the shares
             * @example 0xa
             */
            to: string;
            /**
             * @description Amount in WEI
             * @example 300000000
             */
            value: string;
        };
        POLNetworkStats: {
            /**
             * @description POL price in USD
             * @example 0.84
             */
            pol_price_usd: number;
            /**
             * @description Size of Polygon's active set
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Percentage of POL being staked
             * @example 20.4
             */
            supply_staked_percent: number;
            /**
             * @description POL inflation rate
             * @example 2.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-07-31T13:56:58Z
             */
            updated_at: string | null;
        };
        POLPostStakesPayload: {
            stakes: {
                /**
                 * @description Stake ID. Format is {validator_index}_{wallet_address}
                 * @example 1_0x9ce658155a6f05fe4aef83b7fa8f431d5e8ccb55
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        POLCraftApproveTxPayload: {
            /**
             * @description Wallet address to approve
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Contract address that needs approval
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            contract: string;
            /**
             * @description Optional amount to approve in WEI. If not specified, an infinite amount will be approved
             * @example 32000000000000000000
             */
            amount_wei?: string;
        };
        POLUnsignedTx: {
            /**
             * @description Hash of the unsigned transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            unsigned_tx_hash: string;
            /**
             * @description Unsigned serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            unsigned_tx_serialized: string;
            /**
             * @description Contract address of the transaction recipient
             * @example 0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852
             */
            to: string;
            /**
             * @description Hex encoded contract data to be sent with the transaction
             * @example 0xca0bfcce0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000309696c02ec4dbb99f714e26ff1acdf6b258d36dcbad7b8b549553bc99b94ea639cd247f31683564995afd48568c1b6edd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020010000000000000000000000bc86717bad3f8ccf86d2882a6bc351c94580a994000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060a3869da2ed5cc558f016d59fc5ceb0cac28e58743836aa3cf146221f1ef0b959e3cc5c589e05e171f1473596aadf36411767ad92edaae421ba0291bd7568267b3faabc3ab6ed9ddfc048ea6640370977f16f4f626a0e567a11ba25acdc520bb000000000000000000000000000000000000000000000000000000000000000012dd65914dda46639df6344701de54ac3ebe34a4b230262d3017fcd6c29954452
             */
            contract_call_data: string;
            /**
             * @description Amount of POL to send in wei
             * @example 32000000000000000000
             */
            amount_wei: string | null;
            /**
             * @description Nonce of the transaction
             * @example 1
             */
            nonce: number;
            /**
             * @description Gas limit of the transaction in gas units. We provide a default value of two times the estimated gas limit
             * @example 140244
             */
            gas_limit: number;
            /**
             * @description Max priority fee per gas in wei. This is basically the miner fee. We provide a default value of 2 gwei so transactions are mined faster.
             * @example 2000000000
             */
            max_priority_fee_per_gas_wei: string;
            /**
             * @description Max fee per gas in wei. This is the maximum amount of gas that you are willing to pay for the transaction.
             * @example 383687469748
             */
            max_fee_per_gas_wei: string;
            /**
             * @description Chain ID of the network
             * @example 1
             */
            chain_id: number;
        };
        POLCraftBuyVoucherTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet address
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Amount of POL to stake in WEI
             * @example 32000000000000000000
             */
            amount_wei: string;
            /**
             * @description Contract address of the validator share proxy contract
             * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
             */
            validator_share_proxy_address: string;
        };
        POLCraftSellVoucherTxPayload: {
            /**
             * @description Wallet address
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Amount of POL to sell in WEI
             * @example 32000000000000000000
             */
            amount_wei: string;
            /**
             * @description Contract address of the validator share proxy contract
             * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
             */
            validator_share_proxy_address: string;
        };
        POLCraftUnstakeClaimTokensTxPayload: {
            /**
             * @description Wallet address
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Contract address of the validator share proxy contract
             * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
             */
            validator_share_proxy_address: string;
        };
        POLCraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet address
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Contract address of the validator share proxy contract
             * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
             */
            validator_share_proxy_address: string;
        };
        POLCraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet address
             * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
             */
            wallet: string;
            /**
             * @description Contract address of the validator share proxy contract
             * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
             */
            validator_share_proxy_address: string;
        };
        POLPrepareTxPayload: {
            /**
             * @description Unsigned serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            unsigned_tx_serialized: string;
            /**
             * @description r part of the ECDSA signature in hex
             * @example de28e9efee4c8de422a3c64bfaaee11a32f7cf12bdd3f00dcce41a79fe776c65
             */
            r: string;
            /**
             * @description s part of the ECDSA signature in hex
             * @example 3f233eb69495fa4741ad28ef0ba40612bacaf08331fd76041c371f5a2ecc2ab5
             */
            s: string;
            /**
             * @description v part of the ECDSA signature (0 or 1)
             * @example 0
             */
            v: number;
        };
        POLTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error" | "pending_confirmation";
            /**
             * @description Transaction receipt. Object shape can be found [here](https://github.com/web3/web3.js/blob/c5072a35996eb232e2742e92b612c07ba7af98ab/packages/web3-types/src/eth_types.ts#L299)
             * @example {
             *       "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
             *       "blockNumber": 8608123,
             *       "contractAddress": null,
             *       "cumulativeGasUsed": 8180146,
             *       "effectiveGasPrice": 27391741855,
             *       "from": "0x9ce658155a6f05fe4aef83b7fa8f431d5e8ccb55",
             *       "gasUsed": 70098,
             *       "logs": [
             *         {
             *           "address": "0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b",
             *           "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
             *           "blockNumber": 8608123,
             *           "data": "0x00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003093b5ae8053213154d099ed7fc99f571a0c8124601f8a59540335c7c35e0b40aad7b033f84af365185c04812acab257460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000000000009ce658155a6f05fe4aef83b7fa8f431d5e8ccb550000000000000000000000000000000000000000000000000000000000000008004059730700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000609395a07d5e7eb073725049ecba8144d850b7a1a58f603fd1fc12049d32c98db47e3d81608074bca20ccdcc94f7f4767d0d6b852edf4f6231532f33242e64d0617ac93465bc4cdabe9cebf0abe6d169830fcf375b28c0641487e5f86df2875a970000000000000000000000000000000000000000000000000000000000000008ecce030000000000000000000000000000000000000000000000000000000000",
             *           "logIndex": 150,
             *           "removed": false,
             *           "topics": [
             *             "0x649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c5"
             *           ],
             *           "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
             *           "transactionIndex": 33,
             *           "id": "log_4115d183"
             *         },
             *         {
             *           "address": "0x5FaDfdb7eFffd3B4AA03f0F29d9200Cf5F191F31",
             *           "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
             *           "blockNumber": 8608123,
             *           "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000003093b5ae8053213154d099ed7fc99f571a0c8124601f8a59540335c7c35e0b40aad7b033f84af365185c04812acab257460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000000000009ce658155a6f05fe4aef83b7fa8f431d5e8ccb55",
             *           "logIndex": 151,
             *           "removed": false,
             *           "topics": [
             *             "0x737feedde71ce80c08f73125e4350b001be2dfb6a00fb455086c2b0a514cdfac"
             *           ],
             *           "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
             *           "transactionIndex": 33,
             *           "id": "log_b4bb5ff7"
             *         }
             *       ],
             *       "logsBloom": "0x
             *       "status": true,
             *       "to": "0x5fadfdb7efffd3b4aa03f0f29d9200cf5f191f31",
             *       "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
             *       "transactionIndex": 33,
             *       "type": "0x2"
             *     }
             */
            receipt?: Record<string, never>;
        };
        POLSignedTx: {
            /**
             * @description Signed serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            signed_tx_serialized: string;
        };
        POLBroadcastTxPayload: {
            /**
             * @description Signed serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            tx_serialized: string;
        };
        POLBroadcastedTx: {
            /**
             * @description Hash of the transaction
             * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
             */
            tx_hash?: string;
        };
        NEARStake: {
            /**
             * @description Kiln internal stake account ID
             * @example validator.testnet_account.testnet
             */
            stake_account: string;
            /**
             * @description NEAR account ID
             * @example account.testnet
             */
            account: string;
            /**
             * @description NEAR validator ID
             * @example validator.testnet
             */
            validator: string;
            /**
             * @description Current balance in Yocto
             * @example 1000000000
             */
            balance: string;
            /**
             * @description Sum of rewards rewards in Yocto earned by this stake
             * @example 1000000000
             */
            rewards: string;
            /**
             * @description Current unstaked balance in Yocto
             * @example 1000000000
             */
            unstaked_balance: string;
            /**
             * @description Whether the stake can be withdrawn
             * @example true
             */
            can_withdraw: boolean;
            /**
             * Format: date-time
             * @description Timestamp of the block at which the corresponding staking transaction was executed
             * @example 2023-01-14T01:13:59Z
             */
            activated_at: string;
            /**
             * @description Epoch at which the corresponding staking transaction was executed
             * @example 123
             */
            activated_epoch: number;
            /**
             * @description Block at which the corresponding staking transaction was executed
             * @example 123
             */
            activated_block: number;
            /**
             * @description Net annual percentage yield
             * @example 3.407
             */
            net_apy: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        NEAROperation: {
            /**
             * @description Receipt ID
             * @example 5f5tskdja3MP4YajQuvhz9bmvY4CqJsYunVKbPcEUEFw
             */
            receipt_id?: string;
            /**
             * @description Operation type
             * @example unstake, unstake_all, withdraw, withdraw_all, withdraw, stake, stake_all
             */
            type?: string;
            /**
             * Format: date-time
             * @description Date of the block containing the receipt
             * @example 2023-06-22T15:35:01.892644Z
             */
            time?: string;
            /**
             * @description Block containing the receipt
             * @example 15828207
             */
            block?: number;
            /**
             * @description Hash of the transaction containing the receipt
             * @example DvzvJVCsm63RiRo8iEdZUEtTwDty2Wb14yqrUr5v9naa
             */
            tx_hash?: string;
            /**
             * @description Fee paid by the transaction at the origin of the receipt in Yocto
             * @example 17304
             */
            tx_fees?: string;
            /**
             * @description Validator ID
             * @example validator.testnet
             */
            validator?: string;
            /**
             * @description Account ID
             * @example account.testnet
             */
            account?: string;
            /**
             * @description Amount of the operation in Yocto
             * @example 1000000000000000000000000
             */
            amount?: string;
            /**
             * @description Associated epoch
             * @example 3401
             */
            epoch?: number;
        };
        NEARRewardByDay: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in Yocto during the day. The sum of rewards computed on the epochs of that day.
             * @example 1000
             */
            rewards: string;
            /**
             * @description Active balance in Yocto in the block before the last reward computation that occured that day.
             * @example 1000
             */
            active_balance: string;
            /**
             * @description Net annual percentage yield
             * @example 3.407
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            active_balance_usd?: number;
        };
        NEARRewardByEpoch: {
            /**
             * @description Epoch for this reward entry
             * @example 120
             */
            epoch: number;
            /**
             * Format: date-time
             * @description Epoch timestamp for this reward entry
             * @example 2023-01-14T01:13:59Z
             */
            epoch_ts: string;
            /**
             * @description Accumulated rewards in Yocto during the epoch
             * @example 1000
             */
            rewards: string;
            /**
             * @description Active balance in Yocto in the block before rewards computation.
             * @example 1000
             */
            active_balance: string;
            /**
             * @description Net annual percentage yield
             * @example 3.407
             */
            net_apy: number;
        };
        NEARNetworkStats: {
            /**
             * @description NEAR price in USD
             * @example 3.5
             */
            near_price_usd: number;
            /**
             * @description Number of active bakers
             * @example 402
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply percentage of NEAR currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description NEAR inflation rate
             * @example 5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string | null;
        };
        PostNEARStakesPayload: {
            stakes: {
                /**
                 * @description Kiln internal stake account ID
                 * @example validator.testnet_account.testnet
                 */
                stakeAccount?: string;
                /**
                 * @description Kiln organization account ID
                 * @example account
                 */
                account?: string;
                /**
                 * @description Balance to delegate in Yocto
                 * @example 1000000000
                 */
                balance?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        NEARStakeTxPayload: {
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
            /**
             * @description NEAR wallet address
             * @example c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f
             */
            wallet: string;
            /**
             * @description NEAR pool ID
             * @example kiln.pool.f863973.m0
             */
            pool_id: string;
            /**
             * @description Amount to stake in Yocto (1 NEAR = 10^24 Yocto)
             * @example 1000000000000000000000000
             */
            amount_yocto: string;
        };
        NEARUnstakeTxPayload: {
            /**
             * @description NEAR wallet address
             * @example c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f
             */
            wallet: string;
            /**
             * @description NEAR pool ID
             * @example kiln.pool.f863973.m0
             */
            pool_id: string;
            /**
             * @description Amount to unstake in Yocto (1 NEAR = 10^24 Yocto). If not specified, all the stake will be unstaked.
             * @example 1000000000000000000000000
             */
            amount_yocto?: string;
        };
        NEARWithdrawTxPayload: {
            /**
             * @description NEAR wallet address
             * @example c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f
             */
            wallet: string;
            /**
             * @description NEAR pool ID
             * @example kiln.pool.f863973.m0
             */
            pool_id: string;
            /**
             * @description Amount to withdraw in Yocto (1 NEAR = 10^24 Yocto). If not specified, all the stake will be withdrawn.
             * @example 1000000000000000000000000
             */
            amount_yocto?: string;
        };
        NEARPrepareTxPayload: {
            /**
             * @description Unsigned transaction serialized
             * @example 400000006333366231613564613265363064316664356433613662343666373339396562323635373134353766333237326633633937386263393532376164323333356600c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f0cc2dad0ea920000140000006b696c6e2e706f6f6c2e663836333937332e6d3037ce9c68061b12cc551a33496f858157ec5fb1e509179e69acfce58d7245aa6801000000020c00000077697468647261775f616c6c020000007b7d00c06e31d910010000000000000000000000000000000000
             */
            unsigned_tx_serialized: string;
            /**
             * @description Signature of the transaction
             * @example c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f
             */
            signature: string;
        };
        NEARBroadcastTxPayload: {
            /**
             * @description Signed transaction serialized
             * @example 400000006333366231613564613265363064316664356433613662343666373339396562323635373134353766333237326633633937386263393532376164323333356600c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f0cc2dad0ea920000140000006b696c6e2e706f6f6c2e663836333937332e6d3037ce9c68061b12cc551a33496f858157ec5fb1e509179e69acfce58d7245aa6801000000020c00000077697468647261775f616c6c020000007b7d00c06e31d910010
             */
            signed_tx_serialized: string;
        };
        NEARSignedTx: {
            /**
             * @description Signed transaction serialized
             * @example 400000006333366231613564613265363064316664356433613662343666373339396562323635373134353766333237326633633937386263393532376164323333356600c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f0cc2dad0ea920000140000006b696c6e2e706f6f6c2e663836333937332e6d3037ce9c68061b12cc551a33496f858157ec5fb1e509179e69acfce58d7245aa6801000000020c00000077697468647261775f616c6c020000007b7d00c06e31d910010
             */
            signed_tx_serialized: string;
        };
        NEARBroadcastedTx: {
            /**
             * @description Hash of the broadcasted transaction
             * @example c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f
             */
            tx_hash: string;
        };
        NEARTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Object shape can be found [here](https://github.com/near/near-api-js/blob/c49fd67535baa5163b29ca7a43f585bfcfbe16e6/packages/types/src/provider/response.ts#L79)
             * @example {
             *       "final_execution_status": "FINAL",
             *       "receipts_outcome": [
             *         {
             *           "block_hash": "GWvGFZW6yFk2wbcm1nks4BDisSANiRkD1yVQN1FQvwgo",
             *           "id": "EP52R2jvvqz131WZeSjkDL2562eHHaeRABBTKunqAHbx",
             *           "outcome": {
             *             "executor_id": "ognuf.testnet",
             *             "gas_burnt": 1047451194208,
             *             "logs": [],
             *             "metadata": {
             *               "gas_profile": [
             *                 {
             *                   "cost": "BASE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "2647681110"
             *                 },
             *                 {
             *                   "cost": "CONTRACT_LOADING_BASE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "35445963"
             *                 },
             *                 {
             *                   "cost": "CONTRACT_LOADING_BYTES",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "9139185050"
             *                 },
             *                 {
             *                   "cost": "READ_MEMORY_BASE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "5219726400"
             *                 },
             *                 {
             *                   "cost": "READ_MEMORY_BYTE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "7602666"
             *                 },
             *                 {
             *                   "cost": "READ_REGISTER_BASE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "7551495558"
             *                 },
             *                 {
             *                   "cost": "READ_REGISTER_BYTE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "48689628"
             *                 },
             *                 {
             *                   "cost": "STORAGE_HAS_KEY_BASE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "54039896625"
             *                 },
             *                 {
             *                   "cost": "STORAGE_HAS_KEY_BYTE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "30790845"
             *                 },
             *                 {
             *                   "cost": "STORAGE_READ_BASE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "56356845749"
             *                 },
             *                 {
             *                   "cost": "STORAGE_READ_KEY_BYTE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "30952533"
             *                 },
             *                 {
             *                   "cost": "STORAGE_READ_VALUE_BYTE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "72943052"
             *                 },
             *                 {
             *                   "cost": "WASM_INSTRUCTION",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "2919138288"
             *                 },
             *                 {
             *                   "cost": "WRITE_MEMORY_BASE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "8411384583"
             *                 },
             *                 {
             *                   "cost": "WRITE_MEMORY_BYTE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "1345543368"
             *                 },
             *                 {
             *                   "cost": "WRITE_REGISTER_BASE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "8596567458"
             *                 },
             *                 {
             *                   "cost": "WRITE_REGISTER_BYTE",
             *                   "cost_category": "WASM_HOST_COST",
             *                   "gas_used": "1877972616"
             *                 }
             *               ],
             *               "version": 3
             *             },
             *             "receipt_ids": [
             *               "8RzWUcubqXZYvVTjJUTJptx7ggh5DXEMA86J6B3P5odQ"
             *             ],
             *             "status": {
             *               "SuccessValue": ""
             *             },
             *             "tokens_burnt": "104745119420800000000"
             *           },
             *           "proof": [
             *             {
             *               "direction": "Left",
             *               "hash": "2jzRXjWTCVR3ZBhMg4Lg3NzG2BUXxVd5PmazKPxGi5Ri"
             *             },
             *             {
             *               "direction": "Right",
             *               "hash": "8n5m2mMZso44PV696BVFyKSkC8RKqQSuF2QdjQBwKSP1"
             *             }
             *           ]
             *         },
             *         {
             *           "block_hash": "Dp3Ra6eEbWwaVueDUDxGsvU6os2RtKTmMPxbQUF1jccm",
             *           "id": "8RzWUcubqXZYvVTjJUTJptx7ggh5DXEMA86J6B3P5odQ",
             *           "outcome": {
             *             "executor_id": "ognuf.testnet",
             *             "gas_burnt": 223182562500,
             *             "logs": [],
             *             "metadata": {
             *               "gas_profile": [],
             *               "version": 3
             *             },
             *             "receipt_ids": [],
             *             "status": {
             *               "SuccessValue": ""
             *             },
             *             "tokens_burnt": "0"
             *           },
             *           "proof": [
             *             {
             *               "direction": "Right",
             *               "hash": "F6EbMPDCmbCQcETysyY64SP6wWn9PeiVXd7UvYgL41Ws"
             *             }
             *           ]
             *         }
             *       ],
             *       "status": {
             *         "SuccessValue": ""
             *       },
             *       "transaction": {
             *         "actions": [
             *           {
             *             "FunctionCall": {
             *               "args": "AQEBAAAAygEAAArFAwqCAgoCCAsQ4qcDGLPbz7C3u76AGCIg7c4UiAafMSjANXcZnXF+qiYsZ8T13WsVlZb4zljSyTQqIPBf\\/7yKE9GX9+RWD9lgD58gGs1I\\/Lks9hDpOFlbflBHMiBuNAuc\\/7N6mJylROa7eAoseJAdP7M3OHaFEaMGF6+gHTogAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCIN6zZHR5a8o1BmGlOOQHhQwNmSuCwwBl\\/Nf861pRpRwZUhSrbPuuNT\\/OdRZRpiGGh1dGWu5LelogmaPcCwS114x7FyVESiXxEtoO6Nv1n4YkGXn8bV44jJ5iDG1pbml0aWEtdGVzdBJAPp\\/i5lZVxvHHoT5uLn3J+0qYJIhP9Wvf+PnO09c8GetU1ipLI1MrDFVHkcPDQmywTTb7e+hOCBeiKlaEB5nrBxp8CjwKFKts+641P851FlGmIYaHV0Za7kt6EiIKIAQUikAhf8C3GBlyykKRuZGB8EkIICrh77u8L7e1IZfCGAESPAoUq2z7rjU\\/znUWUaYhhodXRlruS3oSIgogBBSKQCF\\/wLcYGXLKQpG5kYHwSQggKuHvu7wvt7Uhl8IYARIA",
             *               "deposit": "0",
             *               "gas": 20000000000000,
             *               "method_name": "submit"
             *             }
             *           }
             *         ],
             *         "hash": "3SjLFkpdymyyF4asqkBaRStoJCVxc72ovZkEzFHMCGY5",
             *         "nonce": 175227951646938,
             *         "priority_fee": 0,
             *         "public_key": "ed25519:4m7opXRc5hEpQvUFtseFedtvN6uVKfJtzht428xxtZq1",
             *         "receiver_id": "ognuf.testnet",
             *         "signature": "ed25519:3TpmHAoLNMGXo69XhoP2UtZkWcet9VxKyYJ8iCyY2RdxngcimUfrgSDPrCvakLMTUdChdxwBLJv7RPV5yT9vqt3U",
             *         "signer_id": "ognuf.testnet"
             *       },
             *       "transaction_outcome": {
             *         "block_hash": "GWvGFZW6yFk2wbcm1nks4BDisSANiRkD1yVQN1FQvwgo",
             *         "id": "3SjLFkpdymyyF4asqkBaRStoJCVxc72ovZkEzFHMCGY5",
             *         "outcome": {
             *           "executor_id": "ognuf.testnet",
             *           "gas_burnt": 309119332716,
             *           "logs": [],
             *           "metadata": {
             *             "gas_profile": null,
             *             "version": 1
             *           },
             *           "receipt_ids": [
             *             "EP52R2jvvqz131WZeSjkDL2562eHHaeRABBTKunqAHbx"
             *           ],
             *           "status": {
             *             "SuccessReceiptId": "EP52R2jvvqz131WZeSjkDL2562eHHaeRABBTKunqAHbx"
             *           },
             *           "tokens_burnt": "30911933271600000000"
             *         },
             *         "proof": [
             *           {
             *             "direction": "Right",
             *             "hash": "7y9tJ8nbh3QWT2ASECNtJFx8C1M8ao2bC5JqYv5DK7fm"
             *           },
             *           {
             *             "direction": "Right",
             *             "hash": "8n5m2mMZso44PV696BVFyKSkC8RKqQSuF2QdjQBwKSP1"
             *           }
             *         ]
             *       }
             *     }
             */
            receipt?: Record<string, never>;
        };
        NEARTx: {
            /**
             * @description Unsigned transaction serialized
             * @example 400000006333366231613564613265363064316664356433613662343666373339396562323635373134353766333237326633633937386263393532376164323333356600c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f0cc2dad0ea920000140000006b696c6e2e706f6f6c2e663836333937332e6d3037ce9c68061b12cc551a33496f858157ec5fb1e509179e69acfce58d7245aa6801000000020c00000077697468647261775f616c6c020000007b7d00c06e31d910010000000000000000000000000000000000
             */
            unsigned_tx_serialized: string;
            /**
             * @description Unsigned transaction hash to sign
             * @example c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f
             */
            unsigned_tx_hash: string;
            /**
             * @description Parsed transaction
             * @example {
             *       "signerId": "c36b1a5da2e60d1fd5d3a6b46f7399eb26571457f3272f3c978bc9527ad2335f",
             *       "publicKey": {
             *         "ed25519Key": {
             *           "keyType": 0,
             *           "data": [
             *             195,
             *             107,
             *             26,
             *             93,
             *             162,
             *             230,
             *             13,
             *             31,
             *             213,
             *             211,
             *             166,
             *             180,
             *             111,
             *             115,
             *             153,
             *             235,
             *             38,
             *             87,
             *             20,
             *             87,
             *             243,
             *             39,
             *             47,
             *             60,
             *             151,
             *             139,
             *             201,
             *             82,
             *             122,
             *             210,
             *             51,
             *             95
             *           ]
             *         },
             *         "enum": "ed25519Key"
             *       },
             *       "nonce": "161537224000012",
             *       "receiverId": "kiln.pool.f863973.m0",
             *       "actions": [
             *         {
             *           "functionCall": {
             *             "methodName": "withdraw_all",
             *             "args": {
             *               "type": "Buffer",
             *               "data": [
             *                 123,
             *                 125
             *               ]
             *             },
             *             "gas": "300000000000000",
             *             "deposit": "0"
             *           },
             *           "enum": "functionCall"
             *         }
             *       ],
             *       "blockHash": [
             *         92,
             *         235,
             *         96,
             *         73,
             *         5,
             *         142,
             *         190,
             *         166,
             *         118,
             *         248,
             *         71,
             *         141,
             *         118,
             *         93,
             *         206,
             *         84,
             *         209,
             *         33,
             *         196,
             *         62,
             *         180,
             *         199,
             *         65,
             *         131,
             *         28,
             *         161,
             *         140,
             *         43,
             *         144,
             *         134,
             *         244,
             *         245
             *       ]
             *     }
             */
            tx: Record<string, never>;
        };
        NEAREpochInfos: {
            /**
             * @description Current epoch number
             * @example 3043
             */
            current_epoch: number;
            /**
             * @description Current epoch start timestamp
             * @example 2025-03-07T02:31:59.394Z
             */
            current_epoch_start_ts: string;
            /**
             * @description Current epoch start height
             * @example 141277911
             */
            current_epoch_start_height: number;
            /**
             * @description Next epoch number
             * @example 3044
             */
            next_epoch: number;
            /**
             * @description Next epoch estimated start timestamp
             * @example 2025-03-07T16:10:26.255Z
             */
            next_epoch_estimated_start_ts: string;
            /**
             * @description Next epoch estimated start height
             * @example 141321111
             */
            next_epoch_estimated_start_height: number;
        };
        OSMOStake: {
            /**
             * @description Public key of the validator
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator_address: string;
            /**
             * @description Public key of the delegator
             * @example osmo1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * Format: date-time
             * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 2023-06-16T03:13:23.058547Z
             */
            delegated_at?: string;
            /**
             * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 15739267
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of undelegation for the stake
             * @example 2023-07-14T03:56:13.561156Z
             */
            undelegated_at?: string;
            /**
             * @description Block of undelegation for the stake
             * @example 16126416
             */
            undelegated_block?: number;
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation in uOSMO. Includes currently available rewards not yet withdrawn.
             * @example 735573808534727891000000
             */
            rewards: string;
            /**
             * @description Available rewards in uOSMO that can be withdrawn from this stake
             * @example 36748808534727891000000
             */
            available_rewards: string;
            /**
             * @description Staked balance on this stake in uOSMO
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 5.76
             */
            net_apy: number;
            /**
             * @description State of the Osmosis stake
             * @example active
             * @enum {string}
             */
            state: "active" | "deactivating" | "inactive";
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /** @description permissions related to the stake currently active, ignored if there is no ongoing grants */
            permissions: {
                /**
                 * @description whether the stake is recipient (grantee) or the giver (granter) of the permissions
                 * @example granter
                 */
                source: string;
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
                 * @example Staking.MsgDelegate
                 */
                permission: string;
                /**
                 * Format: date-time
                 * @description Exact time at which the permissions will be revoked
                 * @example 2023-01-10T01:12:34Z
                 */
                expires_at?: string | null;
                /**
                 * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "osmovaloper1xyz",
                 *       "osmovaloper1abc"
                 *     ]
                 */
                allow_list?: string[] | null;
                /**
                 * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "osmovaloper1xyz",
                 *       "osmovaloper1abc"
                 *     ]
                 */
                deny_list?: string[] | null;
            }[];
            /** @description unbondings currently active on the stakes. ignored if no unbondings are returned */
            unbondings: {
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * Format: date-time
                 * @description Exact time at which the unbonding will take effect
                 * @example 2023-01-10T01:12:34Z
                 */
                completion_time: string;
                /**
                 * @description Amount currently associated with the unbonding (slashes included)
                 * @example 129300
                 */
                balance: string;
                /**
                 * @description Amount expected at creation (slashes non-included)
                 * @example 150300
                 */
                initial_balance: string;
            }[];
        };
        PostOSMOStakesPayload: {
            stakes: {
                /**
                 * @description Stake id {validator_address}_{delegator_address}
                 * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy_osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3}
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        OSMOStakeMessage: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.MsgDelegate
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "delegatorAddress": "osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3",
             *       "validatorAddress": "osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy",
             *       "amount": {
             *         "denom": "uosmo",
             *         "amount": "1000000"
             *       }
             *     }
             */
            value?: Record<string, never>;
        };
        OSMOStakeMessageRestake: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.StakeAuthorization
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "allowList": {
             *         "address": [
             *           "osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy"
             *         ]
             *       },
             *       "AuthorizationType": 1
             *     }
             */
            value?: Record<string, never>;
        };
        OSMOStakeUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "uosmo",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description List of messages included in the transaction. The list contains one message for the staking delegation and one more message for rewards restaking in case specified as a parameter (`restake_rewards=true`).
             * @example [
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *         "value": {
             *           "delegatorAddress": "osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3",
             *           "validatorAddress": "osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy",
             *           "amount": {
             *             "denom": "uosmo",
             *             "amount": "1000000"
             *           }
             *         }
             *       },
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.StakeAuthorization",
             *         "allowList": {
             *           "address": [
             *             "osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy"
             *           ]
             *         },
             *         "AuthorizationType": 1
             *       }
             *     ]
             */
            messages: (components["schemas"]["OSMOStakeMessage"] | components["schemas"]["OSMOStakeMessageRestake"])[];
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        OSMOUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Message included in the transaction
             * @example {
             *       "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *       "value": {
             *         "delegatorAddress": "osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3",
             *         "validatorAddress": "osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy",
             *         "amount": {
             *           "denom": "uosmo",
             *           "amount": "1000000"
             *         }
             *       }
             *     }
             */
            message: Record<string, never>;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "uosmo",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        OSMOSignedTx: {
            /**
             * @description Serialized signed transaction in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signed_tx_serialized: string;
        };
        OSMOTxHash: {
            /**
             * @description Hash of the transaction
             * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
             */
            tx_hash: string;
        };
        OSMOPrepareTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Transaction signature serialized in hex
             * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signature: string;
        };
        OSMOBroadcastTxPayload: {
            /**
             * @description Signed transaction serialized in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            tx_serialized: string;
        };
        OSMOTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
             * @example {
             *       "height": 16007296,
             *       "txIndex": 0,
             *       "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
             *       "code": 0,
             *       "events": [
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000uosmo"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "osmo17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000uosmo"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "osmo17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000uosmo"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "fee",
             *               "value": "5000uosmo"
             *             },
             *             {
             *               "key": "fee_payer",
             *               "value": "osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "acc_seq",
             *               "value": "osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "signature",
             *               "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "action",
             *               "value": "/cosmos.staking.v1beta1.MsgDelegate"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "osmo1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5uosmo"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5uosmo"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "osmo1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5uosmo"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "osmo1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "withdraw_rewards",
             *           "attributes": [
             *             {
             *               "key": "amount",
             *               "value": "5uosmo"
             *             },
             *             {
             *               "key": "validator",
             *               "value": "osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000uosmo"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "osmo1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000uosmo"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "delegate",
             *           "attributes": [
             *             {
             *               "key": "validator",
             *               "value": "osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000uosmo"
             *             },
             *             {
             *               "key": "new_shares",
             *               "value": "100000.000000000000000000"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "module",
             *               "value": "staking"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         }
             *       ],
             *       "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5uosmo\"},{\"key\":\"receiver\",\"value\":\"osmo1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000uosmo\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"osmo1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5uosmo\"},{\"key\":\"spender\",\"value\":\"osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000uosmo\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy\"},{\"key\":\"amount\",\"value\":\"100000uosmo\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"osmo1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"osmo19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"osmo1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5uosmo\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5uosmo\"},{\"key\":\"validator\",\"value\":\"osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy\"}]}]}]",
             *       "tx": {
             *         "0": 10,
             *         "1": 160,
             *         "2": 1,
             *         "3": 10,
             *         "4": 157,
             *         "5": 1,
             *         "6": 10,
             *         "7": 35,
             *         "8": 47,
             *         "9": 99,
             *         "10": 111,
             *         "11": 115,
             *         "12": 109,
             *         "13": 111,
             *         "14": 115,
             *         "15": 46,
             *         "16": 115,
             *         "17": 116,
             *         "18": 97,
             *         "19": 107,
             *         "20": 105,
             *         "21": 110,
             *         "22": 103,
             *         "23": 46,
             *         "24": 118,
             *         "25": 49,
             *         "26": 98,
             *         "27": 101,
             *         "28": 116,
             *         "29": 97,
             *         "30": 49,
             *         "31": 46,
             *         "32": 77,
             *         "33": 115,
             *         "34": 103,
             *         "35": 68,
             *         "36": 101,
             *         "37": 108,
             *         "38": 101,
             *         "39": 103,
             *         "40": 97,
             *         "41": 116,
             *         "42": 101,
             *         "43": 18,
             *         "44": 118,
             *         "45": 10,
             *         "46": 45,
             *         "47": 99,
             *         "48": 111,
             *         "49": 115,
             *         "50": 109,
             *         "51": 111,
             *         "52": 115,
             *         "53": 49,
             *         "54": 57,
             *         "55": 99,
             *         "56": 57,
             *         "57": 102,
             *         "58": 100,
             *         "59": 104,
             *         "60": 52,
             *         "61": 56,
             *         "62": 56,
             *         "63": 118,
             *         "64": 113,
             *         "65": 106,
             *         "66": 99,
             *         "67": 108,
             *         "68": 108,
             *         "69": 116,
             *         "70": 119,
             *         "71": 112,
             *         "72": 54,
             *         "73": 56,
             *         "74": 106,
             *         "75": 109,
             *         "76": 53,
             *         "77": 48,
             *         "78": 121,
             *         "79": 100,
             *         "80": 119,
             *         "81": 121,
             *         "82": 104,
             *         "83": 51,
             *         "84": 54,
             *         "85": 106,
             *         "86": 113,
             *         "87": 101,
             *         "88": 97,
             *         "89": 116,
             *         "90": 101,
             *         "91": 118,
             *         "92": 18,
             *         "93": 52,
             *         "94": 99,
             *         "95": 111,
             *         "96": 115,
             *         "97": 109,
             *         "98": 111,
             *         "99": 115,
             *         "100": 118,
             *         "101": 97,
             *         "102": 108,
             *         "103": 111,
             *         "104": 112,
             *         "105": 101,
             *         "106": 114,
             *         "107": 49,
             *         "108": 54,
             *         "109": 121,
             *         "110": 115,
             *         "111": 48,
             *         "112": 101,
             *         "113": 103,
             *         "114": 57,
             *         "115": 51,
             *         "116": 53,
             *         "117": 109,
             *         "118": 107,
             *         "119": 113,
             *         "120": 112,
             *         "121": 107,
             *         "122": 121,
             *         "123": 100,
             *         "124": 107,
             *         "125": 103,
             *         "126": 102,
             *         "127": 99,
             *         "128": 106,
             *         "129": 57,
             *         "130": 97,
             *         "131": 103,
             *         "132": 101,
             *         "133": 50,
             *         "134": 97,
             *         "135": 117,
             *         "136": 56,
             *         "137": 108,
             *         "138": 57,
             *         "139": 54,
             *         "140": 110,
             *         "141": 97,
             *         "142": 101,
             *         "143": 114,
             *         "144": 101,
             *         "145": 57,
             *         "146": 26,
             *         "147": 15,
             *         "148": 10,
             *         "149": 5,
             *         "150": 117,
             *         "151": 97,
             *         "152": 116,
             *         "153": 111,
             *         "154": 109,
             *         "155": 18,
             *         "156": 6,
             *         "157": 49,
             *         "158": 48,
             *         "159": 48,
             *         "160": 48,
             *         "161": 48,
             *         "162": 48,
             *         "163": 18,
             *         "164": 103,
             *         "165": 10,
             *         "166": 80,
             *         "167": 10,
             *         "168": 70,
             *         "169": 10,
             *         "170": 31,
             *         "171": 47,
             *         "172": 99,
             *         "173": 111,
             *         "174": 115,
             *         "175": 109,
             *         "176": 111,
             *         "177": 115,
             *         "178": 46,
             *         "179": 99,
             *         "180": 114,
             *         "181": 121,
             *         "182": 112,
             *         "183": 116,
             *         "184": 111,
             *         "185": 46,
             *         "186": 115,
             *         "187": 101,
             *         "188": 99,
             *         "189": 112,
             *         "190": 50,
             *         "191": 53,
             *         "192": 54,
             *         "193": 107,
             *         "194": 49,
             *         "195": 46,
             *         "196": 80,
             *         "197": 117,
             *         "198": 98,
             *         "199": 75,
             *         "200": 101,
             *         "201": 121,
             *         "202": 18,
             *         "203": 35,
             *         "204": 10,
             *         "205": 33,
             *         "206": 3,
             *         "207": 156,
             *         "208": 228,
             *         "209": 123,
             *         "210": 42,
             *         "211": 129,
             *         "212": 61,
             *         "213": 19,
             *         "214": 135,
             *         "215": 97,
             *         "216": 49,
             *         "217": 169,
             *         "218": 195,
             *         "219": 190,
             *         "220": 119,
             *         "221": 232,
             *         "222": 196,
             *         "223": 175,
             *         "224": 164,
             *         "225": 158,
             *         "226": 148,
             *         "227": 135,
             *         "228": 68,
             *         "229": 171,
             *         "230": 190,
             *         "231": 225,
             *         "232": 31,
             *         "233": 147,
             *         "234": 158,
             *         "235": 42,
             *         "236": 66,
             *         "237": 15,
             *         "238": 70,
             *         "239": 18,
             *         "240": 4,
             *         "241": 10,
             *         "242": 2,
             *         "243": 8,
             *         "244": 1,
             *         "245": 24,
             *         "246": 33,
             *         "247": 18,
             *         "248": 19,
             *         "249": 10,
             *         "250": 13,
             *         "251": 10,
             *         "252": 5,
             *         "253": 117,
             *         "254": 97,
             *         "255": 116,
             *         "256": 111,
             *         "257": 109,
             *         "258": 18,
             *         "259": 4,
             *         "260": 53,
             *         "261": 48,
             *         "262": 48,
             *         "263": 48,
             *         "264": 16,
             *         "265": 224,
             *         "266": 167,
             *         "267": 18,
             *         "268": 26,
             *         "269": 64,
             *         "270": 25,
             *         "271": 31,
             *         "272": 135,
             *         "273": 165,
             *         "274": 77,
             *         "275": 206,
             *         "276": 175,
             *         "277": 182,
             *         "278": 171,
             *         "279": 154,
             *         "280": 95,
             *         "281": 17,
             *         "282": 42,
             *         "283": 19,
             *         "284": 68,
             *         "285": 76,
             *         "286": 163,
             *         "287": 126,
             *         "288": 73,
             *         "289": 160,
             *         "290": 41,
             *         "291": 229,
             *         "292": 49,
             *         "293": 187,
             *         "294": 33,
             *         "295": 48,
             *         "296": 31,
             *         "297": 215,
             *         "298": 46,
             *         "299": 157,
             *         "300": 57,
             *         "301": 3,
             *         "302": 4,
             *         "303": 199,
             *         "304": 99,
             *         "305": 204,
             *         "306": 165,
             *         "307": 169,
             *         "308": 118,
             *         "309": 10,
             *         "310": 99,
             *         "311": 29,
             *         "312": 200,
             *         "313": 87,
             *         "314": 5,
             *         "315": 221,
             *         "316": 107,
             *         "317": 8,
             *         "318": 181,
             *         "319": 15,
             *         "320": 95,
             *         "321": 255,
             *         "322": 125,
             *         "323": 93,
             *         "324": 232,
             *         "325": 215,
             *         "326": 59,
             *         "327": 44,
             *         "328": 235,
             *         "329": 209,
             *         "330": 244,
             *         "331": 195,
             *         "332": 182,
             *         "333": 160
             *       },
             *       "gasUsed": 167798,
             *       "gasWanted": 300000
             *     }
             */
            receipt?: Record<string, never>;
        };
        OSMOCraftUnstakeTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator: string;
            /**
             * @description Amount to unstake in uOSMO. Omit to unstake all the delegated amount
             * @example 1000000000000000000000000
             */
            amount_uosmo?: string;
        };
        OSMOCraftRedelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to which the new stake will be linked
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator source address of current stake
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator_source: string;
            /**
             * @description Validator destination address to which redelegate the stake
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator_destination: string;
            /**
             * @description Amount to redelegate in uOSMO
             * @example 1000000000000000000000000
             */
            amount_uosmo?: string;
        };
        OSMOCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator: string;
            /**
             * @description Amount to stake in uosmo
             * @example 1000000000000000000000000
             */
            amount_uosmo: string;
            /**
             * @description If enabled, the rewards will be automatically restaked
             * @default false
             */
            restake_rewards: boolean;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address?: string;
        };
        OSMOCraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator_address: string;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address: string;
        };
        OSMOCraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator: string;
        };
        OSMOReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in uOSMO during the day
             * @example 3575891083876864200000
             */
            rewards: string;
            /**
             * @description Staked balance in uOSMO at the end of the day
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield
             * @example 20.76
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            balance_usd?: number;
        };
        OSMOOperationDelegate: {
            /**
             * @description Operation type
             * @example staking.MsgDelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOSMO
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3
             */
            delegator_address: string;
            /**
             * @description Amount added to the staked balance in uOSMO
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uOSMO
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        OSMOOperationUndelegate: {
            /**
             * @description Operation type
             * @example staking.MsgUndelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOSMO
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3
             */
            delegator_address: string;
            /**
             * @description Amount removed from the staked balance in uOSMO
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uOSMO
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        OSMOOperationRedelegate: {
            /**
             * @description Operation type
             * @example staking.MsgBeginRedelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOSMO
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Destination validator address
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator_address: string;
            /**
             * @description Source validator address
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator_address_source?: string;
            /**
             * @description Delegator address
             * @example osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3
             */
            delegator_address: string;
            /**
             * @description Amount moved from the source validator staked balance to the destination validator staked balance in uOSMO
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed from the destination validator alongside the operation in uOSMO
             * @example 10841
             */
            withdraw_rewards?: string;
            /**
             * @description Rewards auto-claimed from the source validator alongside the operation in uOSMO
             * @example 10841
             */
            withdraw_rewards_source?: string;
        };
        OSMOOperationWithdrawRewards: {
            /**
             * @description Operation type
             * @example distr.MsgWithdrawDelegatorReward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOSMO
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3
             */
            delegator_address: string;
            /**
             * @description Rewards claimed alongside the operation in uOSMO
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        OSMOOperationGrant: {
            /**
             * @description Operation type
             * @example Authz.Grant
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOSMO
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Recipient of the permissions
             * @example osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3
             */
            grantee?: string;
            /**
             * @description Owner of the stake giving the permissions
             * @example osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3
             */
            granter?: string;
            /**
             * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
             * @example Staking.MsgDelegate
             */
            permission?: string;
            /**
             * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
             * @example [
             *       "osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3",
             *       "osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3"
             *     ]
             */
            allow_list?: string[] | null;
            /**
             * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
             * @example [
             *       "osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3",
             *       "osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3"
             *     ]
             */
            deny_list?: string[] | null;
        };
        OSMOOperationExec: {
            /**
             * @description Operation type
             * @example Authz.Exec
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOSMO
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uOSMO
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uOSMO
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uOSMO
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        OSMOOperationContract: {
            /**
             * @description Contract type
             * @example wasm.Contract
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uOSMO
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description address of the contract been called
             * @example osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3
             */
            contract: string;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example osmovaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7rq8p8gy
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example osmo1lnc548nmxqukrvd9czw4tq5vn6kapndg2hzhr3
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uOSMO
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uOSMO
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uOSMO
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        OSMONetworkStats: {
            /**
             * @description Price of Osmosis in USD
             * @example 10.53
             */
            osmo_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Osmosis currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Osmosis inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        /**
         * @description Decoded transaction
         * @example {
         *       "authInfo": {
         *         "signerInfos": [
         *           {
         *             "publicKey": {
         *               "typeUrl": "/cosmos.crypto.secp256k1.PubKey",
         *               "value": {
         *                 "0": 10,
         *                 "1": 33,
         *                 "2": 3,
         *                 "3": 156,
         *                 "4": 228,
         *                 "5": 123,
         *                 "6": 42,
         *                 "7": 129,
         *                 "8": 61,
         *                 "9": 19,
         *                 "10": 135,
         *                 "11": 97,
         *                 "12": 49,
         *                 "13": 169,
         *                 "14": 195,
         *                 "15": 190,
         *                 "16": 119,
         *                 "17": 232,
         *                 "18": 196,
         *                 "19": 175,
         *                 "20": 164,
         *                 "21": 158,
         *                 "22": 148,
         *                 "23": 135,
         *                 "24": 68,
         *                 "25": 171,
         *                 "26": 190,
         *                 "27": 225,
         *                 "28": 31,
         *                 "29": 147,
         *                 "30": 158,
         *                 "31": 42,
         *                 "32": 66,
         *                 "33": 15,
         *                 "34": 70
         *               }
         *             },
         *             "modeInfo": {
         *               "single": {
         *                 "mode": 1
         *               }
         *             },
         *             "sequence": {
         *               "low": 102,
         *               "high": 0,
         *               "unsigned": true
         *             }
         *           }
         *         ],
         *         "fee": {
         *           "amount": [
         *             {
         *               "denom": "uosmo",
         *               "amount": "5000"
         *             }
         *           ],
         *           "gasLimit": {
         *             "low": 2000000,
         *             "high": 0,
         *             "unsigned": true
         *           },
         *           "payer": "",
         *           "granter": ""
         *         }
         *       },
         *       "body": {
         *         "messages": [
         *           {
         *             "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
         *             "value": {
         *               "0": 10,
         *               "1": 45,
         *               "2": 99,
         *               "3": 111,
         *               "4": 115,
         *               "5": 109,
         *               "6": 111,
         *               "7": 115,
         *               "8": 49,
         *               "9": 57,
         *               "10": 99,
         *               "11": 57,
         *               "12": 102,
         *               "13": 100,
         *               "14": 104,
         *               "15": 52,
         *               "16": 56,
         *               "17": 56,
         *               "18": 118,
         *               "19": 113,
         *               "20": 106,
         *               "21": 99,
         *               "22": 108,
         *               "23": 108,
         *               "24": 116,
         *               "25": 119,
         *               "26": 112,
         *               "27": 54,
         *               "28": 56,
         *               "29": 106,
         *               "30": 109,
         *               "31": 53,
         *               "32": 48,
         *               "33": 121,
         *               "34": 100,
         *               "35": 119,
         *               "36": 121,
         *               "37": 104,
         *               "38": 51,
         *               "39": 54,
         *               "40": 106,
         *               "41": 113,
         *               "42": 101,
         *               "43": 97,
         *               "44": 116,
         *               "45": 101,
         *               "46": 118,
         *               "47": 18,
         *               "48": 52,
         *               "49": 99,
         *               "50": 111,
         *               "51": 115,
         *               "52": 109,
         *               "53": 111,
         *               "54": 115,
         *               "55": 118,
         *               "56": 97,
         *               "57": 108,
         *               "58": 111,
         *               "59": 112,
         *               "60": 101,
         *               "61": 114,
         *               "62": 49,
         *               "63": 54,
         *               "64": 121,
         *               "65": 115,
         *               "66": 48,
         *               "67": 101,
         *               "68": 103,
         *               "69": 57,
         *               "70": 51,
         *               "71": 53,
         *               "72": 109,
         *               "73": 107,
         *               "74": 113,
         *               "75": 112,
         *               "76": 107,
         *               "77": 121,
         *               "78": 100,
         *               "79": 107,
         *               "80": 103,
         *               "81": 102,
         *               "82": 99,
         *               "83": 106,
         *               "84": 57,
         *               "85": 97,
         *               "86": 103,
         *               "87": 101,
         *               "88": 50,
         *               "89": 97,
         *               "90": 117,
         *               "91": 56,
         *               "92": 108,
         *               "93": 57,
         *               "94": 54,
         *               "95": 110,
         *               "96": 97,
         *               "97": 101,
         *               "98": 114,
         *               "99": 101,
         *               "100": 57,
         *               "101": 26,
         *               "102": 16,
         *               "103": 10,
         *               "104": 5,
         *               "105": 117,
         *               "106": 97,
         *               "107": 116,
         *               "108": 111,
         *               "109": 109,
         *               "110": 18,
         *               "111": 7,
         *               "112": 49,
         *               "113": 48,
         *               "114": 48,
         *               "115": 48,
         *               "116": 48,
         *               "117": 48,
         *               "118": 48
         *             }
         *           }
         *         ],
         *         "memo": "",
         *         "timeoutHeight": {
         *           "low": 0,
         *           "high": 0,
         *           "unsigned": true
         *         },
         *         "extensionOptions": [],
         *         "nonCriticalExtensionOptions": []
         *       },
         *       "signatures": [
         *         {
         *           "0": 116,
         *           "1": 104,
         *           "2": 101,
         *           "3": 116,
         *           "4": 97,
         *           "5": 45,
         *           "6": 116,
         *           "7": 101,
         *           "8": 115,
         *           "9": 116,
         *           "10": 110,
         *           "11": 101,
         *           "12": 116,
         *           "13": 45,
         *           "14": 48,
         *           "15": 48,
         *           "16": 49
         *         }
         *       ]
         *     }
         */
        OSMOTxDecoding: Record<string, never>;
        OSMOCraftSendTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Recipient address
             * @example osmo1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            to: string;
            /**
             * @description Amount to send in uosmo
             * @example 1000000000000000000000000
             */
            amount_uosmo: string;
        };
        EGLDStake: {
            /**
             * @description Wallet address of the delegator
             * @example erd12mu6jt25v8cqvknug5yxqul8cgmnxf9t3kh7sa2ycphm29kqrlts552srv
             */
            wallet: string;
            /**
             * @description Contract address of the validator
             * @example erd1qqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrhlllls062tu4
             */
            validator: string;
            /**
             * @description State of the MultiversX stake
             * @example ACTIVE
             * @enum {string}
             */
            state: "ACTIVATING" | "ACTIVE" | "INACTIVE";
            /**
             * Format: date-time
             * @description Date at which the staking transaction was made, corresponds to the block it was part of.
             * @example 2023-01-14T01:13:59Z
             */
            delegated_at: string;
            /**
             * @description Epoch in which the delegation transaction was made
             * @example 1105
             */
            delegated_epoch: number;
            /**
             * Format: date-time
             * @description Block time at which the undelegation transaction was made
             * @example 2023-01-14T01:13:59Z
             */
            undelegated_at?: string;
            /**
             * @description Epoch in which the unstaking transaction was made, corresponds to the block it was part of.
             * @example 1105
             */
            undelegated_epoch?: number;
            /**
             * @description Current active balance earning rewards
             * @example 32076187808000000000
             */
            balance: string;
            /**
             * @description Sum of rewards earned by this stake since delegation
             * @example 76187808000000000
             */
            rewards: string;
            /**
             * @description Gross annual reward rate
             * @example 0.03407
             */
            grr: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        EGLDRewards: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Rewards earned for that day
             * @example 27098488
             */
            rewards: string;
            /**
             * @description Wallet balance for that day
             * @example 420000000000
             */
            active_balance: string;
            /**
             * @description Gross annual reward rate
             * @example 0.0342
             */
            grr: number;
            /**
             * @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko.
             * @example 2344.36
             */
            rewards_usd?: number;
            /**
             * @description Estimated value of the active balance of that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko.
             * @example 4407596.22
             */
            active_balance_usd?: number;
        };
        EGLDOperations: {
            /**
             * @description Wallet address of the sender
             * @example erd1exqua32r233fwsxv074dhmp5yw4nz3xnn2kkdayp2wg566janpeqhdayjd
             */
            sender: string;
            /**
             * @description Wallet address of the receiver
             * @example erd1qqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrhlllls062tu4
             */
            receiver: string;
            /**
             * @description Transaction hash
             * @example c03a95f5d9d3c8d6a99c0a22faf78f246b3da6a1d564e52c184b38e735de95a1
             */
            tx_hash: string;
            /**
             * Format: date-time
             * @description Transaction timestamp
             * @example 2024-03-29T11:55:18Z
             */
            tx_timestamp: string;
            /**
             * @description Amount of the operation when applicable
             * @example 1120594360000000001
             */
            amount?: string;
            /**
             * @description Gas used for the operation
             * @example 6062000
             */
            gas_used: string;
            /**
             * @description Type of the operation. i.e. delegate, undelegate, claimRewards, etc.
             * @example delegate
             * @enum {string}
             */
            type: "addNodes" | "changeOwner" | "changeServiceFee" | "getAllNodeStates" | "modifyTotalDelegationCap" | "removeNodes" | "reStakeUnStakedNodes" | "setAutomaticActivation" | "setCheckCapOnReDelegateRewards" | "setMetaData" | "stakeNodes" | "synchronizeOwner" | "unBondNodes" | "unJailNodes" | "delegate" | "unStakeNodes" | "whitelistForMerge" | "unDelegate" | "claimRewards" | "reDelegateRewards" | "reward" | "withdraw";
        };
        EgldNetworkStats: {
            /**
             * @description MutiversX price in USD
             * @example 3.5
             */
            egld_price_usd: number;
            /**
             * @description Number of active validators
             * @example 402
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply percentage of EGLD currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description MutiversX inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string | null;
        };
        DOTStake: {
            /**
             * @description The stake address
             * @example 1nXBtBPt3PV35m7Dfgp32xXgrC9tm1Pw7Hk7MDuGAejvB7J
             */
            address: string;
            /**
             * @description The pool id associated to the stake address. If set to 0, the stake is not associated to any pool.
             * @example 118
             */
            pool_id?: number;
            /**
             * @description Current stake balance in Planck
             * @example 30004690613
             */
            active_balance: string;
            /**
             * @description Current unbonding balance in Planck. Only available for pool members.
             * @example 30004690613
             */
            unbonding_balance: string;
            /**
             * @description Current withdrawable balance in Planck. Only available for pool members.
             * @example 30004690613
             */
            withdrawable_balance: string;
            /**
             * @description Total stake rewards in Planck
             * @example 37201548
             */
            net_rewards: string;
            /**
             * @description Total gross rewards in Planck. Only available for kiln pool members. Default to 0.
             * @example 37201548
             */
            gross_rewards: string;
            /**
             * @description Total withdrawable rewards in Planck. Only available for pool members. Total of rewards that can be claimed from the pool.
             * @example 37201548
             */
            withdrawable_rewards: string;
            /**
             * @description State of the stake
             * @example active
             * @enum {string}
             */
            state: "active" | "inactive";
            /**
             * @description Annual percentage yield
             * @example 0.188014
             */
            net_apy: number;
            /**
             * Format: date-time
             * @description Date of the fist delegation
             * @example 2023-01-06T22:00:00Z
             */
            delegated_at?: string;
            /**
             * Format: date-time
             * @description Last date the stake made a bonding operation (bond/unbond)
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /**
             * Format: date-time
             * @description Date of the last undelegation
             * @example 2023-01-06T22:00:00Z
             */
            undelegated_at?: string;
        };
        DOTRewardByEra: {
            /**
             * @description Net reward amount in Plancks. This can be verified on chain in an explorer.
             * @example 1000000
             */
            net_rewards: string;
            /**
             * @description Gross reward amount in Plancks. This is the amount generated before validator fees. Only available for kiln validator's nominators. Default to 0 if not available.
             * @example 1000000
             */
            gross_rewards: string;
            /**
             * @description Era at which the reward was earned.
             * @example 1471
             */
            era: number;
            /**
             * @description Stake balance in Plancks at the time of reward.
             * @example 1000000
             */
            active_balance: string;
            /**
             * @description Annual percentage yield projected at the time of reward.
             * @example 3.05
             */
            net_apy: number;
            /**
             * @description Stake balance in USD at the time of reward.
             * @example 0.0001
             */
            active_balance_usd?: number;
            /**
             * @description Net reward amount in USD. This can be verified on chain in an explorer.
             * @example 0.0001
             */
            net_rewards_usd?: number;
            /**
             * @description Gross reward amount in USD. This is the amount generated before validator fees. Only available for kiln validator's nominators. Default to 0 if not available.
             * @example 0.0001
             */
            gross_rewards_usd?: number;
        };
        DOTRewardByDay: {
            /**
             * @description Net reward amount in Plancks. This can be verified on chain in an explorer.
             * @example 1000000
             */
            net_rewards: string;
            /**
             * @description Gross reward amount in Plancks. This is the amount generated before validator fees. Only available for kiln validator's nominators. Default to 0 if not available.
             * @example 1000000
             */
            gross_rewards: string;
            /**
             * @description Date at which the reward was earned.
             * @example 2023-01-06
             */
            date: string;
            /**
             * @description Stake balance in Plancks at the time of reward.
             * @example 1000000
             */
            active_balance: string;
            /**
             * @description Annual percentage yield projected at the time of reward minus validator fees.
             * @example 3.05
             */
            net_apy: number;
            /**
             * @description Annual percentage yield projected at the time of reward before validator fees. Only available for kiln validator's nominators. Default to 0 if not available.
             * @example 3.05
             */
            gross_apy: number;
            /**
             * @description Stake balance in USD at the time of reward.
             * @example 0.0001
             */
            active_balance_usd?: number;
            /**
             * @description Net reward amount in USD. This can be verified on chain in an explorer.
             * @example 0.0001
             */
            net_rewards_usd?: number;
            /**
             * @description Gross reward amount in USD. This is the amount generated before validator fees. Only available for kiln validator's nominators. Default to 0 if not available.
             * @example 0.0001
             */
            gross_rewards_usd?: number;
        };
        DOTOperationStaking: {
            /**
             * @description The operation type
             * @example staking.bonded
             */
            type: string;
            /**
             * @description Block number of the event
             * @example 15828207
             */
            block_number: number;
            /**
             * Format: date-time
             * @description Block timestamp of the event
             * @example 2023-06-22T15:35:01.892644Z
             */
            block_time: string;
            /**
             * @description Hash of the transaction. Also named extrinsinc_hash.
             * @example 0xf476bc1b633528a2cfbb1c959755318bed1c6825d7bb6b89d7ffc1026066f17c
             */
            tx_hash: string;
            /**
             * @description Extrinsic sequence id of the event
             * @example 4
             */
            extrinsic_seq_id: number;
            /**
             * @description Event sequence id of the event
             * @example 42
             */
            event_seq_id: number;
            /**
             * @description Amount added or removed from the staked balance in Planck
             * @example 3000000
             */
            amount: string;
            /**
             * @description Address that originated the operation
             * @example 13UVJyLnbVp8c4FQeiGL1CZxAHdBYCemjgkAyN8AcRcDJtNr
             */
            address: string;
            /**
             * @description Validator address
             * @example 1497QNdycmxqMi3VJDxZDhaJh4s9tytr5RFWyrLcNse2xqPD
             */
            validator?: string;
            /**
             * @description Pool id associated. Only available for pool members
             * @example 118
             */
            pool_id?: number;
            /**
             * @description Era at which the reward was earned. Only available for nominators rewards (solo or pool).
             * @example 1403
             */
            earned_era?: number;
            /**
             * @description Era at which the operation was executed. Only available for rewards.
             * @example 1404
             */
            era?: number;
        };
        DOTNetworkStats: {
            /**
             * @description Polkadot price in USD
             * @example 3.5
             */
            dot_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Polkadot currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Polkadot inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        DOTSignedTx: {
            /**
             * @description Signed serialized transaction
             * @example 0xc1018400373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00ce178c21ced7677c58ebfb93496dd0a305581bfead9d1e1d7834dd8448dd81612a24548a8650650bb75747b5bfd5fc9373903cacf81bfabed7ae05e53dd5ae0fc5001901000601070010a5d4e8
             */
            signed_tx_serialized: string;
        };
        DOTBroadcastTxPayload: {
            /**
             * @description Signed serialized transaction
             * @example 0xc1018400373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00ce178c21ced7677c58ebfb93496dd0a305581bfead9d1e1d7834dd8448dd81612a24548a8650650bb75747b5bfd5fc9373903cacf81bfabed7ae05e53dd5ae0fc5001901000601070010a5d4e8
             */
            tx_serialized: string;
        };
        DOTBroadcastedTx: {
            /**
             * @description Hash of the transaction
             * @example 0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c
             */
            tx_hash: string;
        };
        DOTTxStatus: {
            /**
             * @description Request status code
             * @example 0
             */
            code?: number;
            /**
             * @description Request status message
             * @example Success
             */
            message?: string;
            /**
             * @description Timestamp at which the request was generated
             * @example 1697471079
             */
            generated_at?: number;
            /**
             * @description Transaction data
             * @example {
             *       "block_timestamp": 1697211912,
             *       "block_num": 17860727,
             *       "extrinsic_index": "17860727-2",
             *       "call_module_function": "join",
             *       "call_module": "nominationpools",
             *       "account_id": "5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj",
             *       "signature": "0x3e80f71312c759ebffeea594f48c0f66cd276e821b37496bef98ef760ee58a6c6289a9656c32a3f23146cdf6d07f9ef9d046c669570d4e4e778b87de43106b06",
             *       "nonce": 80,
             *       "extrinsic_hash": "0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c",
             *       "success": false,
             *       "params": [
             *         {
             *           "name": "amount",
             *           "type": "compact<U128>",
             *           "type_name": "BalanceOf",
             *           "value": "100000000000"
             *         },
             *         {
             *           "name": "pool_id",
             *           "type": "U32",
             *           "type_name": "PoolId",
             *           "value": 1
             *         }
             *       ],
             *       "transfer": null,
             *       "event": [
             *         {
             *           "event_index": "17860727-2",
             *           "block_num": 17860727,
             *           "extrinsic_idx": 2,
             *           "module_id": "balances",
             *           "event_id": "Withdraw",
             *           "params": "[{\"type\":\"[U8; 32]\",\"type_name\":\"AccountId\",\"value\":\"0x373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e\",\"name\":\"who\"},{\"type\":\"U128\",\"type_name\":\"Balance\",\"value\":\"14717944072\",\"name\":\"amount\"}]",
             *           "phase": 0,
             *           "event_idx": 5,
             *           "extrinsic_hash": "0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c",
             *           "finalized": true,
             *           "block_timestamp": 0
             *         },
             *         {
             *           "event_index": "17860727-2",
             *           "block_num": 17860727,
             *           "extrinsic_idx": 2,
             *           "module_id": "balances",
             *           "event_id": "Deposit",
             *           "params": "[{\"type\":\"[U8; 32]\",\"type_name\":\"AccountId\",\"value\":\"0x767f36484b1e2acf5c265c7a64bfb46e95259c66a8189bbcd216195def436852\",\"name\":\"who\"},{\"type\":\"U128\",\"type_name\":\"Balance\",\"value\":\"14717944072\",\"name\":\"amount\"}]",
             *           "phase": 0,
             *           "event_idx": 6,
             *           "extrinsic_hash": "0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c",
             *           "finalized": true,
             *           "block_timestamp": 0
             *         },
             *         {
             *           "event_index": "17860727-2",
             *           "block_num": 17860727,
             *           "extrinsic_idx": 2,
             *           "module_id": "transactionpayment",
             *           "event_id": "TransactionFeePaid",
             *           "params": "[{\"type\":\"[U8; 32]\",\"type_name\":\"AccountId\",\"value\":\"0x373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e\",\"name\":\"who\"},{\"type\":\"U128\",\"type_name\":\"BalanceOf\",\"value\":\"14717944072\",\"name\":\"actual_fee\"},{\"type\":\"U128\",\"type_name\":\"BalanceOf\",\"value\":\"0\",\"name\":\"tip\"}]",
             *           "phase": 0,
             *           "event_idx": 7,
             *           "extrinsic_hash": "0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c",
             *           "finalized": true,
             *           "block_timestamp": 0
             *         },
             *         {
             *           "event_index": "17860727-2",
             *           "block_num": 17860727,
             *           "extrinsic_idx": 2,
             *           "module_id": "system",
             *           "event_id": "ExtrinsicFailed",
             *           "params": "[{\"type\":\"sp_runtime:DispatchError\",\"type_name\":\"DispatchError\",\"value\":{\"Module\":{\"error\":\"0x04000000\",\"index\":29}},\"name\":\"dispatch_error\"},{\"type\":\"frame_support:dispatch:DispatchInfo\",\"type_name\":\"DispatchInfo\",\"value\":{\"class\":\"Normal\",\"pays_fee\":\"Yes\",\"weight\":{\"proof_size\":8877,\"ref_time\":1949112000}},\"name\":\"dispatch_info\"}]",
             *           "phase": 0,
             *           "event_idx": 8,
             *           "extrinsic_hash": "0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c",
             *           "finalized": true,
             *           "block_timestamp": 0
             *         }
             *       ],
             *       "event_count": 4,
             *       "fee": "14717944072",
             *       "fee_used": "14717944072",
             *       "error": {
             *         "module": "NominationPools",
             *         "name": "AccountBelongsToOtherPool",
             *         "doc": "An account is already delegating in another pool. An account may only belong to one,pool at a time.",
             *         "value": "",
             *         "batch_index": -1
             *       },
             *       "finalized": true,
             *       "lifetime": {
             *         "birth": 17860724,
             *         "death": 17860788
             *       },
             *       "tip": "0",
             *       "account_display": {
             *         "address": "5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj"
             *       },
             *       "block_hash": "0x60f526ec0e82a958f6d72e9b9b9d1be392c079bf0c7248e309dd899134add9ee",
             *       "pending": false
             *     }
             */
            data?: Record<string, never>;
        };
        DOTPrepareTxPayload: {
            /**
             * @description Unsigned serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            unsigned_tx_serialized: string;
            /**
             * @description Signature of the transaction
             * @example 0x00ce178c21ced7677c58ebfb93496dd0a305581bfead9d1e1d7834dd8448dd81612a24548a8650650bb75747b5bfd5fc9373903cacf81bfabed7ae05e53dd5ae0f
             */
            signature: string;
        };
        DOTUnsignedTx: {
            /**
             * @description Hash of the unsigned transaction payload to sign
             * @example 0x0600070010a5d4e803373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24eb5001d0100d624000016000000e143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e28c36af0145fcb9c878851016179049f057988bc805990732fda56d45c48e125
             */
            unsigned_tx_payload: string;
            /**
             * @description Unsigned serialized transaction
             * @example 7b2261646472657373223a2235444b38536871747975566b32773471724639487761424a6f695a5631627951733541525a336466325074385636566a222c2261737365744964223a302c22626c6f636b48617368223a22307832386333366166303134356663623963383738383531303136313739303439663035373938386263383035393930373332666461353664343563343865313235222c22626c6f636b4e756d626572223a2230783031313035303862222c22657261223a22307862353030222c2267656e6573697348617368223a22307865313433663233383033616335306538663666386536323639356431636539653465316436386161333663316364326366643135333430323133663334323365222c226d65746164617461527063223a223078222c226d6574686f64223a22307830363030303730303130613564346538303333373363366638653834633638323261396638373033356636356363636638393965656633666364656536313037373034316139336531383035626162323465222c226e6f6e6365223a2230783030303030303437222c227369676e6564457874656e73696f6e73223a5b22436865636b4e6f6e5a65726f53656e646572222c22436865636b5370656356657273696f6e222c22436865636b547856657273696f6e222c22436865636b47656e65736973222c22436865636b4d6f7274616c697479222c22436865636b4e6f6e6365222c22436865636b576569676874222c224368617267655472616e73616374696f6e5061796d656e74225d2c227370656356657273696f6e223a2230783030303032346436222c22746970223a2230783030303030303030303030303030303030303030303030303030303030303030222c227472616e73616374696f6e56657273696f6e223a2230783030303030303136222c2276657273696f6e223a347d
             */
            unsigned_tx_serialized: string;
            /**
             * @description Transaction payload
             * @example {
             *       "blockHash": "0x28c36af0145fcb9c878851016179049f057988bc805990732fda56d45c48e125",
             *       "eraPeriod": 64,
             *       "genesisHash": "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e",
             *       "metadataRpc": "0x",
             *       "method": {
             *         "args": {
             *           "value": "1000000000000",
             *           "payee": {
             *             "account": "5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj"
             *           }
             *         },
             *         "name": "bond",
             *         "pallet": "staking"
             *       },
             *       "nonce": 71,
             *       "specVersion": 9430,
             *       "tip": 0,
             *       "transactionVersion": 22
             *     }
             */
            unsigned_tx: Record<string, never>;
        };
        DOTCraftBondTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
            /**
             * @description Reward destination address. You can also set it to "Stash" to accumulate rewards in the stash account or "Staked" to accumulate rewards in the stash account and stake them (auto-compounding).
             * @example Staked
             */
            reward_destination: string;
        };
        DOTCraftBondExtraTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
        };
        DOTCraftRebondTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
        };
        DOTCraftUnbondTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
        };
        DOTCraftNominateTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /** @description List of validator addresses to nominate */
            validator_addresses: string[];
        };
        DOTCraftWithdrawUnbondedTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
        };
        DOTCraftChillTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
        };
        DOTCraftSetPayeeTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /**
             * @description Reward destination address. You can also set it to "Stash" to accumulate rewards in the stash account or "Staked" to accumulate rewards in the stash account and stake them (auto-compounding).
             * @example Staked
             */
            reward_destination: string;
        };
        DOTCraftJoinPoolTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
            /**
             * @description Id of the pool to join. This can be found on explorers like [Subscan](https://polkadot.subscan.io/nomination_pool/118)
             * @example 118
             */
            pool_id: string;
        };
        DOTCraftBondExtraToPoolTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
        };
        DOTCraftBondRewardsToPoolTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
        };
        DOTCraftClaimPayoutFromPoolTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
        };
        DOTCraftUnbondFromPoolTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
        };
        DOTCraftWithdrawUnbondedFromPoolTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
        };
        KSMStake: {
            /**
             * @description The stake address
             * @example 1nXBtBPt3PV35m7Dfgp32xXgrC9tm1Pw7Hk7MDuGAejvB7J
             */
            address: string;
            /**
             * @description The pool id associated to the stake address. If set to 0, the stake is not associated to any pool.
             * @example 118
             */
            pool_id?: number;
            /**
             * @description Current stake balance in Planck
             * @example 30004690613
             */
            active_balance: string;
            /**
             * @description Current unbonding balance in Planck. Only available for pool members.
             * @example 30004690613
             */
            unbonding_balance: string;
            /**
             * @description Current withdrawable balance in Planck. Only available for pool members.
             * @example 30004690613
             */
            withdrawable_balance: string;
            /**
             * @description Total stake rewards in Planck
             * @example 37201548
             */
            net_rewards: string;
            /**
             * @description Total gross rewards in Planck. Only available for kiln pool members. Default to 0.
             * @example 37201548
             */
            gross_rewards: string;
            /**
             * @description Total withdrawable rewards in Planck. Only available for pool members. Total of rewards that can be claimed from the pool.
             * @example 37201548
             */
            withdrawable_rewards: string;
            /**
             * @description State of the stake
             * @example active
             * @enum {string}
             */
            state: "active" | "inactive";
            /**
             * @description Annual percentage yield
             * @example 0.188014
             */
            net_apy: number;
            /**
             * Format: date-time
             * @description Date of the fist delegation
             * @example 2023-01-06T22:00:00Z
             */
            delegated_at?: string;
            /**
             * Format: date-time
             * @description Last date the stake made a bonding operation (bond/unbond)
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /**
             * Format: date-time
             * @description Date of the last undelegation
             * @example 2023-01-06T22:00:00Z
             */
            undelegated_at?: string;
        };
        KSMRewardByEra: {
            /**
             * @description Net reward amount in Plancks. This can be verified on chain in an explorer.
             * @example 1000000
             */
            net_rewards: string;
            /**
             * @description Gross reward amount in Plancks. This is the amount generated before validator fees. Only available for kiln validator's nominators. Default to 0 if not available.
             * @example 1000000
             */
            gross_rewards: string;
            /**
             * @description Era at which the reward was earned.
             * @example 1471
             */
            era: number;
            /**
             * @description Stake balance in Plancks at the time of reward.
             * @example 1000000
             */
            active_balance: string;
            /**
             * @description Annual percentage yield projected at the time of reward.
             * @example 3.05
             */
            net_apy: number;
            /**
             * @description Stake balance in USD at the time of reward.
             * @example 0.0001
             */
            active_balance_usd?: number;
            /**
             * @description Net reward amount in USD. This can be verified on chain in an explorer.
             * @example 0.0001
             */
            net_rewards_usd?: number;
            /**
             * @description Gross reward amount in USD. This is the amount generated before validator fees. Only available for kiln validator's nominators. Default to 0 if not available.
             * @example 0.0001
             */
            gross_rewards_usd?: number;
        };
        KSMRewardByDay: {
            /**
             * @description Net reward amount in Plancks. This can be verified on chain in an explorer.
             * @example 1000000
             */
            net_rewards: string;
            /**
             * @description Gross reward amount in Plancks. This is the amount generated before validator fees. Only available for kiln validator's nominators. Default to 0 if not available.
             * @example 1000000
             */
            gross_rewards: string;
            /**
             * @description Date at which the reward was earned.
             * @example 2023-01-06
             */
            date: string;
            /**
             * @description Stake balance in Plancks at the time of reward.
             * @example 1000000
             */
            active_balance: string;
            /**
             * @description Annual percentage yield projected at the time of reward minus validator fees.
             * @example 3.05
             */
            net_apy: number;
            /**
             * @description Annual percentage yield projected at the time of reward before validator fees. Only available for kiln validator's nominators. Default to 0 if not available.
             * @example 3.05
             */
            gross_apy: number;
            /**
             * @description Stake balance in USD at the time of reward.
             * @example 0.0001
             */
            active_balance_usd?: number;
            /**
             * @description Net reward amount in USD. This can be verified on chain in an explorer.
             * @example 0.0001
             */
            net_rewards_usd?: number;
            /**
             * @description Gross reward amount in USD. This is the amount generated before validator fees. Only available for kiln validator's nominators. Default to 0 if not available.
             * @example 0.0001
             */
            gross_rewards_usd?: number;
        };
        KSMOperationStaking: {
            /**
             * @description The operation type
             * @example staking.bonded
             */
            type: string;
            /**
             * @description Block number of the event
             * @example 15828207
             */
            block_number: number;
            /**
             * Format: date-time
             * @description Block timestamp of the event
             * @example 2023-06-22T15:35:01.892644Z
             */
            block_time: string;
            /**
             * @description Hash of the transaction. Also named extrinsinc_hash.
             * @example 0xf476bc1b633528a2cfbb1c959755318bed1c6825d7bb6b89d7ffc1026066f17c
             */
            tx_hash: string;
            /**
             * @description Extrinsic sequence id of the event
             * @example 4
             */
            extrinsic_seq_id: number;
            /**
             * @description Event sequence id of the event
             * @example 42
             */
            event_seq_id: number;
            /**
             * @description Amount added or removed from the staked balance in Planck
             * @example 3000000
             */
            amount: string;
            /**
             * @description Address that originated the operation
             * @example F3opxRbN5ZavB4LTn2PZNFRrF6pirwvYPbXnJKYNAmutiPY
             */
            address: string;
            /**
             * @description Validator address
             * @example FV3za2fceAXtw4KwVnPJK4c4Y2ph8VNMEA26MkgjTaEA76u
             */
            validator?: string;
            /**
             * @description Pool id associated. Only available for pool members
             * @example 131
             */
            pool_id?: number;
            /**
             * @description Era at which the reward was earned. Only available for nominators rewards (solo or pool).
             * @example 1403
             */
            earned_era?: number;
            /**
             * @description Era at which the operation was executed. Only available for rewards.
             * @example 1404
             */
            era?: number;
        };
        KSMNetworkStats: {
            /**
             * @description Kusama price in USD
             * @example 3.5
             */
            ksm_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Kusama currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Kusama inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        KSMSignedTx: {
            /**
             * @description Signed serialized transaction
             * @example 0xc1018400373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00ce178c21ced7677c58ebfb93496dd0a305581bfead9d1e1d7834dd8448dd81612a24548a8650650bb75747b5bfd5fc9373903cacf81bfabed7ae05e53dd5ae0fc5001901000601070010a5d4e8
             */
            signed_tx_serialized: string;
        };
        KSMBroadcastTxPayload: {
            /**
             * @description Signed serialized transaction
             * @example 0xc1018400373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00ce178c21ced7677c58ebfb93496dd0a305581bfead9d1e1d7834dd8448dd81612a24548a8650650bb75747b5bfd5fc9373903cacf81bfabed7ae05e53dd5ae0fc5001901000601070010a5d4e8
             */
            tx_serialized: string;
        };
        KSMBroadcastedTx: {
            /**
             * @description Hash of the transaction
             * @example 0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c
             */
            tx_hash: string;
        };
        KSMTxStatus: {
            /**
             * @description Request status code
             * @example 0
             */
            code?: number;
            /**
             * @description Request status message
             * @example Success
             */
            message?: string;
            /**
             * @description Timestamp at which the request was generated
             * @example 1697471079
             */
            generated_at?: number;
            /**
             * @description Transaction data
             * @example {
             *       "block_timestamp": 1697211912,
             *       "block_num": 17860727,
             *       "extrinsic_index": "17860727-2",
             *       "call_module_function": "join",
             *       "call_module": "nominationpools",
             *       "account_id": "5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj",
             *       "signature": "0x3e80f71312c759ebffeea594f48c0f66cd276e821b37496bef98ef760ee58a6c6289a9656c32a3f23146cdf6d07f9ef9d046c669570d4e4e778b87de43106b06",
             *       "nonce": 80,
             *       "extrinsic_hash": "0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c",
             *       "success": false,
             *       "params": [
             *         {
             *           "name": "amount",
             *           "type": "compact<U128>",
             *           "type_name": "BalanceOf",
             *           "value": "100000000000"
             *         },
             *         {
             *           "name": "pool_id",
             *           "type": "U32",
             *           "type_name": "PoolId",
             *           "value": 1
             *         }
             *       ],
             *       "transfer": null,
             *       "event": [
             *         {
             *           "event_index": "17860727-2",
             *           "block_num": 17860727,
             *           "extrinsic_idx": 2,
             *           "module_id": "balances",
             *           "event_id": "Withdraw",
             *           "params": "[{\"type\":\"[U8; 32]\",\"type_name\":\"AccountId\",\"value\":\"0x373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e\",\"name\":\"who\"},{\"type\":\"U128\",\"type_name\":\"Balance\",\"value\":\"14717944072\",\"name\":\"amount\"}]",
             *           "phase": 0,
             *           "event_idx": 5,
             *           "extrinsic_hash": "0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c",
             *           "finalized": true,
             *           "block_timestamp": 0
             *         },
             *         {
             *           "event_index": "17860727-2",
             *           "block_num": 17860727,
             *           "extrinsic_idx": 2,
             *           "module_id": "balances",
             *           "event_id": "Deposit",
             *           "params": "[{\"type\":\"[U8; 32]\",\"type_name\":\"AccountId\",\"value\":\"0x767f36484b1e2acf5c265c7a64bfb46e95259c66a8189bbcd216195def436852\",\"name\":\"who\"},{\"type\":\"U128\",\"type_name\":\"Balance\",\"value\":\"14717944072\",\"name\":\"amount\"}]",
             *           "phase": 0,
             *           "event_idx": 6,
             *           "extrinsic_hash": "0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c",
             *           "finalized": true,
             *           "block_timestamp": 0
             *         },
             *         {
             *           "event_index": "17860727-2",
             *           "block_num": 17860727,
             *           "extrinsic_idx": 2,
             *           "module_id": "transactionpayment",
             *           "event_id": "TransactionFeePaid",
             *           "params": "[{\"type\":\"[U8; 32]\",\"type_name\":\"AccountId\",\"value\":\"0x373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e\",\"name\":\"who\"},{\"type\":\"U128\",\"type_name\":\"BalanceOf\",\"value\":\"14717944072\",\"name\":\"actual_fee\"},{\"type\":\"U128\",\"type_name\":\"BalanceOf\",\"value\":\"0\",\"name\":\"tip\"}]",
             *           "phase": 0,
             *           "event_idx": 7,
             *           "extrinsic_hash": "0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c",
             *           "finalized": true,
             *           "block_timestamp": 0
             *         },
             *         {
             *           "event_index": "17860727-2",
             *           "block_num": 17860727,
             *           "extrinsic_idx": 2,
             *           "module_id": "system",
             *           "event_id": "ExtrinsicFailed",
             *           "params": "[{\"type\":\"sp_runtime:DispatchError\",\"type_name\":\"DispatchError\",\"value\":{\"Module\":{\"error\":\"0x04000000\",\"index\":29}},\"name\":\"dispatch_error\"},{\"type\":\"frame_support:dispatch:DispatchInfo\",\"type_name\":\"DispatchInfo\",\"value\":{\"class\":\"Normal\",\"pays_fee\":\"Yes\",\"weight\":{\"proof_size\":8877,\"ref_time\":1949112000}},\"name\":\"dispatch_info\"}]",
             *           "phase": 0,
             *           "event_idx": 8,
             *           "extrinsic_hash": "0x1b9097a6e3d50066348cb173f3150546457a6188fada6a3a40d571798da1a53c",
             *           "finalized": true,
             *           "block_timestamp": 0
             *         }
             *       ],
             *       "event_count": 4,
             *       "fee": "14717944072",
             *       "fee_used": "14717944072",
             *       "error": {
             *         "module": "NominationPools",
             *         "name": "AccountBelongsToOtherPool",
             *         "doc": "An account is already delegating in another pool. An account may only belong to one,pool at a time.",
             *         "value": "",
             *         "batch_index": -1
             *       },
             *       "finalized": true,
             *       "lifetime": {
             *         "birth": 17860724,
             *         "death": 17860788
             *       },
             *       "tip": "0",
             *       "account_display": {
             *         "address": "5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj"
             *       },
             *       "block_hash": "0x60f526ec0e82a958f6d72e9b9b9d1be392c079bf0c7248e309dd899134add9ee",
             *       "pending": false
             *     }
             */
            data?: Record<string, never>;
        };
        KSMPrepareTxPayload: {
            /**
             * @description Unsigned serialized transaction
             * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
             */
            unsigned_tx_serialized: string;
            /**
             * @description Signature of the transaction
             * @example 0x00ce178c21ced7677c58ebfb93496dd0a305581bfead9d1e1d7834dd8448dd81612a24548a8650650bb75747b5bfd5fc9373903cacf81bfabed7ae05e53dd5ae0f
             */
            signature: string;
        };
        KSMUnsignedTx: {
            /**
             * @description Hash of the unsigned transaction payload to sign
             * @example 0x0600070010a5d4e803373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24eb5001d0100d624000016000000e143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e28c36af0145fcb9c878851016179049f057988bc805990732fda56d45c48e125
             */
            unsigned_tx_payload: string;
            /**
             * @description Unsigned serialized transaction
             * @example 7b2261646472657373223a2235444b38536871747975566b32773471724639487761424a6f695a5631627951733541525a336466325074385636566a222c2261737365744964223a302c22626c6f636b48617368223a22307832386333366166303134356663623963383738383531303136313739303439663035373938386263383035393930373332666461353664343563343865313235222c22626c6f636b4e756d626572223a2230783031313035303862222c22657261223a22307862353030222c2267656e6573697348617368223a22307865313433663233383033616335306538663666386536323639356431636539653465316436386161333663316364326366643135333430323133663334323365222c226d65746164617461527063223a223078222c226d6574686f64223a22307830363030303730303130613564346538303333373363366638653834633638323261396638373033356636356363636638393965656633666364656536313037373034316139336531383035626162323465222c226e6f6e6365223a2230783030303030303437222c227369676e6564457874656e73696f6e73223a5b22436865636b4e6f6e5a65726f53656e646572222c22436865636b5370656356657273696f6e222c22436865636b547856657273696f6e222c22436865636b47656e65736973222c22436865636b4d6f7274616c697479222c22436865636b4e6f6e6365222c22436865636b576569676874222c224368617267655472616e73616374696f6e5061796d656e74225d2c227370656356657273696f6e223a2230783030303032346436222c22746970223a2230783030303030303030303030303030303030303030303030303030303030303030222c227472616e73616374696f6e56657273696f6e223a2230783030303030303136222c2276657273696f6e223a347d
             */
            unsigned_tx_serialized: string;
            /**
             * @description Transaction payload
             * @example {
             *       "blockHash": "0x28c36af0145fcb9c878851016179049f057988bc805990732fda56d45c48e125",
             *       "eraPeriod": 64,
             *       "genesisHash": "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e",
             *       "metadataRpc": "0x",
             *       "method": {
             *         "args": {
             *           "value": "1000000000000",
             *           "payee": {
             *             "account": "5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj"
             *           }
             *         },
             *         "name": "bond",
             *         "pallet": "staking"
             *       },
             *       "nonce": 71,
             *       "specVersion": 9430,
             *       "tip": 0,
             *       "transactionVersion": 22
             *     }
             */
            unsigned_tx: Record<string, never>;
        };
        KSMCraftBondTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
            /**
             * @description Reward destination address. You can also set it to "Stash" to accumulate rewards in the stash account or "Staked" to accumulate rewards in the stash account and stake them (auto-compounding).
             * @example Staked
             */
            reward_destination: string;
        };
        KSMCraftBondExtraTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
        };
        KSMCraftRebondTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
        };
        KSMCraftUnbondTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
        };
        KSMCraftNominateTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /** @description List of validator addresses to nominate */
            validator_addresses: string[];
        };
        KSMCraftWithdrawUnbondedTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
        };
        KSMCraftChillTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
        };
        KSMCraftSetPayeeTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            stash_account: string;
            /**
             * @description Reward destination address. You can also set it to "Stash" to accumulate rewards in the stash account or "Staked" to accumulate rewards in the stash account and stake them (auto-compounding).
             * @example Staked
             */
            reward_destination: string;
        };
        KSMCraftJoinPoolTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
            /**
             * @description Id of the pool to join. This can be found on explorers like [Subscan](https://kusama.subscan.io/nomination_pool/131)
             * @example 131
             */
            pool_id: string;
        };
        KSMCraftBondExtraToPoolTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
        };
        KSMCraftBondRewardsToPoolTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
        };
        KSMCraftClaimPayoutFromPoolTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
        };
        KSMCraftUnbondFromPoolTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
            /**
             * @description Amount in planck
             * @example 100000
             */
            amount_planck: string;
        };
        KSMCraftWithdrawUnbondedFromPoolTxPayload: {
            /**
             * @description Wallet address controlling the stake
             * @example 5DK8ShqtyuVk2w4qrF9HwaBJoiZV1byQs5ARZ3df2Pt8V6Vj
             */
            member_account: string;
        };
        Validator: {
            /**
             * @description Public address of the validator
             * @example fetchvaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7ryjvncp
             */
            address: string;
            /**
             * @description Token Symbol for the chain
             * @example FET
             */
            token_symbol: string;
            /**
             * @description Token name for the chain
             * @example fetch
             */
            token_name: string;
            /**
             * @description Validator name
             * @example Kiln
             */
            name: string;
            /**
             * @description Explorer URL to view the validator
             * @example https://www.mintscan.io/fetchai/validators/fetchvaloper146mj09yzu3mvz7pmy4dvs4z9wr2mst7ryjvncp
             */
            url: string;
            /**
             * @description Network this validator is active on (mainnet, testnet)
             * @example mainnet
             */
            network: string;
            /**
             * Format: date-time
             * @description Date at which the validator was created
             * @example 2023-02-06T21:48:11.038Z
             */
            creation_time: string;
            /**
             * @description Commission rate for the validator in percent (10 = 10%)
             * @example 10
             */
            public_commission_rate_percent: number;
        };
        DYDXStake: {
            /**
             * @description Public key of the validator
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Public key of the delegator
             * @example dydx1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * Format: date-time
             * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 2023-06-16T03:13:23.058547Z
             */
            delegated_at?: string;
            /**
             * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 15739267
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of undelegation for the stake
             * @example 2023-07-14T03:56:13.561156Z
             */
            undelegated_at?: string;
            /**
             * @description Block of undelegation for the stake
             * @example 16126416
             */
            undelegated_block?: number;
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation in uDYDX. Includes currently available rewards not yet withdrawn.
             * @example 735573808534727891000000
             */
            rewards: string;
            /**
             * @description Available rewards in uDYDX that can be withdrawn from this stake
             * @example 36748808534727891000000
             */
            available_rewards: string;
            /**
             * @description Staked balance on this stake in uDYDX
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Total USDC rewards accumulated by this stake in the form of uUSDC. Includes currently available rewards not yet withdrawn.
             * @example 435289200
             */
            rewards_uusdc?: string;
            /**
             * @description Available rewards in uUSDC that can be withdrawn from this stake
             * @example 435289200
             */
            available_rewards_uusdc?: string;
            /**
             * @description Net annual percentage yield. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 5.76
             */
            net_apy: number;
            /**
             * @description State of the DYDX stake
             * @example active
             * @enum {string}
             */
            state: "active" | "deactivating" | "inactive";
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /** @description permissions related to the stake currently active, ignored if there is no ongoing grants */
            permissions: {
                /**
                 * @description whether the stake is recipient (grantee) or the giver (granter) of the permissions
                 * @example granter
                 */
                source: string;
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
                 * @example Staking.MsgDelegate
                 */
                permission: string;
                /**
                 * Format: date-time
                 * @description Exact time at which the permissions will be revoked
                 * @example 2023-01-10T01:12:34Z
                 */
                expires_at?: string | null;
                /**
                 * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "dydxvaloper1xyz",
                 *       "dydxvaloper1abc"
                 *     ]
                 */
                allow_list?: string[] | null;
                /**
                 * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "dydxvaloper1xyz",
                 *       "dydxvaloper1abc"
                 *     ]
                 */
                deny_list?: string[] | null;
            }[];
            /** @description unbondings currently active on the stakes. ignored if no unbondings are returned */
            unbondings: {
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * Format: date-time
                 * @description Exact time at which the unbonding will take effect
                 * @example 2023-01-10T01:12:34Z
                 */
                completion_time: string;
                /**
                 * @description Amount currently associated with the unbonding (slashes included)
                 * @example 129300
                 */
                balance: string;
                /**
                 * @description Amount expected at creation (slashes non-included)
                 * @example 150300
                 */
                initial_balance: string;
            }[];
        };
        PostDYDXStakesPayload: {
            stakes: {
                /**
                 * @description Stake id {validator_address}_{delegator_address}
                 * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu_dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6}
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        DYDXStakeMessage: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.MsgDelegate
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "delegatorAddress": "dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "validatorAddress": "dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *       "amount": {
             *         "denom": "adydx",
             *         "amount": "1000000"
             *       }
             *     }
             */
            value?: Record<string, never>;
        };
        DYDXStakeMessageRestake: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.StakeAuthorization
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "allowList": {
             *         "address": [
             *           "dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *         ]
             *       },
             *       "AuthorizationType": 1
             *     }
             */
            value?: Record<string, never>;
        };
        DYDXStakeUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "adydx",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description List of messages included in the transaction.
             * @example [
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *         "value": {
             *           "delegatorAddress": "dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *           "validatorAddress": "dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *           "amount": {
             *             "denom": "adydx",
             *             "amount": "1000000"
             *           }
             *         }
             *       }
             *     ]
             */
            messages: components["schemas"]["DYDXStakeMessage"][];
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        DYDXUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Message included in the transaction
             * @example {
             *       "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *       "value": {
             *         "delegatorAddress": "dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *         "validatorAddress": "dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *         "amount": {
             *           "denom": "adydx",
             *           "amount": "1000000"
             *         }
             *       }
             *     }
             */
            message: Record<string, never>;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "adydx",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        DYDXSignedTx: {
            /**
             * @description Serialized signed transaction in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signed_tx_serialized: string;
        };
        DYDXTxHash: {
            /**
             * @description Hash of the transaction
             * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
             */
            tx_hash: string;
        };
        DYDXPrepareTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Transaction signature serialized in hex
             * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signature: string;
        };
        DYDXBroadcastTxPayload: {
            /**
             * @description Signed transaction serialized in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            tx_serialized: string;
        };
        DYDXTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
             * @example {
             *       "height": 16007296,
             *       "txIndex": 0,
             *       "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
             *       "code": 0,
             *       "events": [
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000adydx"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "dydx17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000adydx"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "dydx17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000adydx"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "fee",
             *               "value": "5000adydx"
             *             },
             *             {
             *               "key": "fee_payer",
             *               "value": "dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "acc_seq",
             *               "value": "dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "signature",
             *               "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "action",
             *               "value": "/cosmos.staking.v1beta1.MsgDelegate"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "dydx1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5adydx"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5adydx"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "dydx1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5adydx"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "dydx1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "withdraw_rewards",
             *           "attributes": [
             *             {
             *               "key": "amount",
             *               "value": "5adydx"
             *             },
             *             {
             *               "key": "validator",
             *               "value": "dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000adydx"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "dydx1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000adydx"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "delegate",
             *           "attributes": [
             *             {
             *               "key": "validator",
             *               "value": "dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000adydx"
             *             },
             *             {
             *               "key": "new_shares",
             *               "value": "100000.000000000000000000"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "module",
             *               "value": "staking"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         }
             *       ],
             *       "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5adydx\"},{\"key\":\"receiver\",\"value\":\"dydx1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000adydx\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"dydx1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5adydx\"},{\"key\":\"spender\",\"value\":\"dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000adydx\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu\"},{\"key\":\"amount\",\"value\":\"100000adydx\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"dydx1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"dydx19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"dydx1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5adydx\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5adydx\"},{\"key\":\"validator\",\"value\":\"dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu\"}]}]}]",
             *       "tx": {
             *         "0": 10,
             *         "1": 160,
             *         "2": 1,
             *         "3": 10,
             *         "4": 157,
             *         "5": 1,
             *         "6": 10,
             *         "7": 35,
             *         "8": 47,
             *         "9": 99,
             *         "10": 111,
             *         "11": 115,
             *         "12": 109,
             *         "13": 111,
             *         "14": 115,
             *         "15": 46,
             *         "16": 115,
             *         "17": 116,
             *         "18": 97,
             *         "19": 107,
             *         "20": 105,
             *         "21": 110,
             *         "22": 103,
             *         "23": 46,
             *         "24": 118,
             *         "25": 49,
             *         "26": 98,
             *         "27": 101,
             *         "28": 116,
             *         "29": 97,
             *         "30": 49,
             *         "31": 46,
             *         "32": 77,
             *         "33": 115,
             *         "34": 103,
             *         "35": 68,
             *         "36": 101,
             *         "37": 108,
             *         "38": 101,
             *         "39": 103,
             *         "40": 97,
             *         "41": 116,
             *         "42": 101,
             *         "43": 18,
             *         "44": 118,
             *         "45": 10,
             *         "46": 45,
             *         "47": 99,
             *         "48": 111,
             *         "49": 115,
             *         "50": 109,
             *         "51": 111,
             *         "52": 115,
             *         "53": 49,
             *         "54": 57,
             *         "55": 99,
             *         "56": 57,
             *         "57": 102,
             *         "58": 100,
             *         "59": 104,
             *         "60": 52,
             *         "61": 56,
             *         "62": 56,
             *         "63": 118,
             *         "64": 113,
             *         "65": 106,
             *         "66": 99,
             *         "67": 108,
             *         "68": 108,
             *         "69": 116,
             *         "70": 119,
             *         "71": 112,
             *         "72": 54,
             *         "73": 56,
             *         "74": 106,
             *         "75": 109,
             *         "76": 53,
             *         "77": 48,
             *         "78": 121,
             *         "79": 100,
             *         "80": 119,
             *         "81": 121,
             *         "82": 104,
             *         "83": 51,
             *         "84": 54,
             *         "85": 106,
             *         "86": 113,
             *         "87": 101,
             *         "88": 97,
             *         "89": 116,
             *         "90": 101,
             *         "91": 118,
             *         "92": 18,
             *         "93": 52,
             *         "94": 99,
             *         "95": 111,
             *         "96": 115,
             *         "97": 109,
             *         "98": 111,
             *         "99": 115,
             *         "100": 118,
             *         "101": 97,
             *         "102": 108,
             *         "103": 111,
             *         "104": 112,
             *         "105": 101,
             *         "106": 114,
             *         "107": 49,
             *         "108": 54,
             *         "109": 121,
             *         "110": 115,
             *         "111": 48,
             *         "112": 101,
             *         "113": 103,
             *         "114": 57,
             *         "115": 51,
             *         "116": 53,
             *         "117": 109,
             *         "118": 107,
             *         "119": 113,
             *         "120": 112,
             *         "121": 107,
             *         "122": 121,
             *         "123": 100,
             *         "124": 107,
             *         "125": 103,
             *         "126": 102,
             *         "127": 99,
             *         "128": 106,
             *         "129": 57,
             *         "130": 97,
             *         "131": 103,
             *         "132": 101,
             *         "133": 50,
             *         "134": 97,
             *         "135": 117,
             *         "136": 56,
             *         "137": 108,
             *         "138": 57,
             *         "139": 54,
             *         "140": 110,
             *         "141": 97,
             *         "142": 101,
             *         "143": 114,
             *         "144": 101,
             *         "145": 57,
             *         "146": 26,
             *         "147": 15,
             *         "148": 10,
             *         "149": 5,
             *         "150": 117,
             *         "151": 97,
             *         "152": 116,
             *         "153": 111,
             *         "154": 109,
             *         "155": 18,
             *         "156": 6,
             *         "157": 49,
             *         "158": 48,
             *         "159": 48,
             *         "160": 48,
             *         "161": 48,
             *         "162": 48,
             *         "163": 18,
             *         "164": 103,
             *         "165": 10,
             *         "166": 80,
             *         "167": 10,
             *         "168": 70,
             *         "169": 10,
             *         "170": 31,
             *         "171": 47,
             *         "172": 99,
             *         "173": 111,
             *         "174": 115,
             *         "175": 109,
             *         "176": 111,
             *         "177": 115,
             *         "178": 46,
             *         "179": 99,
             *         "180": 114,
             *         "181": 121,
             *         "182": 112,
             *         "183": 116,
             *         "184": 111,
             *         "185": 46,
             *         "186": 115,
             *         "187": 101,
             *         "188": 99,
             *         "189": 112,
             *         "190": 50,
             *         "191": 53,
             *         "192": 54,
             *         "193": 107,
             *         "194": 49,
             *         "195": 46,
             *         "196": 80,
             *         "197": 117,
             *         "198": 98,
             *         "199": 75,
             *         "200": 101,
             *         "201": 121,
             *         "202": 18,
             *         "203": 35,
             *         "204": 10,
             *         "205": 33,
             *         "206": 3,
             *         "207": 156,
             *         "208": 228,
             *         "209": 123,
             *         "210": 42,
             *         "211": 129,
             *         "212": 61,
             *         "213": 19,
             *         "214": 135,
             *         "215": 97,
             *         "216": 49,
             *         "217": 169,
             *         "218": 195,
             *         "219": 190,
             *         "220": 119,
             *         "221": 232,
             *         "222": 196,
             *         "223": 175,
             *         "224": 164,
             *         "225": 158,
             *         "226": 148,
             *         "227": 135,
             *         "228": 68,
             *         "229": 171,
             *         "230": 190,
             *         "231": 225,
             *         "232": 31,
             *         "233": 147,
             *         "234": 158,
             *         "235": 42,
             *         "236": 66,
             *         "237": 15,
             *         "238": 70,
             *         "239": 18,
             *         "240": 4,
             *         "241": 10,
             *         "242": 2,
             *         "243": 8,
             *         "244": 1,
             *         "245": 24,
             *         "246": 33,
             *         "247": 18,
             *         "248": 19,
             *         "249": 10,
             *         "250": 13,
             *         "251": 10,
             *         "252": 5,
             *         "253": 117,
             *         "254": 97,
             *         "255": 116,
             *         "256": 111,
             *         "257": 109,
             *         "258": 18,
             *         "259": 4,
             *         "260": 53,
             *         "261": 48,
             *         "262": 48,
             *         "263": 48,
             *         "264": 16,
             *         "265": 224,
             *         "266": 167,
             *         "267": 18,
             *         "268": 26,
             *         "269": 64,
             *         "270": 25,
             *         "271": 31,
             *         "272": 135,
             *         "273": 165,
             *         "274": 77,
             *         "275": 206,
             *         "276": 175,
             *         "277": 182,
             *         "278": 171,
             *         "279": 154,
             *         "280": 95,
             *         "281": 17,
             *         "282": 42,
             *         "283": 19,
             *         "284": 68,
             *         "285": 76,
             *         "286": 163,
             *         "287": 126,
             *         "288": 73,
             *         "289": 160,
             *         "290": 41,
             *         "291": 229,
             *         "292": 49,
             *         "293": 187,
             *         "294": 33,
             *         "295": 48,
             *         "296": 31,
             *         "297": 215,
             *         "298": 46,
             *         "299": 157,
             *         "300": 57,
             *         "301": 3,
             *         "302": 4,
             *         "303": 199,
             *         "304": 99,
             *         "305": 204,
             *         "306": 165,
             *         "307": 169,
             *         "308": 118,
             *         "309": 10,
             *         "310": 99,
             *         "311": 29,
             *         "312": 200,
             *         "313": 87,
             *         "314": 5,
             *         "315": 221,
             *         "316": 107,
             *         "317": 8,
             *         "318": 181,
             *         "319": 15,
             *         "320": 95,
             *         "321": 255,
             *         "322": 125,
             *         "323": 93,
             *         "324": 232,
             *         "325": 215,
             *         "326": 59,
             *         "327": 44,
             *         "328": 235,
             *         "329": 209,
             *         "330": 244,
             *         "331": 195,
             *         "332": 182,
             *         "333": 160
             *       },
             *       "gasUsed": 167798,
             *       "gasWanted": 300000
             *     }
             */
            receipt?: Record<string, never>;
        };
        DYDXCraftUnstakeTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
            /**
             * @description Amount to unstake in uDYDX. Omit to unstake all the delegated amount
             * @example 1000000000000000000000000
             */
            amount_adydx?: string;
        };
        DYDXCraftRedelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to which the new stake will be linked
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator source address of current stake
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_source: string;
            /**
             * @description Validator destination address to which redelegate the stake
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_destination: string;
            /**
             * @description Amount to redelegate in uDYDX
             * @example 1000000000000000000000000
             */
            amount_adydx?: string;
        };
        DYDXCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
            /**
             * @description Amount to stake in adydx
             * @example 1000000000000000000000000
             */
            amount_adydx: string;
        };
        DYDXCraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address: string;
        };
        DYDXCraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
        };
        DYDXReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in uDYDX during the day
             * @example 3575891083876864200000
             */
            rewards: string;
            /**
             * @description Staked balance in uDYDX at the end of the day
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield
             * @example 20.76
             */
            net_apy: number;
            /**
             * @description Accumulated rewards in USDC during the day
             * @example 35758910838
             */
            rewards_uusdc?: string;
            /**
             * @description Estimated value of USDC rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko.
             * @example 40.12
             */
            rewards_usdc_usd?: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            balance_usd?: number;
        };
        DYDXOperationDelegate: {
            /**
             * @description Operation type
             * @example staking.MsgDelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uDYDX
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount added to the staked balance in uDYDX
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uDYDX
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        DYDXOperationUndelegate: {
            /**
             * @description Operation type
             * @example staking.MsgUndelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uDYDX
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount removed from the staked balance in uDYDX
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uDYDX
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        DYDXOperationRedelegate: {
            /**
             * @description Operation type
             * @example staking.MsgBeginRedelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uDYDX
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Destination validator address
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Source validator address
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address_source?: string;
            /**
             * @description Delegator address
             * @example dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount moved from the source validator staked balance to the destination validator staked balance in uDYDX
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed from the destination validator alongside the operation in uDYDX
             * @example 10841
             */
            withdraw_rewards?: string;
            /**
             * @description Rewards auto-claimed from the source validator alongside the operation in uDYDX
             * @example 10841
             */
            withdraw_rewards_source?: string;
        };
        DYDXOperationWithdrawRewards: {
            /**
             * @description Operation type
             * @example distr.MsgWithdrawDelegatorReward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uDYDX
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Rewards claimed alongside the operation in uDYDX
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        DYDXOperationGrant: {
            /**
             * @description Operation type
             * @example Authz.Grant
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uDYDX
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Recipient of the permissions
             * @example dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            grantee?: string;
            /**
             * @description Owner of the stake giving the permissions
             * @example dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            granter?: string;
            /**
             * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
             * @example Staking.MsgDelegate
             */
            permission?: string;
            /**
             * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
             * @example [
             *       "dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6"
             *     ]
             */
            allow_list?: string[] | null;
            /**
             * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
             * @example [
             *       "dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6"
             *     ]
             */
            deny_list?: string[] | null;
        };
        DYDXOperationExec: {
            /**
             * @description Operation type
             * @example Authz.Exec
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uDYDX
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uDYDX
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uDYDX
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uDYDX
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        DYDXOperationContract: {
            /**
             * @description Contract type
             * @example wasm.Contract
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uDYDX
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description address of the contract been called
             * @example dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            contract: string;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example dydxvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uDYDX
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uDYDX
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uDYDX
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        DYDXNetworkStats: {
            /**
             * @description Price of DYDX in USD
             * @example 10.53
             */
            dydx_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of DYDX currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description DYDX inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        /**
         * @description Decoded transaction
         * @example {
         *       "authInfo": {
         *         "signerInfos": [
         *           {
         *             "publicKey": {
         *               "typeUrl": "/cosmos.crypto.secp256k1.PubKey",
         *               "value": {
         *                 "0": 10,
         *                 "1": 33,
         *                 "2": 3,
         *                 "3": 156,
         *                 "4": 228,
         *                 "5": 123,
         *                 "6": 42,
         *                 "7": 129,
         *                 "8": 61,
         *                 "9": 19,
         *                 "10": 135,
         *                 "11": 97,
         *                 "12": 49,
         *                 "13": 169,
         *                 "14": 195,
         *                 "15": 190,
         *                 "16": 119,
         *                 "17": 232,
         *                 "18": 196,
         *                 "19": 175,
         *                 "20": 164,
         *                 "21": 158,
         *                 "22": 148,
         *                 "23": 135,
         *                 "24": 68,
         *                 "25": 171,
         *                 "26": 190,
         *                 "27": 225,
         *                 "28": 31,
         *                 "29": 147,
         *                 "30": 158,
         *                 "31": 42,
         *                 "32": 66,
         *                 "33": 15,
         *                 "34": 70
         *               }
         *             },
         *             "modeInfo": {
         *               "single": {
         *                 "mode": 1
         *               }
         *             },
         *             "sequence": {
         *               "low": 102,
         *               "high": 0,
         *               "unsigned": true
         *             }
         *           }
         *         ],
         *         "fee": {
         *           "amount": [
         *             {
         *               "denom": "adydx",
         *               "amount": "5000"
         *             }
         *           ],
         *           "gasLimit": {
         *             "low": 2000000,
         *             "high": 0,
         *             "unsigned": true
         *           },
         *           "payer": "",
         *           "granter": ""
         *         }
         *       },
         *       "body": {
         *         "messages": [
         *           {
         *             "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
         *             "value": {
         *               "0": 10,
         *               "1": 45,
         *               "2": 99,
         *               "3": 111,
         *               "4": 115,
         *               "5": 109,
         *               "6": 111,
         *               "7": 115,
         *               "8": 49,
         *               "9": 57,
         *               "10": 99,
         *               "11": 57,
         *               "12": 102,
         *               "13": 100,
         *               "14": 104,
         *               "15": 52,
         *               "16": 56,
         *               "17": 56,
         *               "18": 118,
         *               "19": 113,
         *               "20": 106,
         *               "21": 99,
         *               "22": 108,
         *               "23": 108,
         *               "24": 116,
         *               "25": 119,
         *               "26": 112,
         *               "27": 54,
         *               "28": 56,
         *               "29": 106,
         *               "30": 109,
         *               "31": 53,
         *               "32": 48,
         *               "33": 121,
         *               "34": 100,
         *               "35": 119,
         *               "36": 121,
         *               "37": 104,
         *               "38": 51,
         *               "39": 54,
         *               "40": 106,
         *               "41": 113,
         *               "42": 101,
         *               "43": 97,
         *               "44": 116,
         *               "45": 101,
         *               "46": 118,
         *               "47": 18,
         *               "48": 52,
         *               "49": 99,
         *               "50": 111,
         *               "51": 115,
         *               "52": 109,
         *               "53": 111,
         *               "54": 115,
         *               "55": 118,
         *               "56": 97,
         *               "57": 108,
         *               "58": 111,
         *               "59": 112,
         *               "60": 101,
         *               "61": 114,
         *               "62": 49,
         *               "63": 54,
         *               "64": 121,
         *               "65": 115,
         *               "66": 48,
         *               "67": 101,
         *               "68": 103,
         *               "69": 57,
         *               "70": 51,
         *               "71": 53,
         *               "72": 109,
         *               "73": 107,
         *               "74": 113,
         *               "75": 112,
         *               "76": 107,
         *               "77": 121,
         *               "78": 100,
         *               "79": 107,
         *               "80": 103,
         *               "81": 102,
         *               "82": 99,
         *               "83": 106,
         *               "84": 57,
         *               "85": 97,
         *               "86": 103,
         *               "87": 101,
         *               "88": 50,
         *               "89": 97,
         *               "90": 117,
         *               "91": 56,
         *               "92": 108,
         *               "93": 57,
         *               "94": 54,
         *               "95": 110,
         *               "96": 97,
         *               "97": 101,
         *               "98": 114,
         *               "99": 101,
         *               "100": 57,
         *               "101": 26,
         *               "102": 16,
         *               "103": 10,
         *               "104": 5,
         *               "105": 117,
         *               "106": 97,
         *               "107": 116,
         *               "108": 111,
         *               "109": 109,
         *               "110": 18,
         *               "111": 7,
         *               "112": 49,
         *               "113": 48,
         *               "114": 48,
         *               "115": 48,
         *               "116": 48,
         *               "117": 48,
         *               "118": 48
         *             }
         *           }
         *         ],
         *         "memo": "",
         *         "timeoutHeight": {
         *           "low": 0,
         *           "high": 0,
         *           "unsigned": true
         *         },
         *         "extensionOptions": [],
         *         "nonCriticalExtensionOptions": []
         *       },
         *       "signatures": [
         *         {
         *           "0": 116,
         *           "1": 104,
         *           "2": 101,
         *           "3": 116,
         *           "4": 97,
         *           "5": 45,
         *           "6": 116,
         *           "7": 101,
         *           "8": 115,
         *           "9": 116,
         *           "10": 110,
         *           "11": 101,
         *           "12": 116,
         *           "13": 45,
         *           "14": 48,
         *           "15": 48,
         *           "16": 49
         *         }
         *       ]
         *     }
         */
        DYDXTxDecoding: Record<string, never>;
        DYDXCraftSendTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Recipient address
             * @example dydx1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            to: string;
            /**
             * @description Amount to send in adydx
             * @example 1000000000000000000000000
             */
            amount_adydx: string;
        };
        DYDXCraftNobleIbcTransferTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description The amount to transfer in uUSDC
             * @example 1000000
             */
            amount_uusdc: string;
        };
        DYDXGetBalancePayload: {
            /**
             * @description Wallet address
             * @example dydx1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            address: string;
            /**
             * @description The denomination of the balance to query
             * @example uusdc
             */
            denom: string;
        };
        TIAStake: {
            /**
             * @description Public key of the validator
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Public key of the delegator
             * @example celestia1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * Format: date-time
             * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 2023-06-16T03:13:23.058547Z
             */
            delegated_at?: string;
            /**
             * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 15739267
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of undelegation for the stake
             * @example 2023-07-14T03:56:13.561156Z
             */
            undelegated_at?: string;
            /**
             * @description Block of undelegation for the stake
             * @example 16126416
             */
            undelegated_block?: number;
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation in uTIA. Includes currently available rewards not yet withdrawn.
             * @example 735573808534727891000000
             */
            rewards: string;
            /**
             * @description Available rewards in uTIA that can be withdrawn from this stake
             * @example 36748808534727891000000
             */
            available_rewards: string;
            /**
             * @description Staked balance on this stake in uTIA
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 5.76
             */
            net_apy: number;
            /**
             * @description State of the Celestia stake
             * @example active
             * @enum {string}
             */
            state: "active" | "deactivating" | "inactive";
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /** @description permissions related to the stake currently active, ignored if there is no ongoing grants */
            permissions: {
                /**
                 * @description whether the stake is recipient (grantee) or the giver (granter) of the permissions
                 * @example granter
                 */
                source: string;
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
                 * @example Staking.MsgDelegate
                 */
                permission: string;
                /**
                 * Format: date-time
                 * @description Exact time at which the permissions will be revoked
                 * @example 2023-01-10T01:12:34Z
                 */
                expires_at?: string | null;
                /**
                 * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "celestiavaloper1xyz",
                 *       "celestiavaloper1abc"
                 *     ]
                 */
                allow_list?: string[] | null;
                /**
                 * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "celestiavaloper1xyz",
                 *       "celestiavaloper1abc"
                 *     ]
                 */
                deny_list?: string[] | null;
            }[];
            /** @description unbondings currently active on the stakes. ignored if no unbondings are returned */
            unbondings: {
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * Format: date-time
                 * @description Exact time at which the unbonding will take effect
                 * @example 2023-01-10T01:12:34Z
                 */
                completion_time: string;
                /**
                 * @description Amount currently associated with the unbonding (slashes included)
                 * @example 129300
                 */
                balance: string;
                /**
                 * @description Amount expected at creation (slashes non-included)
                 * @example 150300
                 */
                initial_balance: string;
            }[];
        };
        PostTIAStakesPayload: {
            stakes: {
                /**
                 * @description Stake id {validator_address}_{delegator_address}
                 * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu_celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6}
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        TIAStakeMessage: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.MsgDelegate
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "delegatorAddress": "celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "validatorAddress": "celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *       "amount": {
             *         "denom": "utia",
             *         "amount": "1000000"
             *       }
             *     }
             */
            value?: Record<string, never>;
        };
        TIAStakeMessageRestake: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.StakeAuthorization
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "allowList": {
             *         "address": [
             *           "celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *         ]
             *       },
             *       "AuthorizationType": 1
             *     }
             */
            value?: Record<string, never>;
        };
        TIAStakeUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "utia",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description List of messages included in the transaction. The list contains one message for the staking delegation and one more message for rewards restaking in case specified as a parameter (`restake_rewards=true`).
             * @example [
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *         "value": {
             *           "delegatorAddress": "celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *           "validatorAddress": "celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *           "amount": {
             *             "denom": "utia",
             *             "amount": "1000000"
             *           }
             *         }
             *       },
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.StakeAuthorization",
             *         "allowList": {
             *           "address": [
             *             "celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *           ]
             *         },
             *         "AuthorizationType": 1
             *       }
             *     ]
             */
            messages: (components["schemas"]["TIAStakeMessage"] | components["schemas"]["TIAStakeMessageRestake"])[];
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        TIAUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Message included in the transaction
             * @example {
             *       "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *       "value": {
             *         "delegatorAddress": "celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *         "validatorAddress": "celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *         "amount": {
             *           "denom": "utia",
             *           "amount": "1000000"
             *         }
             *       }
             *     }
             */
            message: Record<string, never>;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "utia",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        TIASignedTx: {
            /**
             * @description Serialized signed transaction in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signed_tx_serialized: string;
        };
        TIATxHash: {
            /**
             * @description Hash of the transaction
             * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
             */
            tx_hash: string;
        };
        TIAPrepareTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Transaction signature serialized in hex
             * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signature: string;
        };
        TIABroadcastTxPayload: {
            /**
             * @description Signed transaction serialized in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            tx_serialized: string;
        };
        TIATxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
             * @example {
             *       "height": 16007296,
             *       "txIndex": 0,
             *       "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
             *       "code": 0,
             *       "events": [
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000utia"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "celestia17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000utia"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "celestia17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000utia"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "fee",
             *               "value": "5000utia"
             *             },
             *             {
             *               "key": "fee_payer",
             *               "value": "celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "acc_seq",
             *               "value": "celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "signature",
             *               "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "action",
             *               "value": "/cosmos.staking.v1beta1.MsgDelegate"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "celestia1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5utia"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5utia"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "celestia1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5utia"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "celestia1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "withdraw_rewards",
             *           "attributes": [
             *             {
             *               "key": "amount",
             *               "value": "5utia"
             *             },
             *             {
             *               "key": "validator",
             *               "value": "celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000utia"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "celestia1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000utia"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "delegate",
             *           "attributes": [
             *             {
             *               "key": "validator",
             *               "value": "celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000utia"
             *             },
             *             {
             *               "key": "new_shares",
             *               "value": "100000.000000000000000000"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "module",
             *               "value": "staking"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         }
             *       ],
             *       "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5utia\"},{\"key\":\"receiver\",\"value\":\"celestia1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000utia\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"celestia1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5utia\"},{\"key\":\"spender\",\"value\":\"celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000utia\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu\"},{\"key\":\"amount\",\"value\":\"100000utia\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"celestia1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"celestia19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"celestia1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5utia\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5utia\"},{\"key\":\"validator\",\"value\":\"celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu\"}]}]}]",
             *       "tx": {
             *         "0": 10,
             *         "1": 160,
             *         "2": 1,
             *         "3": 10,
             *         "4": 157,
             *         "5": 1,
             *         "6": 10,
             *         "7": 35,
             *         "8": 47,
             *         "9": 99,
             *         "10": 111,
             *         "11": 115,
             *         "12": 109,
             *         "13": 111,
             *         "14": 115,
             *         "15": 46,
             *         "16": 115,
             *         "17": 116,
             *         "18": 97,
             *         "19": 107,
             *         "20": 105,
             *         "21": 110,
             *         "22": 103,
             *         "23": 46,
             *         "24": 118,
             *         "25": 49,
             *         "26": 98,
             *         "27": 101,
             *         "28": 116,
             *         "29": 97,
             *         "30": 49,
             *         "31": 46,
             *         "32": 77,
             *         "33": 115,
             *         "34": 103,
             *         "35": 68,
             *         "36": 101,
             *         "37": 108,
             *         "38": 101,
             *         "39": 103,
             *         "40": 97,
             *         "41": 116,
             *         "42": 101,
             *         "43": 18,
             *         "44": 118,
             *         "45": 10,
             *         "46": 45,
             *         "47": 99,
             *         "48": 111,
             *         "49": 115,
             *         "50": 109,
             *         "51": 111,
             *         "52": 115,
             *         "53": 49,
             *         "54": 57,
             *         "55": 99,
             *         "56": 57,
             *         "57": 102,
             *         "58": 100,
             *         "59": 104,
             *         "60": 52,
             *         "61": 56,
             *         "62": 56,
             *         "63": 118,
             *         "64": 113,
             *         "65": 106,
             *         "66": 99,
             *         "67": 108,
             *         "68": 108,
             *         "69": 116,
             *         "70": 119,
             *         "71": 112,
             *         "72": 54,
             *         "73": 56,
             *         "74": 106,
             *         "75": 109,
             *         "76": 53,
             *         "77": 48,
             *         "78": 121,
             *         "79": 100,
             *         "80": 119,
             *         "81": 121,
             *         "82": 104,
             *         "83": 51,
             *         "84": 54,
             *         "85": 106,
             *         "86": 113,
             *         "87": 101,
             *         "88": 97,
             *         "89": 116,
             *         "90": 101,
             *         "91": 118,
             *         "92": 18,
             *         "93": 52,
             *         "94": 99,
             *         "95": 111,
             *         "96": 115,
             *         "97": 109,
             *         "98": 111,
             *         "99": 115,
             *         "100": 118,
             *         "101": 97,
             *         "102": 108,
             *         "103": 111,
             *         "104": 112,
             *         "105": 101,
             *         "106": 114,
             *         "107": 49,
             *         "108": 54,
             *         "109": 121,
             *         "110": 115,
             *         "111": 48,
             *         "112": 101,
             *         "113": 103,
             *         "114": 57,
             *         "115": 51,
             *         "116": 53,
             *         "117": 109,
             *         "118": 107,
             *         "119": 113,
             *         "120": 112,
             *         "121": 107,
             *         "122": 121,
             *         "123": 100,
             *         "124": 107,
             *         "125": 103,
             *         "126": 102,
             *         "127": 99,
             *         "128": 106,
             *         "129": 57,
             *         "130": 97,
             *         "131": 103,
             *         "132": 101,
             *         "133": 50,
             *         "134": 97,
             *         "135": 117,
             *         "136": 56,
             *         "137": 108,
             *         "138": 57,
             *         "139": 54,
             *         "140": 110,
             *         "141": 97,
             *         "142": 101,
             *         "143": 114,
             *         "144": 101,
             *         "145": 57,
             *         "146": 26,
             *         "147": 15,
             *         "148": 10,
             *         "149": 5,
             *         "150": 117,
             *         "151": 97,
             *         "152": 116,
             *         "153": 111,
             *         "154": 109,
             *         "155": 18,
             *         "156": 6,
             *         "157": 49,
             *         "158": 48,
             *         "159": 48,
             *         "160": 48,
             *         "161": 48,
             *         "162": 48,
             *         "163": 18,
             *         "164": 103,
             *         "165": 10,
             *         "166": 80,
             *         "167": 10,
             *         "168": 70,
             *         "169": 10,
             *         "170": 31,
             *         "171": 47,
             *         "172": 99,
             *         "173": 111,
             *         "174": 115,
             *         "175": 109,
             *         "176": 111,
             *         "177": 115,
             *         "178": 46,
             *         "179": 99,
             *         "180": 114,
             *         "181": 121,
             *         "182": 112,
             *         "183": 116,
             *         "184": 111,
             *         "185": 46,
             *         "186": 115,
             *         "187": 101,
             *         "188": 99,
             *         "189": 112,
             *         "190": 50,
             *         "191": 53,
             *         "192": 54,
             *         "193": 107,
             *         "194": 49,
             *         "195": 46,
             *         "196": 80,
             *         "197": 117,
             *         "198": 98,
             *         "199": 75,
             *         "200": 101,
             *         "201": 121,
             *         "202": 18,
             *         "203": 35,
             *         "204": 10,
             *         "205": 33,
             *         "206": 3,
             *         "207": 156,
             *         "208": 228,
             *         "209": 123,
             *         "210": 42,
             *         "211": 129,
             *         "212": 61,
             *         "213": 19,
             *         "214": 135,
             *         "215": 97,
             *         "216": 49,
             *         "217": 169,
             *         "218": 195,
             *         "219": 190,
             *         "220": 119,
             *         "221": 232,
             *         "222": 196,
             *         "223": 175,
             *         "224": 164,
             *         "225": 158,
             *         "226": 148,
             *         "227": 135,
             *         "228": 68,
             *         "229": 171,
             *         "230": 190,
             *         "231": 225,
             *         "232": 31,
             *         "233": 147,
             *         "234": 158,
             *         "235": 42,
             *         "236": 66,
             *         "237": 15,
             *         "238": 70,
             *         "239": 18,
             *         "240": 4,
             *         "241": 10,
             *         "242": 2,
             *         "243": 8,
             *         "244": 1,
             *         "245": 24,
             *         "246": 33,
             *         "247": 18,
             *         "248": 19,
             *         "249": 10,
             *         "250": 13,
             *         "251": 10,
             *         "252": 5,
             *         "253": 117,
             *         "254": 97,
             *         "255": 116,
             *         "256": 111,
             *         "257": 109,
             *         "258": 18,
             *         "259": 4,
             *         "260": 53,
             *         "261": 48,
             *         "262": 48,
             *         "263": 48,
             *         "264": 16,
             *         "265": 224,
             *         "266": 167,
             *         "267": 18,
             *         "268": 26,
             *         "269": 64,
             *         "270": 25,
             *         "271": 31,
             *         "272": 135,
             *         "273": 165,
             *         "274": 77,
             *         "275": 206,
             *         "276": 175,
             *         "277": 182,
             *         "278": 171,
             *         "279": 154,
             *         "280": 95,
             *         "281": 17,
             *         "282": 42,
             *         "283": 19,
             *         "284": 68,
             *         "285": 76,
             *         "286": 163,
             *         "287": 126,
             *         "288": 73,
             *         "289": 160,
             *         "290": 41,
             *         "291": 229,
             *         "292": 49,
             *         "293": 187,
             *         "294": 33,
             *         "295": 48,
             *         "296": 31,
             *         "297": 215,
             *         "298": 46,
             *         "299": 157,
             *         "300": 57,
             *         "301": 3,
             *         "302": 4,
             *         "303": 199,
             *         "304": 99,
             *         "305": 204,
             *         "306": 165,
             *         "307": 169,
             *         "308": 118,
             *         "309": 10,
             *         "310": 99,
             *         "311": 29,
             *         "312": 200,
             *         "313": 87,
             *         "314": 5,
             *         "315": 221,
             *         "316": 107,
             *         "317": 8,
             *         "318": 181,
             *         "319": 15,
             *         "320": 95,
             *         "321": 255,
             *         "322": 125,
             *         "323": 93,
             *         "324": 232,
             *         "325": 215,
             *         "326": 59,
             *         "327": 44,
             *         "328": 235,
             *         "329": 209,
             *         "330": 244,
             *         "331": 195,
             *         "332": 182,
             *         "333": 160
             *       },
             *       "gasUsed": 167798,
             *       "gasWanted": 300000
             *     }
             */
            receipt?: Record<string, never>;
        };
        TIACraftUnstakeTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
            /**
             * @description Amount to unstake in uTIA. Omit to unstake all the delegated amount
             * @example 1000000000000000000000000
             */
            amount_utia?: string;
        };
        TIACraftRedelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to which the new stake will be linked
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator source address of current stake
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_source: string;
            /**
             * @description Validator destination address to which redelegate the stake
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_destination: string;
            /**
             * @description Amount to redelegate in uTIA
             * @example 1000000000000000000000000
             */
            amount_utia?: string;
        };
        TIACraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
            /**
             * @description Amount to stake in utia
             * @example 1000000000000000000000000
             */
            amount_utia: string;
            /**
             * @description If enabled, the rewards will be automatically restaked
             * @default false
             */
            restake_rewards: boolean;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address?: string;
        };
        TIACraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address: string;
        };
        TIACraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
        };
        TIAReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in uTIA during the day
             * @example 3575891083876864200000
             */
            rewards: string;
            /**
             * @description Staked balance in uTIA at the end of the day
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield
             * @example 20.76
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            balance_usd?: number;
        };
        TIAOperationDelegate: {
            /**
             * @description Operation type
             * @example staking.MsgDelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uTIA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount added to the staked balance in uTIA
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uTIA
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        TIAOperationUndelegate: {
            /**
             * @description Operation type
             * @example staking.MsgUndelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uTIA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount removed from the staked balance in uTIA
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uTIA
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        TIAOperationRedelegate: {
            /**
             * @description Operation type
             * @example staking.MsgBeginRedelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uTIA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Destination validator address
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Source validator address
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address_source?: string;
            /**
             * @description Delegator address
             * @example celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount moved from the source validator staked balance to the destination validator staked balance in uTIA
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed from the destination validator alongside the operation in uTIA
             * @example 10841
             */
            withdraw_rewards?: string;
            /**
             * @description Rewards auto-claimed from the source validator alongside the operation in uTIA
             * @example 10841
             */
            withdraw_rewards_source?: string;
        };
        TIAOperationWithdrawRewards: {
            /**
             * @description Operation type
             * @example distr.MsgWithdrawDelegatorReward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uTIA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Rewards claimed alongside the operation in uTIA
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        TIAOperationGrant: {
            /**
             * @description Operation type
             * @example Authz.Grant
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uTIA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Recipient of the permissions
             * @example celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            grantee?: string;
            /**
             * @description Owner of the stake giving the permissions
             * @example celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            granter?: string;
            /**
             * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
             * @example Staking.MsgDelegate
             */
            permission?: string;
            /**
             * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
             * @example [
             *       "celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6"
             *     ]
             */
            allow_list?: string[] | null;
            /**
             * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
             * @example [
             *       "celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6"
             *     ]
             */
            deny_list?: string[] | null;
        };
        TIAOperationExec: {
            /**
             * @description Operation type
             * @example Authz.Exec
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uTIA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uTIA
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uTIA
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uTIA
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        TIAOperationContract: {
            /**
             * @description Contract type
             * @example wasm.Contract
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uTIA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description address of the contract been called
             * @example celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            contract: string;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example celestiavaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example celestia1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uTIA
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uTIA
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uTIA
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        TIANetworkStats: {
            /**
             * @description Price of Celestia in USD
             * @example 10.53
             */
            tia_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Celestia currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Celestia inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        /**
         * @description Decoded transaction
         * @example {
         *       "authInfo": {
         *         "signerInfos": [
         *           {
         *             "publicKey": {
         *               "typeUrl": "/cosmos.crypto.secp256k1.PubKey",
         *               "value": {
         *                 "0": 10,
         *                 "1": 33,
         *                 "2": 3,
         *                 "3": 156,
         *                 "4": 228,
         *                 "5": 123,
         *                 "6": 42,
         *                 "7": 129,
         *                 "8": 61,
         *                 "9": 19,
         *                 "10": 135,
         *                 "11": 97,
         *                 "12": 49,
         *                 "13": 169,
         *                 "14": 195,
         *                 "15": 190,
         *                 "16": 119,
         *                 "17": 232,
         *                 "18": 196,
         *                 "19": 175,
         *                 "20": 164,
         *                 "21": 158,
         *                 "22": 148,
         *                 "23": 135,
         *                 "24": 68,
         *                 "25": 171,
         *                 "26": 190,
         *                 "27": 225,
         *                 "28": 31,
         *                 "29": 147,
         *                 "30": 158,
         *                 "31": 42,
         *                 "32": 66,
         *                 "33": 15,
         *                 "34": 70
         *               }
         *             },
         *             "modeInfo": {
         *               "single": {
         *                 "mode": 1
         *               }
         *             },
         *             "sequence": {
         *               "low": 102,
         *               "high": 0,
         *               "unsigned": true
         *             }
         *           }
         *         ],
         *         "fee": {
         *           "amount": [
         *             {
         *               "denom": "utia",
         *               "amount": "5000"
         *             }
         *           ],
         *           "gasLimit": {
         *             "low": 2000000,
         *             "high": 0,
         *             "unsigned": true
         *           },
         *           "payer": "",
         *           "granter": ""
         *         }
         *       },
         *       "body": {
         *         "messages": [
         *           {
         *             "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
         *             "value": {
         *               "0": 10,
         *               "1": 45,
         *               "2": 99,
         *               "3": 111,
         *               "4": 115,
         *               "5": 109,
         *               "6": 111,
         *               "7": 115,
         *               "8": 49,
         *               "9": 57,
         *               "10": 99,
         *               "11": 57,
         *               "12": 102,
         *               "13": 100,
         *               "14": 104,
         *               "15": 52,
         *               "16": 56,
         *               "17": 56,
         *               "18": 118,
         *               "19": 113,
         *               "20": 106,
         *               "21": 99,
         *               "22": 108,
         *               "23": 108,
         *               "24": 116,
         *               "25": 119,
         *               "26": 112,
         *               "27": 54,
         *               "28": 56,
         *               "29": 106,
         *               "30": 109,
         *               "31": 53,
         *               "32": 48,
         *               "33": 121,
         *               "34": 100,
         *               "35": 119,
         *               "36": 121,
         *               "37": 104,
         *               "38": 51,
         *               "39": 54,
         *               "40": 106,
         *               "41": 113,
         *               "42": 101,
         *               "43": 97,
         *               "44": 116,
         *               "45": 101,
         *               "46": 118,
         *               "47": 18,
         *               "48": 52,
         *               "49": 99,
         *               "50": 111,
         *               "51": 115,
         *               "52": 109,
         *               "53": 111,
         *               "54": 115,
         *               "55": 118,
         *               "56": 97,
         *               "57": 108,
         *               "58": 111,
         *               "59": 112,
         *               "60": 101,
         *               "61": 114,
         *               "62": 49,
         *               "63": 54,
         *               "64": 121,
         *               "65": 115,
         *               "66": 48,
         *               "67": 101,
         *               "68": 103,
         *               "69": 57,
         *               "70": 51,
         *               "71": 53,
         *               "72": 109,
         *               "73": 107,
         *               "74": 113,
         *               "75": 112,
         *               "76": 107,
         *               "77": 121,
         *               "78": 100,
         *               "79": 107,
         *               "80": 103,
         *               "81": 102,
         *               "82": 99,
         *               "83": 106,
         *               "84": 57,
         *               "85": 97,
         *               "86": 103,
         *               "87": 101,
         *               "88": 50,
         *               "89": 97,
         *               "90": 117,
         *               "91": 56,
         *               "92": 108,
         *               "93": 57,
         *               "94": 54,
         *               "95": 110,
         *               "96": 97,
         *               "97": 101,
         *               "98": 114,
         *               "99": 101,
         *               "100": 57,
         *               "101": 26,
         *               "102": 16,
         *               "103": 10,
         *               "104": 5,
         *               "105": 117,
         *               "106": 97,
         *               "107": 116,
         *               "108": 111,
         *               "109": 109,
         *               "110": 18,
         *               "111": 7,
         *               "112": 49,
         *               "113": 48,
         *               "114": 48,
         *               "115": 48,
         *               "116": 48,
         *               "117": 48,
         *               "118": 48
         *             }
         *           }
         *         ],
         *         "memo": "",
         *         "timeoutHeight": {
         *           "low": 0,
         *           "high": 0,
         *           "unsigned": true
         *         },
         *         "extensionOptions": [],
         *         "nonCriticalExtensionOptions": []
         *       },
         *       "signatures": [
         *         {
         *           "0": 116,
         *           "1": 104,
         *           "2": 101,
         *           "3": 116,
         *           "4": 97,
         *           "5": 45,
         *           "6": 116,
         *           "7": 101,
         *           "8": 115,
         *           "9": 116,
         *           "10": 110,
         *           "11": 101,
         *           "12": 116,
         *           "13": 45,
         *           "14": 48,
         *           "15": 48,
         *           "16": 49
         *         }
         *       ]
         *     }
         */
        TIATxDecoding: Record<string, never>;
        TIACraftSendTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Recipient address
             * @example celestia1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            to: string;
            /**
             * @description Amount to send in utia
             * @example 1000000000000000000000000
             */
            amount_utia: string;
        };
        ZETAStake: {
            /**
             * @description Public key of the validator
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Public key of the delegator
             * @example zeta1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * Format: date-time
             * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 2023-06-16T03:13:23.058547Z
             */
            delegated_at?: string;
            /**
             * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 15739267
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of undelegation for the stake
             * @example 2023-07-14T03:56:13.561156Z
             */
            undelegated_at?: string;
            /**
             * @description Block of undelegation for the stake
             * @example 16126416
             */
            undelegated_block?: number;
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation in uZETA. Includes currently available rewards not yet withdrawn.
             * @example 735573808534727891000000
             */
            rewards: string;
            /**
             * @description Available rewards in uZETA that can be withdrawn from this stake
             * @example 36748808534727891000000
             */
            available_rewards: string;
            /**
             * @description Staked balance on this stake in uZETA
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield. Not available for now, seet to 0.
             * @example 5.76
             */
            net_apy: number;
            /**
             * @description State of the ZETACHAIN stake
             * @example active
             * @enum {string}
             */
            state: "active" | "deactivating" | "inactive";
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /** @description permissions related to the stake currently active, ignored if there is no ongoing grants */
            permissions: {
                /**
                 * @description whether the stake is recipient (grantee) or the giver (granter) of the permissions
                 * @example granter
                 */
                source: string;
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
                 * @example Staking.MsgDelegate
                 */
                permission: string;
                /**
                 * Format: date-time
                 * @description Exact time at which the permissions will be revoked
                 * @example 2023-01-10T01:12:34Z
                 */
                expires_at?: string | null;
                /**
                 * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "zetavaloper1xyz",
                 *       "zetavaloper1abc"
                 *     ]
                 */
                allow_list?: string[] | null;
                /**
                 * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "zetavaloper1xyz",
                 *       "zetavaloper1abc"
                 *     ]
                 */
                deny_list?: string[] | null;
            }[];
            /** @description unbondings currently active on the stakes. ignored if no unbondings are returned */
            unbondings: {
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * Format: date-time
                 * @description Exact time at which the unbonding will take effect
                 * @example 2023-01-10T01:12:34Z
                 */
                completion_time: string;
                /**
                 * @description Amount currently associated with the unbonding (slashes included)
                 * @example 129300
                 */
                balance: string;
                /**
                 * @description Amount expected at creation (slashes non-included)
                 * @example 150300
                 */
                initial_balance: string;
            }[];
        };
        PostZETAStakesPayload: {
            stakes: {
                /**
                 * @description Stake id {validator_address}_{delegator_address}
                 * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe_zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460}
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        ZETAStakeMessage: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.MsgDelegate
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "delegatorAddress": "zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460",
             *       "validatorAddress": "zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe",
             *       "amount": {
             *         "denom": "azeta",
             *         "amount": "1000000"
             *       }
             *     }
             */
            value?: Record<string, never>;
        };
        ZETAStakeMessageRestake: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.StakeAuthorization
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "allowList": {
             *         "address": [
             *           "zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe"
             *         ]
             *       },
             *       "AuthorizationType": 1
             *     }
             */
            value?: Record<string, never>;
        };
        ZETAStakeUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "azeta",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description List of messages included in the transaction.
             * @example [
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *         "value": {
             *           "delegatorAddress": "zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460",
             *           "validatorAddress": "zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe",
             *           "amount": {
             *             "denom": "azeta",
             *             "amount": "1000000"
             *           }
             *         }
             *       }
             *     ]
             */
            messages: components["schemas"]["ZETAStakeMessage"][];
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        ZETAUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Message included in the transaction
             * @example {
             *       "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *       "value": {
             *         "delegatorAddress": "zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460",
             *         "validatorAddress": "zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe",
             *         "amount": {
             *           "denom": "azeta",
             *           "amount": "1000000"
             *         }
             *       }
             *     }
             */
            message: Record<string, never>;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "azeta",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        ZETASignedTx: {
            /**
             * @description Serialized signed transaction in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signed_tx_serialized: string;
        };
        ZETATxHash: {
            /**
             * @description Hash of the transaction
             * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
             */
            tx_hash: string;
        };
        ZETAPrepareTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Transaction signature serialized in hex
             * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signature: string;
        };
        ZETABroadcastTxPayload: {
            /**
             * @description Signed transaction serialized in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            tx_serialized: string;
        };
        ZETATxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
             * @example {
             *       "height": 16007296,
             *       "txIndex": 0,
             *       "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
             *       "code": 0,
             *       "events": [
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000azeta"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "zeta17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000azeta"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "zeta17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000azeta"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "fee",
             *               "value": "5000azeta"
             *             },
             *             {
             *               "key": "fee_payer",
             *               "value": "zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "acc_seq",
             *               "value": "zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "signature",
             *               "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "action",
             *               "value": "/cosmos.staking.v1beta1.MsgDelegate"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "zeta1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5azeta"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5azeta"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "zeta1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5azeta"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "zeta1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "withdraw_rewards",
             *           "attributes": [
             *             {
             *               "key": "amount",
             *               "value": "5azeta"
             *             },
             *             {
             *               "key": "validator",
             *               "value": "zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000azeta"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "zeta1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000azeta"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "delegate",
             *           "attributes": [
             *             {
             *               "key": "validator",
             *               "value": "zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000azeta"
             *             },
             *             {
             *               "key": "new_shares",
             *               "value": "100000.000000000000000000"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "module",
             *               "value": "staking"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         }
             *       ],
             *       "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5azeta\"},{\"key\":\"receiver\",\"value\":\"zeta1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000azeta\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"zeta1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5azeta\"},{\"key\":\"spender\",\"value\":\"zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000azeta\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe\"},{\"key\":\"amount\",\"value\":\"100000azeta\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"zeta1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"zeta19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"zeta1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5azeta\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5azeta\"},{\"key\":\"validator\",\"value\":\"zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe\"}]}]}]",
             *       "tx": {
             *         "0": 10,
             *         "1": 160,
             *         "2": 1,
             *         "3": 10,
             *         "4": 157,
             *         "5": 1,
             *         "6": 10,
             *         "7": 35,
             *         "8": 47,
             *         "9": 99,
             *         "10": 111,
             *         "11": 115,
             *         "12": 109,
             *         "13": 111,
             *         "14": 115,
             *         "15": 46,
             *         "16": 115,
             *         "17": 116,
             *         "18": 97,
             *         "19": 107,
             *         "20": 105,
             *         "21": 110,
             *         "22": 103,
             *         "23": 46,
             *         "24": 118,
             *         "25": 49,
             *         "26": 98,
             *         "27": 101,
             *         "28": 116,
             *         "29": 97,
             *         "30": 49,
             *         "31": 46,
             *         "32": 77,
             *         "33": 115,
             *         "34": 103,
             *         "35": 68,
             *         "36": 101,
             *         "37": 108,
             *         "38": 101,
             *         "39": 103,
             *         "40": 97,
             *         "41": 116,
             *         "42": 101,
             *         "43": 18,
             *         "44": 118,
             *         "45": 10,
             *         "46": 45,
             *         "47": 99,
             *         "48": 111,
             *         "49": 115,
             *         "50": 109,
             *         "51": 111,
             *         "52": 115,
             *         "53": 49,
             *         "54": 57,
             *         "55": 99,
             *         "56": 57,
             *         "57": 102,
             *         "58": 100,
             *         "59": 104,
             *         "60": 52,
             *         "61": 56,
             *         "62": 56,
             *         "63": 118,
             *         "64": 113,
             *         "65": 106,
             *         "66": 99,
             *         "67": 108,
             *         "68": 108,
             *         "69": 116,
             *         "70": 119,
             *         "71": 112,
             *         "72": 54,
             *         "73": 56,
             *         "74": 106,
             *         "75": 109,
             *         "76": 53,
             *         "77": 48,
             *         "78": 121,
             *         "79": 100,
             *         "80": 119,
             *         "81": 121,
             *         "82": 104,
             *         "83": 51,
             *         "84": 54,
             *         "85": 106,
             *         "86": 113,
             *         "87": 101,
             *         "88": 97,
             *         "89": 116,
             *         "90": 101,
             *         "91": 118,
             *         "92": 18,
             *         "93": 52,
             *         "94": 99,
             *         "95": 111,
             *         "96": 115,
             *         "97": 109,
             *         "98": 111,
             *         "99": 115,
             *         "100": 118,
             *         "101": 97,
             *         "102": 108,
             *         "103": 111,
             *         "104": 112,
             *         "105": 101,
             *         "106": 114,
             *         "107": 49,
             *         "108": 54,
             *         "109": 121,
             *         "110": 115,
             *         "111": 48,
             *         "112": 101,
             *         "113": 103,
             *         "114": 57,
             *         "115": 51,
             *         "116": 53,
             *         "117": 109,
             *         "118": 107,
             *         "119": 113,
             *         "120": 112,
             *         "121": 107,
             *         "122": 121,
             *         "123": 100,
             *         "124": 107,
             *         "125": 103,
             *         "126": 102,
             *         "127": 99,
             *         "128": 106,
             *         "129": 57,
             *         "130": 97,
             *         "131": 103,
             *         "132": 101,
             *         "133": 50,
             *         "134": 97,
             *         "135": 117,
             *         "136": 56,
             *         "137": 108,
             *         "138": 57,
             *         "139": 54,
             *         "140": 110,
             *         "141": 97,
             *         "142": 101,
             *         "143": 114,
             *         "144": 101,
             *         "145": 57,
             *         "146": 26,
             *         "147": 15,
             *         "148": 10,
             *         "149": 5,
             *         "150": 117,
             *         "151": 97,
             *         "152": 116,
             *         "153": 111,
             *         "154": 109,
             *         "155": 18,
             *         "156": 6,
             *         "157": 49,
             *         "158": 48,
             *         "159": 48,
             *         "160": 48,
             *         "161": 48,
             *         "162": 48,
             *         "163": 18,
             *         "164": 103,
             *         "165": 10,
             *         "166": 80,
             *         "167": 10,
             *         "168": 70,
             *         "169": 10,
             *         "170": 31,
             *         "171": 47,
             *         "172": 99,
             *         "173": 111,
             *         "174": 115,
             *         "175": 109,
             *         "176": 111,
             *         "177": 115,
             *         "178": 46,
             *         "179": 99,
             *         "180": 114,
             *         "181": 121,
             *         "182": 112,
             *         "183": 116,
             *         "184": 111,
             *         "185": 46,
             *         "186": 115,
             *         "187": 101,
             *         "188": 99,
             *         "189": 112,
             *         "190": 50,
             *         "191": 53,
             *         "192": 54,
             *         "193": 107,
             *         "194": 49,
             *         "195": 46,
             *         "196": 80,
             *         "197": 117,
             *         "198": 98,
             *         "199": 75,
             *         "200": 101,
             *         "201": 121,
             *         "202": 18,
             *         "203": 35,
             *         "204": 10,
             *         "205": 33,
             *         "206": 3,
             *         "207": 156,
             *         "208": 228,
             *         "209": 123,
             *         "210": 42,
             *         "211": 129,
             *         "212": 61,
             *         "213": 19,
             *         "214": 135,
             *         "215": 97,
             *         "216": 49,
             *         "217": 169,
             *         "218": 195,
             *         "219": 190,
             *         "220": 119,
             *         "221": 232,
             *         "222": 196,
             *         "223": 175,
             *         "224": 164,
             *         "225": 158,
             *         "226": 148,
             *         "227": 135,
             *         "228": 68,
             *         "229": 171,
             *         "230": 190,
             *         "231": 225,
             *         "232": 31,
             *         "233": 147,
             *         "234": 158,
             *         "235": 42,
             *         "236": 66,
             *         "237": 15,
             *         "238": 70,
             *         "239": 18,
             *         "240": 4,
             *         "241": 10,
             *         "242": 2,
             *         "243": 8,
             *         "244": 1,
             *         "245": 24,
             *         "246": 33,
             *         "247": 18,
             *         "248": 19,
             *         "249": 10,
             *         "250": 13,
             *         "251": 10,
             *         "252": 5,
             *         "253": 117,
             *         "254": 97,
             *         "255": 116,
             *         "256": 111,
             *         "257": 109,
             *         "258": 18,
             *         "259": 4,
             *         "260": 53,
             *         "261": 48,
             *         "262": 48,
             *         "263": 48,
             *         "264": 16,
             *         "265": 224,
             *         "266": 167,
             *         "267": 18,
             *         "268": 26,
             *         "269": 64,
             *         "270": 25,
             *         "271": 31,
             *         "272": 135,
             *         "273": 165,
             *         "274": 77,
             *         "275": 206,
             *         "276": 175,
             *         "277": 182,
             *         "278": 171,
             *         "279": 154,
             *         "280": 95,
             *         "281": 17,
             *         "282": 42,
             *         "283": 19,
             *         "284": 68,
             *         "285": 76,
             *         "286": 163,
             *         "287": 126,
             *         "288": 73,
             *         "289": 160,
             *         "290": 41,
             *         "291": 229,
             *         "292": 49,
             *         "293": 187,
             *         "294": 33,
             *         "295": 48,
             *         "296": 31,
             *         "297": 215,
             *         "298": 46,
             *         "299": 157,
             *         "300": 57,
             *         "301": 3,
             *         "302": 4,
             *         "303": 199,
             *         "304": 99,
             *         "305": 204,
             *         "306": 165,
             *         "307": 169,
             *         "308": 118,
             *         "309": 10,
             *         "310": 99,
             *         "311": 29,
             *         "312": 200,
             *         "313": 87,
             *         "314": 5,
             *         "315": 221,
             *         "316": 107,
             *         "317": 8,
             *         "318": 181,
             *         "319": 15,
             *         "320": 95,
             *         "321": 255,
             *         "322": 125,
             *         "323": 93,
             *         "324": 232,
             *         "325": 215,
             *         "326": 59,
             *         "327": 44,
             *         "328": 235,
             *         "329": 209,
             *         "330": 244,
             *         "331": 195,
             *         "332": 182,
             *         "333": 160
             *       },
             *       "gasUsed": 167798,
             *       "gasWanted": 300000
             *     }
             */
            receipt?: Record<string, never>;
        };
        ZETACraftUnstakeTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator: string;
            /**
             * @description Amount to unstake in uZETA. Omit to unstake all the delegated amount
             * @example 1000000000000000000000000
             */
            amount_azeta?: string;
        };
        ZETACraftRedelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to which the new stake will be linked
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator source address of current stake
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_source: string;
            /**
             * @description Validator destination address to which redelegate the stake
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_destination: string;
            /**
             * @description Amount to redelegate in uZETA
             * @example 1000000000000000000000000
             */
            amount_azeta?: string;
        };
        ZETACraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator: string;
            /**
             * @description Amount to stake in azeta
             * @example 1000000000000000000000000
             */
            amount_azeta: string;
        };
        ZETACraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address: string;
        };
        ZETACraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator: string;
        };
        ZETAReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in uZETA during the day
             * @example 3575891083876864200000
             */
            rewards: string;
            /**
             * @description Staked balance in uZETA at the end of the day
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield
             * @example 20.76
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            balance_usd?: number;
        };
        ZETAOperationDelegate: {
            /**
             * @description Operation type
             * @example staking.MsgDelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uZETA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            delegator_address: string;
            /**
             * @description Amount added to the staked balance in uZETA
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uZETA
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        ZETAOperationUndelegate: {
            /**
             * @description Operation type
             * @example staking.MsgUndelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uZETA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            delegator_address: string;
            /**
             * @description Amount removed from the staked balance in uZETA
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uZETA
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        ZETAOperationRedelegate: {
            /**
             * @description Operation type
             * @example staking.MsgBeginRedelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uZETA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Destination validator address
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Source validator address
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address_source?: string;
            /**
             * @description Delegator address
             * @example zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            delegator_address: string;
            /**
             * @description Amount moved from the source validator staked balance to the destination validator staked balance in uZETA
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed from the destination validator alongside the operation in uZETA
             * @example 10841
             */
            withdraw_rewards?: string;
            /**
             * @description Rewards auto-claimed from the source validator alongside the operation in uZETA
             * @example 10841
             */
            withdraw_rewards_source?: string;
        };
        ZETAOperationWithdrawRewards: {
            /**
             * @description Operation type
             * @example distr.MsgWithdrawDelegatorReward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uZETA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            delegator_address: string;
            /**
             * @description Rewards claimed alongside the operation in uZETA
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        ZETAOperationGrant: {
            /**
             * @description Operation type
             * @example Authz.Grant
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uZETA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Recipient of the permissions
             * @example zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            grantee?: string;
            /**
             * @description Owner of the stake giving the permissions
             * @example zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            granter?: string;
            /**
             * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
             * @example Staking.MsgDelegate
             */
            permission?: string;
            /**
             * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
             * @example [
             *       "zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460",
             *       "zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460"
             *     ]
             */
            allow_list?: string[] | null;
            /**
             * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
             * @example [
             *       "zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460",
             *       "zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460"
             *     ]
             */
            deny_list?: string[] | null;
        };
        ZETAOperationExec: {
            /**
             * @description Operation type
             * @example Authz.Exec
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uZETA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uZETA
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uZETA
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uZETA
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        ZETAOperationContract: {
            /**
             * @description Contract type
             * @example wasm.Contract
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uZETA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description address of the contract been called
             * @example zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            contract: string;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example zetavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uZETA
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uZETA
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uZETA
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        ZETANetworkStats: {
            /**
             * @description Price of ZETACHAIN in USD
             * @example 10.53
             */
            zeta_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of ZETACHAIN currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description ZETACHAIN inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        /**
         * @description Decoded transaction
         * @example {
         *       "authInfo": {
         *         "signerInfos": [
         *           {
         *             "publicKey": {
         *               "typeUrl": "/cosmos.crypto.secp256k1.PubKey",
         *               "value": {
         *                 "0": 10,
         *                 "1": 33,
         *                 "2": 3,
         *                 "3": 156,
         *                 "4": 228,
         *                 "5": 123,
         *                 "6": 42,
         *                 "7": 129,
         *                 "8": 61,
         *                 "9": 19,
         *                 "10": 135,
         *                 "11": 97,
         *                 "12": 49,
         *                 "13": 169,
         *                 "14": 195,
         *                 "15": 190,
         *                 "16": 119,
         *                 "17": 232,
         *                 "18": 196,
         *                 "19": 175,
         *                 "20": 164,
         *                 "21": 158,
         *                 "22": 148,
         *                 "23": 135,
         *                 "24": 68,
         *                 "25": 171,
         *                 "26": 190,
         *                 "27": 225,
         *                 "28": 31,
         *                 "29": 147,
         *                 "30": 158,
         *                 "31": 42,
         *                 "32": 66,
         *                 "33": 15,
         *                 "34": 70
         *               }
         *             },
         *             "modeInfo": {
         *               "single": {
         *                 "mode": 1
         *               }
         *             },
         *             "sequence": {
         *               "low": 102,
         *               "high": 0,
         *               "unsigned": true
         *             }
         *           }
         *         ],
         *         "fee": {
         *           "amount": [
         *             {
         *               "denom": "azeta",
         *               "amount": "5000"
         *             }
         *           ],
         *           "gasLimit": {
         *             "low": 2000000,
         *             "high": 0,
         *             "unsigned": true
         *           },
         *           "payer": "",
         *           "granter": ""
         *         }
         *       },
         *       "body": {
         *         "messages": [
         *           {
         *             "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
         *             "value": {
         *               "0": 10,
         *               "1": 45,
         *               "2": 99,
         *               "3": 111,
         *               "4": 115,
         *               "5": 109,
         *               "6": 111,
         *               "7": 115,
         *               "8": 49,
         *               "9": 57,
         *               "10": 99,
         *               "11": 57,
         *               "12": 102,
         *               "13": 100,
         *               "14": 104,
         *               "15": 52,
         *               "16": 56,
         *               "17": 56,
         *               "18": 118,
         *               "19": 113,
         *               "20": 106,
         *               "21": 99,
         *               "22": 108,
         *               "23": 108,
         *               "24": 116,
         *               "25": 119,
         *               "26": 112,
         *               "27": 54,
         *               "28": 56,
         *               "29": 106,
         *               "30": 109,
         *               "31": 53,
         *               "32": 48,
         *               "33": 121,
         *               "34": 100,
         *               "35": 119,
         *               "36": 121,
         *               "37": 104,
         *               "38": 51,
         *               "39": 54,
         *               "40": 106,
         *               "41": 113,
         *               "42": 101,
         *               "43": 97,
         *               "44": 116,
         *               "45": 101,
         *               "46": 118,
         *               "47": 18,
         *               "48": 52,
         *               "49": 99,
         *               "50": 111,
         *               "51": 115,
         *               "52": 109,
         *               "53": 111,
         *               "54": 115,
         *               "55": 118,
         *               "56": 97,
         *               "57": 108,
         *               "58": 111,
         *               "59": 112,
         *               "60": 101,
         *               "61": 114,
         *               "62": 49,
         *               "63": 54,
         *               "64": 121,
         *               "65": 115,
         *               "66": 48,
         *               "67": 101,
         *               "68": 103,
         *               "69": 57,
         *               "70": 51,
         *               "71": 53,
         *               "72": 109,
         *               "73": 107,
         *               "74": 113,
         *               "75": 112,
         *               "76": 107,
         *               "77": 121,
         *               "78": 100,
         *               "79": 107,
         *               "80": 103,
         *               "81": 102,
         *               "82": 99,
         *               "83": 106,
         *               "84": 57,
         *               "85": 97,
         *               "86": 103,
         *               "87": 101,
         *               "88": 50,
         *               "89": 97,
         *               "90": 117,
         *               "91": 56,
         *               "92": 108,
         *               "93": 57,
         *               "94": 54,
         *               "95": 110,
         *               "96": 97,
         *               "97": 101,
         *               "98": 114,
         *               "99": 101,
         *               "100": 57,
         *               "101": 26,
         *               "102": 16,
         *               "103": 10,
         *               "104": 5,
         *               "105": 117,
         *               "106": 97,
         *               "107": 116,
         *               "108": 111,
         *               "109": 109,
         *               "110": 18,
         *               "111": 7,
         *               "112": 49,
         *               "113": 48,
         *               "114": 48,
         *               "115": 48,
         *               "116": 48,
         *               "117": 48,
         *               "118": 48
         *             }
         *           }
         *         ],
         *         "memo": "",
         *         "timeoutHeight": {
         *           "low": 0,
         *           "high": 0,
         *           "unsigned": true
         *         },
         *         "extensionOptions": [],
         *         "nonCriticalExtensionOptions": []
         *       },
         *       "signatures": [
         *         {
         *           "0": 116,
         *           "1": 104,
         *           "2": 101,
         *           "3": 116,
         *           "4": 97,
         *           "5": 45,
         *           "6": 116,
         *           "7": 101,
         *           "8": 115,
         *           "9": 116,
         *           "10": 110,
         *           "11": 101,
         *           "12": 116,
         *           "13": 45,
         *           "14": 48,
         *           "15": 48,
         *           "16": 49
         *         }
         *       ]
         *     }
         */
        ZETATxDecoding: Record<string, never>;
        ZETACraftSendTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Recipient address
             * @example zeta1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            to: string;
            /**
             * @description Amount to send in azeta
             * @example 1000000000000000000000000
             */
            amount_azeta: string;
        };
        ZETAGetBalancePayload: {
            /**
             * @description Wallet address
             * @example zeta1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            address: string;
            /**
             * @description The denomination of the balance to query
             * @example azeta
             */
            denom: string;
        };
        KAVAStake: {
            /**
             * @description Public key of the validator
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Public key of the delegator
             * @example kava1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * Format: date-time
             * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 2023-06-16T03:13:23.058547Z
             */
            delegated_at?: string;
            /**
             * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 15739267
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of undelegation for the stake
             * @example 2023-07-14T03:56:13.561156Z
             */
            undelegated_at?: string;
            /**
             * @description Block of undelegation for the stake
             * @example 16126416
             */
            undelegated_block?: number;
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation in uKAVA. Includes currently available rewards not yet withdrawn.
             * @example 735573808534727891000000
             */
            rewards: string;
            /**
             * @description Available rewards in uKAVA that can be withdrawn from this stake
             * @example 36748808534727891000000
             */
            available_rewards: string;
            /**
             * @description Staked balance on this stake in uKAVA
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 5.76
             */
            net_apy: number;
            /**
             * @description State of the Kava stake
             * @example active
             * @enum {string}
             */
            state: "active" | "deactivating" | "inactive";
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /** @description permissions related to the stake currently active, ignored if there is no ongoing grants */
            permissions: {
                /**
                 * @description whether the stake is recipient (grantee) or the giver (granter) of the permissions
                 * @example granter
                 */
                source: string;
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
                 * @example Staking.MsgDelegate
                 */
                permission: string;
                /**
                 * Format: date-time
                 * @description Exact time at which the permissions will be revoked
                 * @example 2023-01-10T01:12:34Z
                 */
                expires_at?: string | null;
                /**
                 * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "kavavaloper1xyz",
                 *       "kavavaloper1abc"
                 *     ]
                 */
                allow_list?: string[] | null;
                /**
                 * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "kavavaloper1xyz",
                 *       "kavavaloper1abc"
                 *     ]
                 */
                deny_list?: string[] | null;
            }[];
            /** @description unbondings currently active on the stakes. ignored if no unbondings are returned */
            unbondings: {
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * Format: date-time
                 * @description Exact time at which the unbonding will take effect
                 * @example 2023-01-10T01:12:34Z
                 */
                completion_time: string;
                /**
                 * @description Amount currently associated with the unbonding (slashes included)
                 * @example 129300
                 */
                balance: string;
                /**
                 * @description Amount expected at creation (slashes non-included)
                 * @example 150300
                 */
                initial_balance: string;
            }[];
        };
        PostKAVAStakesPayload: {
            stakes: {
                /**
                 * @description Stake id {validator_address}_{delegator_address}
                 * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe_kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460}
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        KAVAStakeMessage: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.MsgDelegate
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "delegatorAddress": "kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460",
             *       "validatorAddress": "kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe",
             *       "amount": {
             *         "denom": "ukava",
             *         "amount": "1000000"
             *       }
             *     }
             */
            value?: Record<string, never>;
        };
        KAVAStakeMessageRestake: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.StakeAuthorization
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "allowList": {
             *         "address": [
             *           "kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe"
             *         ]
             *       },
             *       "AuthorizationType": 1
             *     }
             */
            value?: Record<string, never>;
        };
        KAVAStakeUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "ukava",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description List of messages included in the transaction.
             * @example [
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *         "value": {
             *           "delegatorAddress": "kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460",
             *           "validatorAddress": "kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe",
             *           "amount": {
             *             "denom": "ukava",
             *             "amount": "1000000"
             *           }
             *         }
             *       }
             *     ]
             */
            messages: components["schemas"]["KAVAStakeMessage"][];
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        KAVAUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Message included in the transaction
             * @example {
             *       "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *       "value": {
             *         "delegatorAddress": "kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460",
             *         "validatorAddress": "kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe",
             *         "amount": {
             *           "denom": "ukava",
             *           "amount": "1000000"
             *         }
             *       }
             *     }
             */
            message: Record<string, never>;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "ukava",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        KAVASignedTx: {
            /**
             * @description Serialized signed transaction in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signed_tx_serialized: string;
        };
        KAVATxHash: {
            /**
             * @description Hash of the transaction
             * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
             */
            tx_hash: string;
        };
        KAVAPrepareTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Transaction signature serialized in hex
             * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signature: string;
        };
        KAVABroadcastTxPayload: {
            /**
             * @description Signed transaction serialized in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            tx_serialized: string;
        };
        KAVATxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
             * @example {
             *       "height": 16007296,
             *       "txIndex": 0,
             *       "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
             *       "code": 0,
             *       "events": [
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000ukava"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "kava17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000ukava"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "kava17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000ukava"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "fee",
             *               "value": "5000ukava"
             *             },
             *             {
             *               "key": "fee_payer",
             *               "value": "kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "acc_seq",
             *               "value": "kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "signature",
             *               "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "action",
             *               "value": "/cosmos.staking.v1beta1.MsgDelegate"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "kava1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5ukava"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5ukava"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "kava1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5ukava"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "kava1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "withdraw_rewards",
             *           "attributes": [
             *             {
             *               "key": "amount",
             *               "value": "5ukava"
             *             },
             *             {
             *               "key": "validator",
             *               "value": "kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000ukava"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "kava1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000ukava"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "delegate",
             *           "attributes": [
             *             {
             *               "key": "validator",
             *               "value": "kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000ukava"
             *             },
             *             {
             *               "key": "new_shares",
             *               "value": "100000.000000000000000000"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "module",
             *               "value": "staking"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         }
             *       ],
             *       "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5ukava\"},{\"key\":\"receiver\",\"value\":\"kava1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000ukava\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"kava1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5ukava\"},{\"key\":\"spender\",\"value\":\"kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000ukava\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe\"},{\"key\":\"amount\",\"value\":\"100000ukava\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"kava1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"kava19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"kava1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5ukava\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5ukava\"},{\"key\":\"validator\",\"value\":\"kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe\"}]}]}]",
             *       "tx": {
             *         "0": 10,
             *         "1": 160,
             *         "2": 1,
             *         "3": 10,
             *         "4": 157,
             *         "5": 1,
             *         "6": 10,
             *         "7": 35,
             *         "8": 47,
             *         "9": 99,
             *         "10": 111,
             *         "11": 115,
             *         "12": 109,
             *         "13": 111,
             *         "14": 115,
             *         "15": 46,
             *         "16": 115,
             *         "17": 116,
             *         "18": 97,
             *         "19": 107,
             *         "20": 105,
             *         "21": 110,
             *         "22": 103,
             *         "23": 46,
             *         "24": 118,
             *         "25": 49,
             *         "26": 98,
             *         "27": 101,
             *         "28": 116,
             *         "29": 97,
             *         "30": 49,
             *         "31": 46,
             *         "32": 77,
             *         "33": 115,
             *         "34": 103,
             *         "35": 68,
             *         "36": 101,
             *         "37": 108,
             *         "38": 101,
             *         "39": 103,
             *         "40": 97,
             *         "41": 116,
             *         "42": 101,
             *         "43": 18,
             *         "44": 118,
             *         "45": 10,
             *         "46": 45,
             *         "47": 99,
             *         "48": 111,
             *         "49": 115,
             *         "50": 109,
             *         "51": 111,
             *         "52": 115,
             *         "53": 49,
             *         "54": 57,
             *         "55": 99,
             *         "56": 57,
             *         "57": 102,
             *         "58": 100,
             *         "59": 104,
             *         "60": 52,
             *         "61": 56,
             *         "62": 56,
             *         "63": 118,
             *         "64": 113,
             *         "65": 106,
             *         "66": 99,
             *         "67": 108,
             *         "68": 108,
             *         "69": 116,
             *         "70": 119,
             *         "71": 112,
             *         "72": 54,
             *         "73": 56,
             *         "74": 106,
             *         "75": 109,
             *         "76": 53,
             *         "77": 48,
             *         "78": 121,
             *         "79": 100,
             *         "80": 119,
             *         "81": 121,
             *         "82": 104,
             *         "83": 51,
             *         "84": 54,
             *         "85": 106,
             *         "86": 113,
             *         "87": 101,
             *         "88": 97,
             *         "89": 116,
             *         "90": 101,
             *         "91": 118,
             *         "92": 18,
             *         "93": 52,
             *         "94": 99,
             *         "95": 111,
             *         "96": 115,
             *         "97": 109,
             *         "98": 111,
             *         "99": 115,
             *         "100": 118,
             *         "101": 97,
             *         "102": 108,
             *         "103": 111,
             *         "104": 112,
             *         "105": 101,
             *         "106": 114,
             *         "107": 49,
             *         "108": 54,
             *         "109": 121,
             *         "110": 115,
             *         "111": 48,
             *         "112": 101,
             *         "113": 103,
             *         "114": 57,
             *         "115": 51,
             *         "116": 53,
             *         "117": 109,
             *         "118": 107,
             *         "119": 113,
             *         "120": 112,
             *         "121": 107,
             *         "122": 121,
             *         "123": 100,
             *         "124": 107,
             *         "125": 103,
             *         "126": 102,
             *         "127": 99,
             *         "128": 106,
             *         "129": 57,
             *         "130": 97,
             *         "131": 103,
             *         "132": 101,
             *         "133": 50,
             *         "134": 97,
             *         "135": 117,
             *         "136": 56,
             *         "137": 108,
             *         "138": 57,
             *         "139": 54,
             *         "140": 110,
             *         "141": 97,
             *         "142": 101,
             *         "143": 114,
             *         "144": 101,
             *         "145": 57,
             *         "146": 26,
             *         "147": 15,
             *         "148": 10,
             *         "149": 5,
             *         "150": 117,
             *         "151": 97,
             *         "152": 116,
             *         "153": 111,
             *         "154": 109,
             *         "155": 18,
             *         "156": 6,
             *         "157": 49,
             *         "158": 48,
             *         "159": 48,
             *         "160": 48,
             *         "161": 48,
             *         "162": 48,
             *         "163": 18,
             *         "164": 103,
             *         "165": 10,
             *         "166": 80,
             *         "167": 10,
             *         "168": 70,
             *         "169": 10,
             *         "170": 31,
             *         "171": 47,
             *         "172": 99,
             *         "173": 111,
             *         "174": 115,
             *         "175": 109,
             *         "176": 111,
             *         "177": 115,
             *         "178": 46,
             *         "179": 99,
             *         "180": 114,
             *         "181": 121,
             *         "182": 112,
             *         "183": 116,
             *         "184": 111,
             *         "185": 46,
             *         "186": 115,
             *         "187": 101,
             *         "188": 99,
             *         "189": 112,
             *         "190": 50,
             *         "191": 53,
             *         "192": 54,
             *         "193": 107,
             *         "194": 49,
             *         "195": 46,
             *         "196": 80,
             *         "197": 117,
             *         "198": 98,
             *         "199": 75,
             *         "200": 101,
             *         "201": 121,
             *         "202": 18,
             *         "203": 35,
             *         "204": 10,
             *         "205": 33,
             *         "206": 3,
             *         "207": 156,
             *         "208": 228,
             *         "209": 123,
             *         "210": 42,
             *         "211": 129,
             *         "212": 61,
             *         "213": 19,
             *         "214": 135,
             *         "215": 97,
             *         "216": 49,
             *         "217": 169,
             *         "218": 195,
             *         "219": 190,
             *         "220": 119,
             *         "221": 232,
             *         "222": 196,
             *         "223": 175,
             *         "224": 164,
             *         "225": 158,
             *         "226": 148,
             *         "227": 135,
             *         "228": 68,
             *         "229": 171,
             *         "230": 190,
             *         "231": 225,
             *         "232": 31,
             *         "233": 147,
             *         "234": 158,
             *         "235": 42,
             *         "236": 66,
             *         "237": 15,
             *         "238": 70,
             *         "239": 18,
             *         "240": 4,
             *         "241": 10,
             *         "242": 2,
             *         "243": 8,
             *         "244": 1,
             *         "245": 24,
             *         "246": 33,
             *         "247": 18,
             *         "248": 19,
             *         "249": 10,
             *         "250": 13,
             *         "251": 10,
             *         "252": 5,
             *         "253": 117,
             *         "254": 97,
             *         "255": 116,
             *         "256": 111,
             *         "257": 109,
             *         "258": 18,
             *         "259": 4,
             *         "260": 53,
             *         "261": 48,
             *         "262": 48,
             *         "263": 48,
             *         "264": 16,
             *         "265": 224,
             *         "266": 167,
             *         "267": 18,
             *         "268": 26,
             *         "269": 64,
             *         "270": 25,
             *         "271": 31,
             *         "272": 135,
             *         "273": 165,
             *         "274": 77,
             *         "275": 206,
             *         "276": 175,
             *         "277": 182,
             *         "278": 171,
             *         "279": 154,
             *         "280": 95,
             *         "281": 17,
             *         "282": 42,
             *         "283": 19,
             *         "284": 68,
             *         "285": 76,
             *         "286": 163,
             *         "287": 126,
             *         "288": 73,
             *         "289": 160,
             *         "290": 41,
             *         "291": 229,
             *         "292": 49,
             *         "293": 187,
             *         "294": 33,
             *         "295": 48,
             *         "296": 31,
             *         "297": 215,
             *         "298": 46,
             *         "299": 157,
             *         "300": 57,
             *         "301": 3,
             *         "302": 4,
             *         "303": 199,
             *         "304": 99,
             *         "305": 204,
             *         "306": 165,
             *         "307": 169,
             *         "308": 118,
             *         "309": 10,
             *         "310": 99,
             *         "311": 29,
             *         "312": 200,
             *         "313": 87,
             *         "314": 5,
             *         "315": 221,
             *         "316": 107,
             *         "317": 8,
             *         "318": 181,
             *         "319": 15,
             *         "320": 95,
             *         "321": 255,
             *         "322": 125,
             *         "323": 93,
             *         "324": 232,
             *         "325": 215,
             *         "326": 59,
             *         "327": 44,
             *         "328": 235,
             *         "329": 209,
             *         "330": 244,
             *         "331": 195,
             *         "332": 182,
             *         "333": 160
             *       },
             *       "gasUsed": 167798,
             *       "gasWanted": 300000
             *     }
             */
            receipt?: Record<string, never>;
        };
        KAVACraftUnstakeTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator: string;
            /**
             * @description Amount to unstake in uKAVA. Omit to unstake all the delegated amount
             * @example 1000000000000000000000000
             */
            amount_ukava?: string;
        };
        KAVACraftRedelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to which the new stake will be linked
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator source address of current stake
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_source: string;
            /**
             * @description Validator destination address to which redelegate the stake
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_destination: string;
            /**
             * @description Amount to redelegate in uKAVA
             * @example 1000000000000000000000000
             */
            amount_ukava?: string;
        };
        KAVACraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator: string;
            /**
             * @description Amount to stake in ukava
             * @example 1000000000000000000000000
             */
            amount_ukava: string;
        };
        KAVACraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address: string;
        };
        KAVACraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator: string;
        };
        KAVAReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in uKAVA during the day
             * @example 3575891083876864200000
             */
            rewards: string;
            /**
             * @description Staked balance in uKAVA at the end of the day
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield
             * @example 20.76
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            balance_usd?: number;
        };
        KAVAOperationDelegate: {
            /**
             * @description Operation type
             * @example staking.MsgDelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uKAVA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            delegator_address: string;
            /**
             * @description Amount added to the staked balance in uKAVA
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uKAVA
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        KAVAOperationUndelegate: {
            /**
             * @description Operation type
             * @example staking.MsgUndelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uKAVA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            delegator_address: string;
            /**
             * @description Amount removed from the staked balance in uKAVA
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uKAVA
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        KAVAOperationRedelegate: {
            /**
             * @description Operation type
             * @example staking.MsgBeginRedelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uKAVA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Destination validator address
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Source validator address
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address_source?: string;
            /**
             * @description Delegator address
             * @example kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            delegator_address: string;
            /**
             * @description Amount moved from the source validator staked balance to the destination validator staked balance in uKAVA
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed from the destination validator alongside the operation in uKAVA
             * @example 10841
             */
            withdraw_rewards?: string;
            /**
             * @description Rewards auto-claimed from the source validator alongside the operation in uKAVA
             * @example 10841
             */
            withdraw_rewards_source?: string;
        };
        KAVAOperationWithdrawRewards: {
            /**
             * @description Operation type
             * @example distr.MsgWithdrawDelegatorReward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uKAVA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            delegator_address: string;
            /**
             * @description Rewards claimed alongside the operation in uKAVA
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        KAVAOperationGrant: {
            /**
             * @description Operation type
             * @example Authz.Grant
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uKAVA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Recipient of the permissions
             * @example kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            grantee?: string;
            /**
             * @description Owner of the stake giving the permissions
             * @example kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            granter?: string;
            /**
             * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
             * @example Staking.MsgDelegate
             */
            permission?: string;
            /**
             * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
             * @example [
             *       "kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460",
             *       "kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460"
             *     ]
             */
            allow_list?: string[] | null;
            /**
             * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
             * @example [
             *       "kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460",
             *       "kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460"
             *     ]
             */
            deny_list?: string[] | null;
        };
        KAVAOperationExec: {
            /**
             * @description Operation type
             * @example Authz.Exec
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uKAVA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uKAVA
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uKAVA
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uKAVA
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        KAVAOperationContract: {
            /**
             * @description Contract type
             * @example wasm.Contract
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uKAVA
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description address of the contract been called
             * @example kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
             */
            contract: string;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example kavavaloper1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3ep3yfhe
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example kava1u9xeaqdjz3kky2ymdhdsn0ra5uy9tc3e93u460
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uKAVA
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uKAVA
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uKAVA
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        KAVANetworkStats: {
            /**
             * @description Price of Kava in USD
             * @example 10.53
             */
            kava_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Kava currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Kava inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        /**
         * @description Decoded transaction
         * @example {
         *       "authInfo": {
         *         "signerInfos": [
         *           {
         *             "publicKey": {
         *               "typeUrl": "/cosmos.crypto.secp256k1.PubKey",
         *               "value": {
         *                 "0": 10,
         *                 "1": 33,
         *                 "2": 3,
         *                 "3": 156,
         *                 "4": 228,
         *                 "5": 123,
         *                 "6": 42,
         *                 "7": 129,
         *                 "8": 61,
         *                 "9": 19,
         *                 "10": 135,
         *                 "11": 97,
         *                 "12": 49,
         *                 "13": 169,
         *                 "14": 195,
         *                 "15": 190,
         *                 "16": 119,
         *                 "17": 232,
         *                 "18": 196,
         *                 "19": 175,
         *                 "20": 164,
         *                 "21": 158,
         *                 "22": 148,
         *                 "23": 135,
         *                 "24": 68,
         *                 "25": 171,
         *                 "26": 190,
         *                 "27": 225,
         *                 "28": 31,
         *                 "29": 147,
         *                 "30": 158,
         *                 "31": 42,
         *                 "32": 66,
         *                 "33": 15,
         *                 "34": 70
         *               }
         *             },
         *             "modeInfo": {
         *               "single": {
         *                 "mode": 1
         *               }
         *             },
         *             "sequence": {
         *               "low": 102,
         *               "high": 0,
         *               "unsigned": true
         *             }
         *           }
         *         ],
         *         "fee": {
         *           "amount": [
         *             {
         *               "denom": "ukava",
         *               "amount": "5000"
         *             }
         *           ],
         *           "gasLimit": {
         *             "low": 2000000,
         *             "high": 0,
         *             "unsigned": true
         *           },
         *           "payer": "",
         *           "granter": ""
         *         }
         *       },
         *       "body": {
         *         "messages": [
         *           {
         *             "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
         *             "value": {
         *               "0": 10,
         *               "1": 45,
         *               "2": 99,
         *               "3": 111,
         *               "4": 115,
         *               "5": 109,
         *               "6": 111,
         *               "7": 115,
         *               "8": 49,
         *               "9": 57,
         *               "10": 99,
         *               "11": 57,
         *               "12": 102,
         *               "13": 100,
         *               "14": 104,
         *               "15": 52,
         *               "16": 56,
         *               "17": 56,
         *               "18": 118,
         *               "19": 113,
         *               "20": 106,
         *               "21": 99,
         *               "22": 108,
         *               "23": 108,
         *               "24": 116,
         *               "25": 119,
         *               "26": 112,
         *               "27": 54,
         *               "28": 56,
         *               "29": 106,
         *               "30": 109,
         *               "31": 53,
         *               "32": 48,
         *               "33": 121,
         *               "34": 100,
         *               "35": 119,
         *               "36": 121,
         *               "37": 104,
         *               "38": 51,
         *               "39": 54,
         *               "40": 106,
         *               "41": 113,
         *               "42": 101,
         *               "43": 97,
         *               "44": 116,
         *               "45": 101,
         *               "46": 118,
         *               "47": 18,
         *               "48": 52,
         *               "49": 99,
         *               "50": 111,
         *               "51": 115,
         *               "52": 109,
         *               "53": 111,
         *               "54": 115,
         *               "55": 118,
         *               "56": 97,
         *               "57": 108,
         *               "58": 111,
         *               "59": 112,
         *               "60": 101,
         *               "61": 114,
         *               "62": 49,
         *               "63": 54,
         *               "64": 121,
         *               "65": 115,
         *               "66": 48,
         *               "67": 101,
         *               "68": 103,
         *               "69": 57,
         *               "70": 51,
         *               "71": 53,
         *               "72": 109,
         *               "73": 107,
         *               "74": 113,
         *               "75": 112,
         *               "76": 107,
         *               "77": 121,
         *               "78": 100,
         *               "79": 107,
         *               "80": 103,
         *               "81": 102,
         *               "82": 99,
         *               "83": 106,
         *               "84": 57,
         *               "85": 97,
         *               "86": 103,
         *               "87": 101,
         *               "88": 50,
         *               "89": 97,
         *               "90": 117,
         *               "91": 56,
         *               "92": 108,
         *               "93": 57,
         *               "94": 54,
         *               "95": 110,
         *               "96": 97,
         *               "97": 101,
         *               "98": 114,
         *               "99": 101,
         *               "100": 57,
         *               "101": 26,
         *               "102": 16,
         *               "103": 10,
         *               "104": 5,
         *               "105": 117,
         *               "106": 97,
         *               "107": 116,
         *               "108": 111,
         *               "109": 109,
         *               "110": 18,
         *               "111": 7,
         *               "112": 49,
         *               "113": 48,
         *               "114": 48,
         *               "115": 48,
         *               "116": 48,
         *               "117": 48,
         *               "118": 48
         *             }
         *           }
         *         ],
         *         "memo": "",
         *         "timeoutHeight": {
         *           "low": 0,
         *           "high": 0,
         *           "unsigned": true
         *         },
         *         "extensionOptions": [],
         *         "nonCriticalExtensionOptions": []
         *       },
         *       "signatures": [
         *         {
         *           "0": 116,
         *           "1": 104,
         *           "2": 101,
         *           "3": 116,
         *           "4": 97,
         *           "5": 45,
         *           "6": 116,
         *           "7": 101,
         *           "8": 115,
         *           "9": 116,
         *           "10": 110,
         *           "11": 101,
         *           "12": 116,
         *           "13": 45,
         *           "14": 48,
         *           "15": 48,
         *           "16": 49
         *         }
         *       ]
         *     }
         */
        KAVATxDecoding: Record<string, never>;
        KAVACraftSendTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Recipient address
             * @example kava1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            to: string;
            /**
             * @description Amount to send in ukava
             * @example 1000000000000000000000000
             */
            amount_ukava: string;
        };
        KAVAGetBalancePayload: {
            /**
             * @description Wallet address
             * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            address: string;
            /**
             * @description The denomination of the balance to query
             * @example ukava
             */
            denom: string;
        };
        FETStake: {
            /**
             * @description Public key of the validator
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Public key of the delegator
             * @example fetch1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * Format: date-time
             * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 2023-06-16T03:13:23.058547Z
             */
            delegated_at?: string;
            /**
             * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 15739267
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of undelegation for the stake
             * @example 2023-07-14T03:56:13.561156Z
             */
            undelegated_at?: string;
            /**
             * @description Block of undelegation for the stake
             * @example 16126416
             */
            undelegated_block?: number;
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation in uFET. Includes currently available rewards not yet withdrawn.
             * @example 735573808534727891000000
             */
            rewards: string;
            /**
             * @description Available rewards in uFET that can be withdrawn from this stake
             * @example 36748808534727891000000
             */
            available_rewards: string;
            /**
             * @description Staked balance on this stake in uFET
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 5.76
             */
            net_apy: number;
            /**
             * @description State of the Fetch stake
             * @example active
             * @enum {string}
             */
            state: "active" | "deactivating" | "inactive";
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /** @description permissions related to the stake currently active, ignored if there is no ongoing grants */
            permissions: {
                /**
                 * @description whether the stake is recipient (grantee) or the giver (granter) of the permissions
                 * @example granter
                 */
                source: string;
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
                 * @example Staking.MsgDelegate
                 */
                permission: string;
                /**
                 * Format: date-time
                 * @description Exact time at which the permissions will be revoked
                 * @example 2023-01-10T01:12:34Z
                 */
                expires_at?: string | null;
                /**
                 * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "fetchvaloper1xyz",
                 *       "fetchvaloper1abc"
                 *     ]
                 */
                allow_list?: string[] | null;
                /**
                 * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "fetchvaloper1xyz",
                 *       "fetchvaloper1abc"
                 *     ]
                 */
                deny_list?: string[] | null;
            }[];
            /** @description unbondings currently active on the stakes. ignored if no unbondings are returned */
            unbondings: {
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * Format: date-time
                 * @description Exact time at which the unbonding will take effect
                 * @example 2023-01-10T01:12:34Z
                 */
                completion_time: string;
                /**
                 * @description Amount currently associated with the unbonding (slashes included)
                 * @example 129300
                 */
                balance: string;
                /**
                 * @description Amount expected at creation (slashes non-included)
                 * @example 150300
                 */
                initial_balance: string;
            }[];
        };
        PostFETStakesPayload: {
            stakes: {
                /**
                 * @description Stake id {validator_address}_{delegator_address}
                 * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu_fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6}
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        FETStakeMessage: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.MsgDelegate
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "delegatorAddress": "fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "validatorAddress": "fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *       "amount": {
             *         "denom": "afet",
             *         "amount": "1000000"
             *       }
             *     }
             */
            value?: Record<string, never>;
        };
        FETStakeMessageRestake: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.StakeAuthorization
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "allowList": {
             *         "address": [
             *           "fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *         ]
             *       },
             *       "AuthorizationType": 1
             *     }
             */
            value?: Record<string, never>;
        };
        FETStakeUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "afet",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description List of messages included in the transaction. The list contains one message for the staking delegation and one more message for rewards restaking in case specified as a parameter (`restake_rewards=true`).
             * @example [
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *         "value": {
             *           "delegatorAddress": "fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *           "validatorAddress": "fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *           "amount": {
             *             "denom": "afet",
             *             "amount": "1000000"
             *           }
             *         }
             *       },
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.StakeAuthorization",
             *         "allowList": {
             *           "address": [
             *             "fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *           ]
             *         },
             *         "AuthorizationType": 1
             *       }
             *     ]
             */
            messages: (components["schemas"]["FETStakeMessage"] | components["schemas"]["FETStakeMessageRestake"])[];
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        FETUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Message included in the transaction
             * @example {
             *       "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *       "value": {
             *         "delegatorAddress": "fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *         "validatorAddress": "fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *         "amount": {
             *           "denom": "afet",
             *           "amount": "1000000"
             *         }
             *       }
             *     }
             */
            message: Record<string, never>;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "afet",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        FETSignedTx: {
            /**
             * @description Serialized signed transaction in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signed_tx_serialized: string;
        };
        FETTxHash: {
            /**
             * @description Hash of the transaction
             * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
             */
            tx_hash: string;
        };
        FETPrepareTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Transaction signature serialized in hex
             * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signature: string;
        };
        FETBroadcastTxPayload: {
            /**
             * @description Signed transaction serialized in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            tx_serialized: string;
        };
        FETTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
             * @example {
             *       "height": 16007296,
             *       "txIndex": 0,
             *       "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
             *       "code": 0,
             *       "events": [
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000afet"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "fetch17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000afet"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "fetch17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000afet"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "fee",
             *               "value": "5000afet"
             *             },
             *             {
             *               "key": "fee_payer",
             *               "value": "fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "acc_seq",
             *               "value": "fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "signature",
             *               "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "action",
             *               "value": "/cosmos.staking.v1beta1.MsgDelegate"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "fetch1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5afet"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5afet"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "fetch1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5afet"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "fetch1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "withdraw_rewards",
             *           "attributes": [
             *             {
             *               "key": "amount",
             *               "value": "5afet"
             *             },
             *             {
             *               "key": "validator",
             *               "value": "fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000afet"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "fetch1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000afet"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "delegate",
             *           "attributes": [
             *             {
             *               "key": "validator",
             *               "value": "fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000afet"
             *             },
             *             {
             *               "key": "new_shares",
             *               "value": "100000.000000000000000000"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "module",
             *               "value": "staking"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         }
             *       ],
             *       "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5afet\"},{\"key\":\"receiver\",\"value\":\"fetch1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000afet\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"fetch1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5afet\"},{\"key\":\"spender\",\"value\":\"fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000afet\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu\"},{\"key\":\"amount\",\"value\":\"100000afet\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"fetch1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"fetch19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"fetch1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5afet\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5afet\"},{\"key\":\"validator\",\"value\":\"fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu\"}]}]}]",
             *       "tx": {
             *         "0": 10,
             *         "1": 160,
             *         "2": 1,
             *         "3": 10,
             *         "4": 157,
             *         "5": 1,
             *         "6": 10,
             *         "7": 35,
             *         "8": 47,
             *         "9": 99,
             *         "10": 111,
             *         "11": 115,
             *         "12": 109,
             *         "13": 111,
             *         "14": 115,
             *         "15": 46,
             *         "16": 115,
             *         "17": 116,
             *         "18": 97,
             *         "19": 107,
             *         "20": 105,
             *         "21": 110,
             *         "22": 103,
             *         "23": 46,
             *         "24": 118,
             *         "25": 49,
             *         "26": 98,
             *         "27": 101,
             *         "28": 116,
             *         "29": 97,
             *         "30": 49,
             *         "31": 46,
             *         "32": 77,
             *         "33": 115,
             *         "34": 103,
             *         "35": 68,
             *         "36": 101,
             *         "37": 108,
             *         "38": 101,
             *         "39": 103,
             *         "40": 97,
             *         "41": 116,
             *         "42": 101,
             *         "43": 18,
             *         "44": 118,
             *         "45": 10,
             *         "46": 45,
             *         "47": 99,
             *         "48": 111,
             *         "49": 115,
             *         "50": 109,
             *         "51": 111,
             *         "52": 115,
             *         "53": 49,
             *         "54": 57,
             *         "55": 99,
             *         "56": 57,
             *         "57": 102,
             *         "58": 100,
             *         "59": 104,
             *         "60": 52,
             *         "61": 56,
             *         "62": 56,
             *         "63": 118,
             *         "64": 113,
             *         "65": 106,
             *         "66": 99,
             *         "67": 108,
             *         "68": 108,
             *         "69": 116,
             *         "70": 119,
             *         "71": 112,
             *         "72": 54,
             *         "73": 56,
             *         "74": 106,
             *         "75": 109,
             *         "76": 53,
             *         "77": 48,
             *         "78": 121,
             *         "79": 100,
             *         "80": 119,
             *         "81": 121,
             *         "82": 104,
             *         "83": 51,
             *         "84": 54,
             *         "85": 106,
             *         "86": 113,
             *         "87": 101,
             *         "88": 97,
             *         "89": 116,
             *         "90": 101,
             *         "91": 118,
             *         "92": 18,
             *         "93": 52,
             *         "94": 99,
             *         "95": 111,
             *         "96": 115,
             *         "97": 109,
             *         "98": 111,
             *         "99": 115,
             *         "100": 118,
             *         "101": 97,
             *         "102": 108,
             *         "103": 111,
             *         "104": 112,
             *         "105": 101,
             *         "106": 114,
             *         "107": 49,
             *         "108": 54,
             *         "109": 121,
             *         "110": 115,
             *         "111": 48,
             *         "112": 101,
             *         "113": 103,
             *         "114": 57,
             *         "115": 51,
             *         "116": 53,
             *         "117": 109,
             *         "118": 107,
             *         "119": 113,
             *         "120": 112,
             *         "121": 107,
             *         "122": 121,
             *         "123": 100,
             *         "124": 107,
             *         "125": 103,
             *         "126": 102,
             *         "127": 99,
             *         "128": 106,
             *         "129": 57,
             *         "130": 97,
             *         "131": 103,
             *         "132": 101,
             *         "133": 50,
             *         "134": 97,
             *         "135": 117,
             *         "136": 56,
             *         "137": 108,
             *         "138": 57,
             *         "139": 54,
             *         "140": 110,
             *         "141": 97,
             *         "142": 101,
             *         "143": 114,
             *         "144": 101,
             *         "145": 57,
             *         "146": 26,
             *         "147": 15,
             *         "148": 10,
             *         "149": 5,
             *         "150": 117,
             *         "151": 97,
             *         "152": 116,
             *         "153": 111,
             *         "154": 109,
             *         "155": 18,
             *         "156": 6,
             *         "157": 49,
             *         "158": 48,
             *         "159": 48,
             *         "160": 48,
             *         "161": 48,
             *         "162": 48,
             *         "163": 18,
             *         "164": 103,
             *         "165": 10,
             *         "166": 80,
             *         "167": 10,
             *         "168": 70,
             *         "169": 10,
             *         "170": 31,
             *         "171": 47,
             *         "172": 99,
             *         "173": 111,
             *         "174": 115,
             *         "175": 109,
             *         "176": 111,
             *         "177": 115,
             *         "178": 46,
             *         "179": 99,
             *         "180": 114,
             *         "181": 121,
             *         "182": 112,
             *         "183": 116,
             *         "184": 111,
             *         "185": 46,
             *         "186": 115,
             *         "187": 101,
             *         "188": 99,
             *         "189": 112,
             *         "190": 50,
             *         "191": 53,
             *         "192": 54,
             *         "193": 107,
             *         "194": 49,
             *         "195": 46,
             *         "196": 80,
             *         "197": 117,
             *         "198": 98,
             *         "199": 75,
             *         "200": 101,
             *         "201": 121,
             *         "202": 18,
             *         "203": 35,
             *         "204": 10,
             *         "205": 33,
             *         "206": 3,
             *         "207": 156,
             *         "208": 228,
             *         "209": 123,
             *         "210": 42,
             *         "211": 129,
             *         "212": 61,
             *         "213": 19,
             *         "214": 135,
             *         "215": 97,
             *         "216": 49,
             *         "217": 169,
             *         "218": 195,
             *         "219": 190,
             *         "220": 119,
             *         "221": 232,
             *         "222": 196,
             *         "223": 175,
             *         "224": 164,
             *         "225": 158,
             *         "226": 148,
             *         "227": 135,
             *         "228": 68,
             *         "229": 171,
             *         "230": 190,
             *         "231": 225,
             *         "232": 31,
             *         "233": 147,
             *         "234": 158,
             *         "235": 42,
             *         "236": 66,
             *         "237": 15,
             *         "238": 70,
             *         "239": 18,
             *         "240": 4,
             *         "241": 10,
             *         "242": 2,
             *         "243": 8,
             *         "244": 1,
             *         "245": 24,
             *         "246": 33,
             *         "247": 18,
             *         "248": 19,
             *         "249": 10,
             *         "250": 13,
             *         "251": 10,
             *         "252": 5,
             *         "253": 117,
             *         "254": 97,
             *         "255": 116,
             *         "256": 111,
             *         "257": 109,
             *         "258": 18,
             *         "259": 4,
             *         "260": 53,
             *         "261": 48,
             *         "262": 48,
             *         "263": 48,
             *         "264": 16,
             *         "265": 224,
             *         "266": 167,
             *         "267": 18,
             *         "268": 26,
             *         "269": 64,
             *         "270": 25,
             *         "271": 31,
             *         "272": 135,
             *         "273": 165,
             *         "274": 77,
             *         "275": 206,
             *         "276": 175,
             *         "277": 182,
             *         "278": 171,
             *         "279": 154,
             *         "280": 95,
             *         "281": 17,
             *         "282": 42,
             *         "283": 19,
             *         "284": 68,
             *         "285": 76,
             *         "286": 163,
             *         "287": 126,
             *         "288": 73,
             *         "289": 160,
             *         "290": 41,
             *         "291": 229,
             *         "292": 49,
             *         "293": 187,
             *         "294": 33,
             *         "295": 48,
             *         "296": 31,
             *         "297": 215,
             *         "298": 46,
             *         "299": 157,
             *         "300": 57,
             *         "301": 3,
             *         "302": 4,
             *         "303": 199,
             *         "304": 99,
             *         "305": 204,
             *         "306": 165,
             *         "307": 169,
             *         "308": 118,
             *         "309": 10,
             *         "310": 99,
             *         "311": 29,
             *         "312": 200,
             *         "313": 87,
             *         "314": 5,
             *         "315": 221,
             *         "316": 107,
             *         "317": 8,
             *         "318": 181,
             *         "319": 15,
             *         "320": 95,
             *         "321": 255,
             *         "322": 125,
             *         "323": 93,
             *         "324": 232,
             *         "325": 215,
             *         "326": 59,
             *         "327": 44,
             *         "328": 235,
             *         "329": 209,
             *         "330": 244,
             *         "331": 195,
             *         "332": 182,
             *         "333": 160
             *       },
             *       "gasUsed": 167798,
             *       "gasWanted": 300000
             *     }
             */
            receipt?: Record<string, never>;
        };
        FETCraftUnstakeTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
            /**
             * @description Amount to unstake in uFET. Omit to unstake all the delegated amount
             * @example 1000000000000000000000000
             */
            amount_afet?: string;
        };
        FETCraftRedelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to which the new stake will be linked
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator source address of current stake
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_source: string;
            /**
             * @description Validator destination address to which redelegate the stake
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_destination: string;
            /**
             * @description Amount to redelegate in uFET
             * @example 1000000000000000000000000
             */
            amount_afet?: string;
        };
        FETCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
            /**
             * @description Amount to stake in afet
             * @example 1000000000000000000000000
             */
            amount_afet: string;
            /**
             * @description If enabled, the rewards will be automatically restaked
             * @default false
             */
            restake_rewards: boolean;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address?: string;
        };
        FETCraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address: string;
        };
        FETCraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
        };
        FETReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in uFET during the day
             * @example 3575891083876864200000
             */
            rewards: string;
            /**
             * @description Staked balance in uFET at the end of the day
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield
             * @example 20.76
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            balance_usd?: number;
        };
        FETOperationDelegate: {
            /**
             * @description Operation type
             * @example staking.MsgDelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uFET
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount added to the staked balance in uFET
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uFET
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        FETOperationUndelegate: {
            /**
             * @description Operation type
             * @example staking.MsgUndelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uFET
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount removed from the staked balance in uFET
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uFET
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        FETOperationRedelegate: {
            /**
             * @description Operation type
             * @example staking.MsgBeginRedelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uFET
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Destination validator address
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Source validator address
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address_source?: string;
            /**
             * @description Delegator address
             * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount moved from the source validator staked balance to the destination validator staked balance in uFET
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed from the destination validator alongside the operation in uFET
             * @example 10841
             */
            withdraw_rewards?: string;
            /**
             * @description Rewards auto-claimed from the source validator alongside the operation in uFET
             * @example 10841
             */
            withdraw_rewards_source?: string;
        };
        FETOperationWithdrawRewards: {
            /**
             * @description Operation type
             * @example distr.MsgWithdrawDelegatorReward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uFET
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Rewards claimed alongside the operation in uFET
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        FETOperationGrant: {
            /**
             * @description Operation type
             * @example Authz.Grant
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uFET
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Recipient of the permissions
             * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            grantee?: string;
            /**
             * @description Owner of the stake giving the permissions
             * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            granter?: string;
            /**
             * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
             * @example Staking.MsgDelegate
             */
            permission?: string;
            /**
             * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
             * @example [
             *       "fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6"
             *     ]
             */
            allow_list?: string[] | null;
            /**
             * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
             * @example [
             *       "fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6"
             *     ]
             */
            deny_list?: string[] | null;
        };
        FETOperationExec: {
            /**
             * @description Operation type
             * @example Authz.Exec
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uFET
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uFET
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uFET
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uFET
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        FETOperationContract: {
            /**
             * @description Contract type
             * @example wasm.Contract
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uFET
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description address of the contract been called
             * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            contract: string;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example fetchvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uFET
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uFET
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uFET
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        FETNetworkStats: {
            /**
             * @description Price of Fetch in USD
             * @example 10.53
             */
            fet_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Fetch currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Fetch inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        /**
         * @description Decoded transaction
         * @example {
         *       "authInfo": {
         *         "signerInfos": [
         *           {
         *             "publicKey": {
         *               "typeUrl": "/cosmos.crypto.secp256k1.PubKey",
         *               "value": {
         *                 "0": 10,
         *                 "1": 33,
         *                 "2": 3,
         *                 "3": 156,
         *                 "4": 228,
         *                 "5": 123,
         *                 "6": 42,
         *                 "7": 129,
         *                 "8": 61,
         *                 "9": 19,
         *                 "10": 135,
         *                 "11": 97,
         *                 "12": 49,
         *                 "13": 169,
         *                 "14": 195,
         *                 "15": 190,
         *                 "16": 119,
         *                 "17": 232,
         *                 "18": 196,
         *                 "19": 175,
         *                 "20": 164,
         *                 "21": 158,
         *                 "22": 148,
         *                 "23": 135,
         *                 "24": 68,
         *                 "25": 171,
         *                 "26": 190,
         *                 "27": 225,
         *                 "28": 31,
         *                 "29": 147,
         *                 "30": 158,
         *                 "31": 42,
         *                 "32": 66,
         *                 "33": 15,
         *                 "34": 70
         *               }
         *             },
         *             "modeInfo": {
         *               "single": {
         *                 "mode": 1
         *               }
         *             },
         *             "sequence": {
         *               "low": 102,
         *               "high": 0,
         *               "unsigned": true
         *             }
         *           }
         *         ],
         *         "fee": {
         *           "amount": [
         *             {
         *               "denom": "afet",
         *               "amount": "5000"
         *             }
         *           ],
         *           "gasLimit": {
         *             "low": 2000000,
         *             "high": 0,
         *             "unsigned": true
         *           },
         *           "payer": "",
         *           "granter": ""
         *         }
         *       },
         *       "body": {
         *         "messages": [
         *           {
         *             "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
         *             "value": {
         *               "0": 10,
         *               "1": 45,
         *               "2": 99,
         *               "3": 111,
         *               "4": 115,
         *               "5": 109,
         *               "6": 111,
         *               "7": 115,
         *               "8": 49,
         *               "9": 57,
         *               "10": 99,
         *               "11": 57,
         *               "12": 102,
         *               "13": 100,
         *               "14": 104,
         *               "15": 52,
         *               "16": 56,
         *               "17": 56,
         *               "18": 118,
         *               "19": 113,
         *               "20": 106,
         *               "21": 99,
         *               "22": 108,
         *               "23": 108,
         *               "24": 116,
         *               "25": 119,
         *               "26": 112,
         *               "27": 54,
         *               "28": 56,
         *               "29": 106,
         *               "30": 109,
         *               "31": 53,
         *               "32": 48,
         *               "33": 121,
         *               "34": 100,
         *               "35": 119,
         *               "36": 121,
         *               "37": 104,
         *               "38": 51,
         *               "39": 54,
         *               "40": 106,
         *               "41": 113,
         *               "42": 101,
         *               "43": 97,
         *               "44": 116,
         *               "45": 101,
         *               "46": 118,
         *               "47": 18,
         *               "48": 52,
         *               "49": 99,
         *               "50": 111,
         *               "51": 115,
         *               "52": 109,
         *               "53": 111,
         *               "54": 115,
         *               "55": 118,
         *               "56": 97,
         *               "57": 108,
         *               "58": 111,
         *               "59": 112,
         *               "60": 101,
         *               "61": 114,
         *               "62": 49,
         *               "63": 54,
         *               "64": 121,
         *               "65": 115,
         *               "66": 48,
         *               "67": 101,
         *               "68": 103,
         *               "69": 57,
         *               "70": 51,
         *               "71": 53,
         *               "72": 109,
         *               "73": 107,
         *               "74": 113,
         *               "75": 112,
         *               "76": 107,
         *               "77": 121,
         *               "78": 100,
         *               "79": 107,
         *               "80": 103,
         *               "81": 102,
         *               "82": 99,
         *               "83": 106,
         *               "84": 57,
         *               "85": 97,
         *               "86": 103,
         *               "87": 101,
         *               "88": 50,
         *               "89": 97,
         *               "90": 117,
         *               "91": 56,
         *               "92": 108,
         *               "93": 57,
         *               "94": 54,
         *               "95": 110,
         *               "96": 97,
         *               "97": 101,
         *               "98": 114,
         *               "99": 101,
         *               "100": 57,
         *               "101": 26,
         *               "102": 16,
         *               "103": 10,
         *               "104": 5,
         *               "105": 117,
         *               "106": 97,
         *               "107": 116,
         *               "108": 111,
         *               "109": 109,
         *               "110": 18,
         *               "111": 7,
         *               "112": 49,
         *               "113": 48,
         *               "114": 48,
         *               "115": 48,
         *               "116": 48,
         *               "117": 48,
         *               "118": 48
         *             }
         *           }
         *         ],
         *         "memo": "",
         *         "timeoutHeight": {
         *           "low": 0,
         *           "high": 0,
         *           "unsigned": true
         *         },
         *         "extensionOptions": [],
         *         "nonCriticalExtensionOptions": []
         *       },
         *       "signatures": [
         *         {
         *           "0": 116,
         *           "1": 104,
         *           "2": 101,
         *           "3": 116,
         *           "4": 97,
         *           "5": 45,
         *           "6": 116,
         *           "7": 101,
         *           "8": 115,
         *           "9": 116,
         *           "10": 110,
         *           "11": 101,
         *           "12": 116,
         *           "13": 45,
         *           "14": 48,
         *           "15": 48,
         *           "16": 49
         *         }
         *       ]
         *     }
         */
        FETTxDecoding: Record<string, never>;
        FETCraftSendTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Recipient address
             * @example fetch1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            to: string;
            /**
             * @description Amount to send in afet
             * @example 1000000000000000000000000
             */
            amount_afet: string;
        };
        FETGetBalancePayload: {
            /**
             * @description Wallet address
             * @example fetch1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            address: string;
            /**
             * @description The denomination of the balance to query
             * @example afet
             */
            denom: string;
        };
        INJStake: {
            /**
             * @description Public key of the validator
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Public key of the delegator
             * @example inj1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            delegator_address: string;
            /**
             * Format: date-time
             * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 2023-06-16T03:13:23.058547Z
             */
            delegated_at?: string;
            /**
             * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 15739267
             */
            delegated_block?: number;
            /**
             * Format: date-time
             * @description Date of undelegation for the stake
             * @example 2023-07-14T03:56:13.561156Z
             */
            undelegated_at?: string;
            /**
             * @description Block of undelegation for the stake
             * @example 16126416
             */
            undelegated_block?: number;
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation in uINJ. Includes currently available rewards not yet withdrawn.
             * @example 735573808534727891000000
             */
            rewards: string;
            /**
             * @description Available rewards in uINJ that can be withdrawn from this stake
             * @example 36748808534727891000000
             */
            available_rewards: string;
            /**
             * @description Staked balance on this stake in uINJ
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
             * @example 5.76
             */
            net_apy: number;
            /**
             * @description State of the Injective stake
             * @example active
             * @enum {string}
             */
            state: "active" | "deactivating" | "inactive";
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at?: string;
            /** @description permissions related to the stake currently active, ignored if there is no ongoing grants */
            permissions: {
                /**
                 * @description whether the stake is recipient (grantee) or the giver (granter) of the permissions
                 * @example granter
                 */
                source: string;
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
                 * @example Staking.MsgDelegate
                 */
                permission: string;
                /**
                 * Format: date-time
                 * @description Exact time at which the permissions will be revoked
                 * @example 2023-01-10T01:12:34Z
                 */
                expires_at?: string | null;
                /**
                 * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "injvaloper1xyz",
                 *       "injvaloper1abc"
                 *     ]
                 */
                allow_list?: string[] | null;
                /**
                 * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
                 * @example [
                 *       "injvaloper1xyz",
                 *       "injvaloper1abc"
                 *     ]
                 */
                deny_list?: string[] | null;
            }[];
            /** @description unbondings currently active on the stakes. ignored if no unbondings are returned */
            unbondings: {
                /**
                 * @description Block at which the unbonding was created
                 * @example 15000000
                 */
                creation_height: number;
                /**
                 * Format: date-time
                 * @description Exact time at which the unbonding will take effect
                 * @example 2023-01-10T01:12:34Z
                 */
                completion_time: string;
                /**
                 * @description Amount currently associated with the unbonding (slashes included)
                 * @example 129300
                 */
                balance: string;
                /**
                 * @description Amount expected at creation (slashes non-included)
                 * @example 150300
                 */
                initial_balance: string;
            }[];
        };
        PostINJStakesPayload: {
            stakes: {
                /**
                 * @description Stake id {validator_address}_{delegator_address}
                 * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu_inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6}
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        INJStakeMessage: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.MsgDelegate
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "delegatorAddress": "inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "validatorAddress": "injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *       "amount": {
             *         "denom": "inj",
             *         "amount": "1000000"
             *       }
             *     }
             */
            value?: Record<string, never>;
        };
        INJStakeMessageRestake: {
            /**
             * @description Type URL of the message
             * @example /cosmos.staking.v1beta1.StakeAuthorization
             */
            typeUrl?: string;
            /**
             * @description Message value
             * @example {
             *       "allowList": {
             *         "address": [
             *           "injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *         ]
             *       },
             *       "AuthorizationType": 1
             *     }
             */
            value?: Record<string, never>;
        };
        INJStakeUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "inj",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description List of messages included in the transaction.
             * @example [
             *       {
             *         "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *         "value": {
             *           "delegatorAddress": "inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *           "validatorAddress": "injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *           "amount": {
             *             "denom": "inj",
             *             "amount": "1000000"
             *           }
             *         }
             *       }
             *     ]
             */
            messages: components["schemas"]["INJStakeMessage"][];
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        INJUnsignedTx: {
            /**
             * @description Unsigned serialized transaction
             * @example 0adf010adc010a2a2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746512ad010a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f70657231307636777664656e65653872396c36776c73706863677572326c746c387a746b6672766a39611a34636f736d6f7376616c6f70657231796d7a336b6a7466397a6b666d6d3273326c7279376568307a6439657a33766335797030306622100a057561746f6d12073433313030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801186d12130a0d0a057561746f6d1204353030301080897a1a1174686574612d746573746e65742d30303120e0cd2a
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hash of the unsigned transaction
             * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
             */
            unsigned_tx_hash: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Wallet compressed public key, this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Message included in the transaction
             * @example {
             *       "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
             *       "value": {
             *         "delegatorAddress": "inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *         "validatorAddress": "injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu",
             *         "amount": {
             *           "denom": "inj",
             *           "amount": "1000000"
             *         }
             *       }
             *     }
             */
            message: Record<string, never>;
            /**
             * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
             * @example {
             *       "amount": [
             *         {
             *           "denom": "inj",
             *           "amount": "5000"
             *         }
             *       ],
             *       "gas": "200000"
             *     }
             */
            fee: Record<string, never>;
            /**
             * @description Chain ID
             * @example cosmoshub-4
             */
            chain_id: string;
            /**
             * @description Account number
             * @example 1234
             */
            account_number: number;
        };
        INJSignedTx: {
            /**
             * @description Serialized signed transaction in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signed_tx_serialized: string;
        };
        INJTxHash: {
            /**
             * @description Hash of the transaction
             * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
             */
            tx_hash: string;
        };
        INJPrepareTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Transaction body serialized in hex
             * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
             */
            tx_body: string;
            /**
             * @description Transaction auth info serialized in hex
             * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
             */
            tx_auth_info: string;
            /**
             * @description Transaction signature serialized in hex
             * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            signature: string;
        };
        INJBroadcastTxPayload: {
            /**
             * @description Signed transaction serialized in hex
             * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
             */
            tx_serialized: string;
        };
        INJTxStatus: {
            /**
             * @description Transaction status
             * @example success
             * @enum {string}
             */
            status?: "success" | "error";
            /**
             * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
             * @example {
             *       "height": 16007296,
             *       "txIndex": 0,
             *       "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
             *       "code": 0,
             *       "events": [
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000inj"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "inj17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000inj"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "inj17xpfvakm2amg962yls6f84z3kell8c5lserqta"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5000inj"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "fee",
             *               "value": "5000inj"
             *             },
             *             {
             *               "key": "fee_payer",
             *               "value": "inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "acc_seq",
             *               "value": "inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "tx",
             *           "attributes": [
             *             {
             *               "key": "signature",
             *               "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "action",
             *               "value": "/cosmos.staking.v1beta1.MsgDelegate"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "inj1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5inj"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5inj"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "transfer",
             *           "attributes": [
             *             {
             *               "key": "recipient",
             *               "value": "inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "inj1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "5inj"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "sender",
             *               "value": "inj1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "withdraw_rewards",
             *           "attributes": [
             *             {
             *               "key": "amount",
             *               "value": "5inj"
             *             },
             *             {
             *               "key": "validator",
             *               "value": "injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_spent",
             *           "attributes": [
             *             {
             *               "key": "spender",
             *               "value": "inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000inj"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "coin_received",
             *           "attributes": [
             *             {
             *               "key": "receiver",
             *               "value": "inj1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000inj"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "delegate",
             *           "attributes": [
             *             {
             *               "key": "validator",
             *               "value": "injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu"
             *             },
             *             {
             *               "key": "amount",
             *               "value": "100000inj"
             *             },
             *             {
             *               "key": "new_shares",
             *               "value": "100000.000000000000000000"
             *             }
             *           ]
             *         },
             *         {
             *           "type": "message",
             *           "attributes": [
             *             {
             *               "key": "module",
             *               "value": "staking"
             *             },
             *             {
             *               "key": "sender",
             *               "value": "inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
             *             }
             *           ]
             *         }
             *       ],
             *       "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5inj\"},{\"key\":\"receiver\",\"value\":\"inj1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000inj\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"inj1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5inj\"},{\"key\":\"spender\",\"value\":\"inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000inj\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu\"},{\"key\":\"amount\",\"value\":\"100000inj\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"inj1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"inj19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"inj1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5inj\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5inj\"},{\"key\":\"validator\",\"value\":\"injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu\"}]}]}]",
             *       "tx": {
             *         "0": 10,
             *         "1": 160,
             *         "2": 1,
             *         "3": 10,
             *         "4": 157,
             *         "5": 1,
             *         "6": 10,
             *         "7": 35,
             *         "8": 47,
             *         "9": 99,
             *         "10": 111,
             *         "11": 115,
             *         "12": 109,
             *         "13": 111,
             *         "14": 115,
             *         "15": 46,
             *         "16": 115,
             *         "17": 116,
             *         "18": 97,
             *         "19": 107,
             *         "20": 105,
             *         "21": 110,
             *         "22": 103,
             *         "23": 46,
             *         "24": 118,
             *         "25": 49,
             *         "26": 98,
             *         "27": 101,
             *         "28": 116,
             *         "29": 97,
             *         "30": 49,
             *         "31": 46,
             *         "32": 77,
             *         "33": 115,
             *         "34": 103,
             *         "35": 68,
             *         "36": 101,
             *         "37": 108,
             *         "38": 101,
             *         "39": 103,
             *         "40": 97,
             *         "41": 116,
             *         "42": 101,
             *         "43": 18,
             *         "44": 118,
             *         "45": 10,
             *         "46": 45,
             *         "47": 99,
             *         "48": 111,
             *         "49": 115,
             *         "50": 109,
             *         "51": 111,
             *         "52": 115,
             *         "53": 49,
             *         "54": 57,
             *         "55": 99,
             *         "56": 57,
             *         "57": 102,
             *         "58": 100,
             *         "59": 104,
             *         "60": 52,
             *         "61": 56,
             *         "62": 56,
             *         "63": 118,
             *         "64": 113,
             *         "65": 106,
             *         "66": 99,
             *         "67": 108,
             *         "68": 108,
             *         "69": 116,
             *         "70": 119,
             *         "71": 112,
             *         "72": 54,
             *         "73": 56,
             *         "74": 106,
             *         "75": 109,
             *         "76": 53,
             *         "77": 48,
             *         "78": 121,
             *         "79": 100,
             *         "80": 119,
             *         "81": 121,
             *         "82": 104,
             *         "83": 51,
             *         "84": 54,
             *         "85": 106,
             *         "86": 113,
             *         "87": 101,
             *         "88": 97,
             *         "89": 116,
             *         "90": 101,
             *         "91": 118,
             *         "92": 18,
             *         "93": 52,
             *         "94": 99,
             *         "95": 111,
             *         "96": 115,
             *         "97": 109,
             *         "98": 111,
             *         "99": 115,
             *         "100": 118,
             *         "101": 97,
             *         "102": 108,
             *         "103": 111,
             *         "104": 112,
             *         "105": 101,
             *         "106": 114,
             *         "107": 49,
             *         "108": 54,
             *         "109": 121,
             *         "110": 115,
             *         "111": 48,
             *         "112": 101,
             *         "113": 103,
             *         "114": 57,
             *         "115": 51,
             *         "116": 53,
             *         "117": 109,
             *         "118": 107,
             *         "119": 113,
             *         "120": 112,
             *         "121": 107,
             *         "122": 121,
             *         "123": 100,
             *         "124": 107,
             *         "125": 103,
             *         "126": 102,
             *         "127": 99,
             *         "128": 106,
             *         "129": 57,
             *         "130": 97,
             *         "131": 103,
             *         "132": 101,
             *         "133": 50,
             *         "134": 97,
             *         "135": 117,
             *         "136": 56,
             *         "137": 108,
             *         "138": 57,
             *         "139": 54,
             *         "140": 110,
             *         "141": 97,
             *         "142": 101,
             *         "143": 114,
             *         "144": 101,
             *         "145": 57,
             *         "146": 26,
             *         "147": 15,
             *         "148": 10,
             *         "149": 5,
             *         "150": 117,
             *         "151": 97,
             *         "152": 116,
             *         "153": 111,
             *         "154": 109,
             *         "155": 18,
             *         "156": 6,
             *         "157": 49,
             *         "158": 48,
             *         "159": 48,
             *         "160": 48,
             *         "161": 48,
             *         "162": 48,
             *         "163": 18,
             *         "164": 103,
             *         "165": 10,
             *         "166": 80,
             *         "167": 10,
             *         "168": 70,
             *         "169": 10,
             *         "170": 31,
             *         "171": 47,
             *         "172": 99,
             *         "173": 111,
             *         "174": 115,
             *         "175": 109,
             *         "176": 111,
             *         "177": 115,
             *         "178": 46,
             *         "179": 99,
             *         "180": 114,
             *         "181": 121,
             *         "182": 112,
             *         "183": 116,
             *         "184": 111,
             *         "185": 46,
             *         "186": 115,
             *         "187": 101,
             *         "188": 99,
             *         "189": 112,
             *         "190": 50,
             *         "191": 53,
             *         "192": 54,
             *         "193": 107,
             *         "194": 49,
             *         "195": 46,
             *         "196": 80,
             *         "197": 117,
             *         "198": 98,
             *         "199": 75,
             *         "200": 101,
             *         "201": 121,
             *         "202": 18,
             *         "203": 35,
             *         "204": 10,
             *         "205": 33,
             *         "206": 3,
             *         "207": 156,
             *         "208": 228,
             *         "209": 123,
             *         "210": 42,
             *         "211": 129,
             *         "212": 61,
             *         "213": 19,
             *         "214": 135,
             *         "215": 97,
             *         "216": 49,
             *         "217": 169,
             *         "218": 195,
             *         "219": 190,
             *         "220": 119,
             *         "221": 232,
             *         "222": 196,
             *         "223": 175,
             *         "224": 164,
             *         "225": 158,
             *         "226": 148,
             *         "227": 135,
             *         "228": 68,
             *         "229": 171,
             *         "230": 190,
             *         "231": 225,
             *         "232": 31,
             *         "233": 147,
             *         "234": 158,
             *         "235": 42,
             *         "236": 66,
             *         "237": 15,
             *         "238": 70,
             *         "239": 18,
             *         "240": 4,
             *         "241": 10,
             *         "242": 2,
             *         "243": 8,
             *         "244": 1,
             *         "245": 24,
             *         "246": 33,
             *         "247": 18,
             *         "248": 19,
             *         "249": 10,
             *         "250": 13,
             *         "251": 10,
             *         "252": 5,
             *         "253": 117,
             *         "254": 97,
             *         "255": 116,
             *         "256": 111,
             *         "257": 109,
             *         "258": 18,
             *         "259": 4,
             *         "260": 53,
             *         "261": 48,
             *         "262": 48,
             *         "263": 48,
             *         "264": 16,
             *         "265": 224,
             *         "266": 167,
             *         "267": 18,
             *         "268": 26,
             *         "269": 64,
             *         "270": 25,
             *         "271": 31,
             *         "272": 135,
             *         "273": 165,
             *         "274": 77,
             *         "275": 206,
             *         "276": 175,
             *         "277": 182,
             *         "278": 171,
             *         "279": 154,
             *         "280": 95,
             *         "281": 17,
             *         "282": 42,
             *         "283": 19,
             *         "284": 68,
             *         "285": 76,
             *         "286": 163,
             *         "287": 126,
             *         "288": 73,
             *         "289": 160,
             *         "290": 41,
             *         "291": 229,
             *         "292": 49,
             *         "293": 187,
             *         "294": 33,
             *         "295": 48,
             *         "296": 31,
             *         "297": 215,
             *         "298": 46,
             *         "299": 157,
             *         "300": 57,
             *         "301": 3,
             *         "302": 4,
             *         "303": 199,
             *         "304": 99,
             *         "305": 204,
             *         "306": 165,
             *         "307": 169,
             *         "308": 118,
             *         "309": 10,
             *         "310": 99,
             *         "311": 29,
             *         "312": 200,
             *         "313": 87,
             *         "314": 5,
             *         "315": 221,
             *         "316": 107,
             *         "317": 8,
             *         "318": 181,
             *         "319": 15,
             *         "320": 95,
             *         "321": 255,
             *         "322": 125,
             *         "323": 93,
             *         "324": 232,
             *         "325": 215,
             *         "326": 59,
             *         "327": 44,
             *         "328": 235,
             *         "329": 209,
             *         "330": 244,
             *         "331": 195,
             *         "332": 182,
             *         "333": 160
             *       },
             *       "gasUsed": 167798,
             *       "gasWanted": 300000
             *     }
             */
            receipt?: Record<string, never>;
        };
        INJCraftUnstakeTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
            /**
             * @description Amount to unstake in uINJ. Omit to unstake all the delegated amount
             * @example 1000000000000000000000000
             */
            amount_inj?: string;
        };
        INJCraftRedelegateTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to which the new stake will be linked
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator source address of current stake
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_source: string;
            /**
             * @description Validator destination address to which redelegate the stake
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_destination: string;
            /**
             * @description Amount to redelegate in uINJ
             * @example 1000000000000000000000000
             */
            amount_inj?: string;
        };
        INJCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID to stake into
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
            /**
             * @description Amount to stake in inj
             * @example 1000000000000000000000000
             */
            amount_inj: string;
        };
        INJCraftRestakeRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Grantee address, this address is specific to each validator. Kiln grantee addresses are found here: https://github.com/eco-stake/validator-registry/blob/master/Kiln/chains.json https://github.com/eco-stake/validator-registry/blob/master/interop/chains.json
             * @example cosmos1u4whe0pwlgt7q7ph37qxalq2wfq4pkcdze5fmd
             */
            grantee_address: string;
        };
        INJCraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Validator address
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator: string;
        };
        INJReward: {
            /**
             * Format: date
             * @description Day for this reward entry
             * @example 2023-01-15
             */
            date: string;
            /**
             * @description Accumulated rewards in uINJ during the day
             * @example 3575891083876864200000
             */
            rewards: string;
            /**
             * @description Staked balance in uINJ at the end of the day
             * @example 6300000000000000000000000
             */
            balance: string;
            /**
             * @description Net annual percentage yield
             * @example 20.76
             */
            net_apy: number;
            /** @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            rewards_usd?: number;
            /** @description Estimated value of the staked balance at the beginning of the day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko. */
            balance_usd?: number;
        };
        INJOperationDelegate: {
            /**
             * @description Operation type
             * @example staking.MsgDelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uINJ
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount added to the staked balance in uINJ
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uINJ
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        INJOperationUndelegate: {
            /**
             * @description Operation type
             * @example staking.MsgUndelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uINJ
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount removed from the staked balance in uINJ
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed alongside the operation in uINJ
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        INJOperationRedelegate: {
            /**
             * @description Operation type
             * @example staking.MsgBeginRedelegate
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uINJ
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Destination validator address
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Source validator address
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address_source?: string;
            /**
             * @description Delegator address
             * @example inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Amount moved from the source validator staked balance to the destination validator staked balance in uINJ
             * @example 3000000
             */
            amount: string;
            /**
             * @description Rewards auto-claimed from the destination validator alongside the operation in uINJ
             * @example 10841
             */
            withdraw_rewards?: string;
            /**
             * @description Rewards auto-claimed from the source validator alongside the operation in uINJ
             * @example 10841
             */
            withdraw_rewards_source?: string;
        };
        INJOperationWithdrawRewards: {
            /**
             * @description Operation type
             * @example distr.MsgWithdrawDelegatorReward
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uINJ
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Validator address
             * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
             */
            validator_address: string;
            /**
             * @description Delegator address
             * @example inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            delegator_address: string;
            /**
             * @description Rewards claimed alongside the operation in uINJ
             * @example 10841
             */
            withdraw_rewards?: string;
        };
        INJOperationGrant: {
            /**
             * @description Operation type
             * @example Authz.Grant
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uINJ
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description Recipient of the permissions
             * @example inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            grantee?: string;
            /**
             * @description Owner of the stake giving the permissions
             * @example inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            granter?: string;
            /**
             * @description Kind of permission been grantee, can be: "Staking.MsgDelegate", "Staking.MsgUndelegate", "Staking.MsgRedelegate" or "Distribution.MsgWithdrawDelegatorReward"
             * @example Staking.MsgDelegate
             */
            permission?: string;
            /**
             * @description List of address on which the granted permission can be applied (ie validator on which delegation is allowed)
             * @example [
             *       "inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6"
             *     ]
             */
            allow_list?: string[] | null;
            /**
             * @description List of address on which the granted permission cannot be applied (ie validator on which delegation is allowed)
             * @example [
             *       "inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6",
             *       "inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6"
             *     ]
             */
            deny_list?: string[] | null;
        };
        INJOperationExec: {
            /**
             * @description Operation type
             * @example Authz.Exec
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uINJ
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uINJ
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uINJ
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uINJ
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        INJOperationContract: {
            /**
             * @description Contract type
             * @example wasm.Contract
             */
            type: string;
            /**
             * Format: date-time
             * @description Date of the operation
             * @example 2023-06-22T15:35:01.892644Z
             */
            time: string;
            /**
             * @description Transaction block
             * @example 15828207
             */
            block: number;
            /**
             * @description Transaction hash
             * @example 7DBC7C481A9A28961BDDF5BCDD47217A126EC0497017908453D71FACA9FA3506
             */
            tx_hash: string;
            /**
             * @description Gas used for the whole transaction in uINJ
             * @example 186733
             */
            tx_gas_used: string;
            /**
             * @description Index of the message in the transaction
             * @example 0
             */
            message_index: number;
            /**
             * @description address of the contract been called
             * @example inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
             */
            contract: string;
            executed_operations?: {
                /**
                 * @description Operation type
                 * @example staking.Delegate
                 */
                type: string;
                /**
                 * @description Destination validator address
                 * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address: string;
                /**
                 * @description Source validator address
                 * @example injvaloper1djqecw6nn5tydxq0shan7srv8j65clsfmnxcfu
                 */
                validator_address_source?: string;
                /**
                 * @description Delegator address
                 * @example inj1djqecw6nn5tydxq0shan7srv8j65clsf7vypl6
                 */
                delegator_address: string;
                /**
                 * @description Amount moved from the source validator staked balance to the destination validator staked balance in uINJ
                 * @example 3000000
                 */
                amount?: string;
                /**
                 * @description Rewards auto-claimed from the destination validator alongside the operation in uINJ
                 * @example 10841
                 */
                withdraw_rewards?: string;
                /**
                 * @description Rewards auto-claimed from the source validator alongside the operation in uINJ
                 * @example 10841
                 */
                withdraw_rewards_source?: string;
            }[] | null;
        };
        INJNetworkStats: {
            /**
             * @description Price of Injective in USD
             * @example 10.53
             */
            inj_price_usd: number;
            /**
             * @description Number of validators in the network
             * @example 100
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Injective currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Injective inflation rate
             * @example 3.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        /**
         * @description Decoded transaction
         * @example {
         *       "authInfo": {
         *         "signerInfos": [
         *           {
         *             "publicKey": {
         *               "typeUrl": "/cosmos.crypto.secp256k1.PubKey",
         *               "value": {
         *                 "0": 10,
         *                 "1": 33,
         *                 "2": 3,
         *                 "3": 156,
         *                 "4": 228,
         *                 "5": 123,
         *                 "6": 42,
         *                 "7": 129,
         *                 "8": 61,
         *                 "9": 19,
         *                 "10": 135,
         *                 "11": 97,
         *                 "12": 49,
         *                 "13": 169,
         *                 "14": 195,
         *                 "15": 190,
         *                 "16": 119,
         *                 "17": 232,
         *                 "18": 196,
         *                 "19": 175,
         *                 "20": 164,
         *                 "21": 158,
         *                 "22": 148,
         *                 "23": 135,
         *                 "24": 68,
         *                 "25": 171,
         *                 "26": 190,
         *                 "27": 225,
         *                 "28": 31,
         *                 "29": 147,
         *                 "30": 158,
         *                 "31": 42,
         *                 "32": 66,
         *                 "33": 15,
         *                 "34": 70
         *               }
         *             },
         *             "modeInfo": {
         *               "single": {
         *                 "mode": 1
         *               }
         *             },
         *             "sequence": {
         *               "low": 102,
         *               "high": 0,
         *               "unsigned": true
         *             }
         *           }
         *         ],
         *         "fee": {
         *           "amount": [
         *             {
         *               "denom": "inj",
         *               "amount": "5000"
         *             }
         *           ],
         *           "gasLimit": {
         *             "low": 2000000,
         *             "high": 0,
         *             "unsigned": true
         *           },
         *           "payer": "",
         *           "granter": ""
         *         }
         *       },
         *       "body": {
         *         "messages": [
         *           {
         *             "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
         *             "value": {
         *               "0": 10,
         *               "1": 45,
         *               "2": 99,
         *               "3": 111,
         *               "4": 115,
         *               "5": 109,
         *               "6": 111,
         *               "7": 115,
         *               "8": 49,
         *               "9": 57,
         *               "10": 99,
         *               "11": 57,
         *               "12": 102,
         *               "13": 100,
         *               "14": 104,
         *               "15": 52,
         *               "16": 56,
         *               "17": 56,
         *               "18": 118,
         *               "19": 113,
         *               "20": 106,
         *               "21": 99,
         *               "22": 108,
         *               "23": 108,
         *               "24": 116,
         *               "25": 119,
         *               "26": 112,
         *               "27": 54,
         *               "28": 56,
         *               "29": 106,
         *               "30": 109,
         *               "31": 53,
         *               "32": 48,
         *               "33": 121,
         *               "34": 100,
         *               "35": 119,
         *               "36": 121,
         *               "37": 104,
         *               "38": 51,
         *               "39": 54,
         *               "40": 106,
         *               "41": 113,
         *               "42": 101,
         *               "43": 97,
         *               "44": 116,
         *               "45": 101,
         *               "46": 118,
         *               "47": 18,
         *               "48": 52,
         *               "49": 99,
         *               "50": 111,
         *               "51": 115,
         *               "52": 109,
         *               "53": 111,
         *               "54": 115,
         *               "55": 118,
         *               "56": 97,
         *               "57": 108,
         *               "58": 111,
         *               "59": 112,
         *               "60": 101,
         *               "61": 114,
         *               "62": 49,
         *               "63": 54,
         *               "64": 121,
         *               "65": 115,
         *               "66": 48,
         *               "67": 101,
         *               "68": 103,
         *               "69": 57,
         *               "70": 51,
         *               "71": 53,
         *               "72": 109,
         *               "73": 107,
         *               "74": 113,
         *               "75": 112,
         *               "76": 107,
         *               "77": 121,
         *               "78": 100,
         *               "79": 107,
         *               "80": 103,
         *               "81": 102,
         *               "82": 99,
         *               "83": 106,
         *               "84": 57,
         *               "85": 97,
         *               "86": 103,
         *               "87": 101,
         *               "88": 50,
         *               "89": 97,
         *               "90": 117,
         *               "91": 56,
         *               "92": 108,
         *               "93": 57,
         *               "94": 54,
         *               "95": 110,
         *               "96": 97,
         *               "97": 101,
         *               "98": 114,
         *               "99": 101,
         *               "100": 57,
         *               "101": 26,
         *               "102": 16,
         *               "103": 10,
         *               "104": 5,
         *               "105": 117,
         *               "106": 97,
         *               "107": 116,
         *               "108": 111,
         *               "109": 109,
         *               "110": 18,
         *               "111": 7,
         *               "112": 49,
         *               "113": 48,
         *               "114": 48,
         *               "115": 48,
         *               "116": 48,
         *               "117": 48,
         *               "118": 48
         *             }
         *           }
         *         ],
         *         "memo": "",
         *         "timeoutHeight": {
         *           "low": 0,
         *           "high": 0,
         *           "unsigned": true
         *         },
         *         "extensionOptions": [],
         *         "nonCriticalExtensionOptions": []
         *       },
         *       "signatures": [
         *         {
         *           "0": 116,
         *           "1": 104,
         *           "2": 101,
         *           "3": 116,
         *           "4": 97,
         *           "5": 45,
         *           "6": 116,
         *           "7": 101,
         *           "8": 115,
         *           "9": 116,
         *           "10": 110,
         *           "11": 101,
         *           "12": 116,
         *           "13": 45,
         *           "14": 48,
         *           "15": 48,
         *           "16": 49
         *         }
         *       ]
         *     }
         */
        INJTxDecoding: Record<string, never>;
        INJCraftSendTxPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
             */
            pubkey: string;
            /**
             * @description Recipient address
             * @example inj1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
             */
            to: string;
            /**
             * @description Amount to send in inj
             * @example 1000000000000000000000000
             */
            amount_inj: string;
        };
        TONStake: {
            /**
             * @description Internal Kiln ID
             * @example Ef-2Cee_wxtgo9OKdbjXjauQJ15yxuyMTNpQxJbJ2FTZ2RJY|Uf_Jm1_syLkND8FqagYAtYljbWzutxz2u9AxZS9x59OxHKkF
             */
            id: string;
            /**
             * @description Pool address where this stake is made
             * @example Ef-2Cee_wxtgo9OKdbjXjauQJ15yxuyMTNpQxJbJ2FTZ2RJY
             */
            pool: string;
            /**
             * @description Nominator address
             * @example Uf_Jm1_syLkND8FqagYAtYljbWzutxz2u9AxZS9x59OxHKkF
             */
            nominator: string;
            /**
             * @description The amount of TON currently present on the stake in nanoton
             * @example 92908788559
             */
            balance: string;
            /**
             * @description The amount of TON currently present on the elector (only set for single pool nominator pools)
             * @example 1221263396940000
             */
            elector_balance: string;
            /**
             * @description Sum of balance and elector_balance
             * @example 1221356305728559
             */
            total_balance: string;
            /**
             * @description Whether the stake withdrawal has been requested. This flag is contract specific.
             * @example false
             */
            withdraw_requested: boolean;
            /**
             * @description Amount not yet credited due to a validation round
             * @example 0
             */
            pending_deposit_amount: string;
            /**
             * @description The type of the pool
             * @example single_nominator_pool_v1
             * @enum {string}
             */
            pool_type: "single_nominator_pool_v1" | "nominator_pool_v1" | "ton_whales";
            /**
             * @description Total rewards accumulated by this stake since its first ever delegation
             * @example 9020446847418
             */
            rewards: string;
            /**
             * @description Net annual percentage yield
             * @example 6.02
             */
            net_apy: number;
            /** @description Single_nominator_pool_v1 contract only. Kiln specific withdrawal information */
            kiln_requested_withdraw: {
                /**
                 * @description Amount to withdraw
                 * @example 1002001960122254
                 */
                amount: string;
                /**
                 * @description Flag to identify if the withdraw_request can be withdraw-able
                 * @example true
                 */
                is_withdrawable: boolean;
            } | null;
            /**
             * @description Ton_whales contract only. Amount currently withdraw-able
             * @example 100012345678
             */
            withdraw_balance: string | null;
            /**
             * @description Ton_whales contract only. Amount requested for withdraw
             * @example 100087654321
             */
            withdraw_pending_balance: string | null;
        };
        TONRewardByEpoch: {
            /**
             * @description Epoch ID
             * @example 1715953195
             */
            epoch: string;
            /**
             * @description Epoch start date
             * @example 2024-05-17T13:39:55Z
             */
            start_at: string;
            /**
             * @description Epoch end date
             * @example 2024-05-17T16:34:55Z
             */
            end_at: string;
            /**
             * @description Staked balance in nanoton at the end of the epoch
             * @example 10001198470000
             */
            effective_balance: string;
            /**
             * @description Rewards accumulated on the period
             * @example 28936464584
             */
            rewards: string;
            /**
             * @description Net annual percentage yield
             * @example 6.02
             */
            net_apy: number;
        };
        TONRewardByDay: {
            /**
             * @description Day for this reward entry
             * @example 2024-05-17
             */
            date: string;
            /**
             * @description Staked balance in nanoton at the end of the day
             * @example 10001198470000
             */
            effective_balance: string;
            /**
             * @description Accumulated rewards in nanoton during the day
             * @example 28936464584
             */
            rewards: string;
            /**
             * @description Net annual percentage yield
             * @example 6.02
             */
            net_apy: number;
            /**
             * @description Estimated value of rewards generated for that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko.
             * @example 2344.36
             */
            rewards_usd?: number;
            /**
             * @description Estimated value of the effective balance of that day in USD. The exchange rate is the rate at the end of the day provided by CoinGeckko.
             * @example 4407596.22
             */
            effective_balance_usd?: number;
        };
        TONWithdrawRequest: {
            /**
             * @description Pool address where this withdraw request is for
             * @example Ef_zhiLfydITUXevx3NOkBKyjczc565UvqwkWp07os7EwZMa
             */
            pool?: string;
            /**
             * @description The amount of TON to withdraw in nanoton
             * @example 1002001960122254
             */
            amount?: string;
            /**
             * Format: date-time
             * @description The date this withdraw request was created
             * @example 2023-01-15T01:13:59Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description The date this withdraw request can be executed
             * @example 2023-01-15T01:13:59Z
             */
            withdrawable_at?: string;
            /**
             * @description Hash of the transaction if the withdraw request has been withdrawn
             * @example XGU4jMF6JGhcqvpdXJ+w7XhnFM6fhrRpidnLp7CuGV0=
             */
            tx_hash?: string;
            /**
             * @description Status of the withdraw request
             * @example requested
             * @enum {string}
             */
            status?: "requested" | "withdrawn";
        };
        TONPostStakesPayload: {
            stakes: {
                /**
                 * @description Stake id to be linked in the format {pool_address}|{nominator_address}
                 * @example kf_bOKif9YRKIGTRZw_6ZTZsObUug4J3EZ68BQ7t7E7zAORr|EQBQJR9IALMi8kLWKKoo20A1-i9tLB1F2ZTIIyppHGPFYQlR
                 */
                stakeId?: string;
            }[];
            /**
             * @description Kiln Account ID
             * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
             */
            account_id: string;
        };
        TONNetworkStats: {
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply of Ton currently staked
             * @example 12.4
             */
            supply_staked_percent: number;
            /**
             * @description Number of active validators
             * @example 402
             */
            nb_validators: number;
            /**
             * @description TON price in USD
             * @example 3.5
             */
            ton_price_usd: number;
            /**
             * @description TON inflation rate
             * @example 25.11560824007323
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        TONWalletInfo: {
            /**
             * @description Indicates if the address is a wallet
             * @example true
             */
            wallet: boolean;
            /**
             * @description Balance of the wallet in nanoton
             * @example 1000000
             */
            balance: string;
            /**
             * @description Current state of the wallet
             * @example active
             * @enum {string}
             */
            account_state: "uninitialized" | "active";
            last_transaction_id: {
                /** @example internal.transactionId */
                "@type": string;
                /** @example 54784142000001 */
                lt: string;
                /**
                 * @description Base64-encoded hash of the last transaction
                 * @example LO4ZcnQf4CGvlI9f9pqR9sAhf5fXGbJbTHXvpxBnArY=
                 */
                hash: string;
            };
            /**
             * @description Type of wallet (only present if wallet=true)
             * @example wallet v4 r2
             */
            wallet_type?: string;
            /**
             * @description Sequence number of the wallet (only present if wallet=true)
             * @example 82
             */
            seqno?: number;
            /**
             * @description Unique wallet ID (only present if wallet=true)
             * @example 698983191
             */
            wallet_id?: number;
        };
        TONPrepareTxPayload: {
            /**
             * @description Hex encoded unsigned transaction
             * @example b5ee9c72c1010201004a000011011c29a9a317667c507500000000000301006e627fbdbe5ba683f903a336f8b6ae670f51439b4507823c21a90c447e332094964ff8b838d7ea4c68000000000000000000000000000000586c223e
             */
            unsigned_tx_serialized: string;
            /**
             * @description Hex encoded signature
             * @example 58375aa7640d8f1f9023e30c156d58b1e07e76832814549b6067c03139f057c4b31ee4356fd5785693bbd163004a92fccf53c80c4f720e1cfcce05ba64603709
             */
            signature?: string;
            /**
             * @description Address of the signer
             * @example UQBzQbAszir_fMErkktI7_8Xl2FkhlDUKE4iUGc9V66OMpp1
             */
            from?: string;
        };
        TONPreparedTx: {
            /**
             * @description Hex encoded signed transaction
             * @example te6cckEBAgEArQAB4YgA5oNgWZxV/vmCVySWkd/+Ly7CyQyhqFCcRKDOeq9dHGQCwbrVOyBsePyBHxhgq2rFjwPztBlAoqTbAz4Bic+CviWY9yGrfqvCtJ3eixgCVJfmep5AYnuQcOfmcC3TIwG4SU1NGLsz4oOoAAAAAAAcAQBuYn+9vlumg/kDozb4tq5nD1FDm0UHgjwhqQxEfjMglJZP+Lg41+pMaAAAAAAAAAAAAAAAAAAAAKKEVgs=
             */
            signed_tx_serialized: string;
        };
        TONBroadcastTxPayload: {
            /**
             * @description Hex encoded signed transaction
             * @example te6cckEBAgEArQAB4YgA5oNgWZxV/vmCVySWkd/+Ly7CyQyhqFCcRKDOeq9dHGQCwbrVOyBsePyBHxhgq2rFjwPztBlAoqTbAz4Bic+CviWY9yGrfqvCtJ3eixgCVJfmep5AYnuQcOfmcC3TIwG4SU1NGLsz4oOoAAAAAAAcAQBuYn+9vlumg/kDozb4tq5nD1FDm0UHgjwhqQxEfjMglJZP+Lg41+pMaAAAAAAAAAAAAAAAAAAAAKKEVgs=
             */
            tx_serialized: string;
        };
        TONBroadcastTx: {
            /**
             * @description Hash of the transaction
             * @example SQ5y4jeRZzU4h/lbyWiLhTrR9A3smK5Vmm/1p9ylDFo=
             */
            tx_hash: string;
        };
        /** @example {
         *       "transactions": [
         *         {
         *           "account": "0:50251F4800B322F242D628AA28DB4035FA2F6D2C1D45D994C8232A691C63C561",
         *           "hash": "B2FiWHWiKXq3wFeyrz3heGnk6paG37zc4eHymCzHVv0=",
         *           "lt": "23434414000001",
         *           "now": 1720454314,
         *           "orig_status": "active",
         *           "end_status": "active",
         *           "total_fees": "5553039",
         *           "prev_trans_hash": "0YwyJ6rnmD6GSHjCwbSqYRRRZR4Je3ajRSVOmQKTBDM=",
         *           "prev_trans_lt": "22972195000001",
         *           "description": {
         *             "type": "ord",
         *             "action": {
         *               "valid": true,
         *               "success": true,
         *               "no_funds": false,
         *               "result_code": 0,
         *               "tot_actions": 1,
         *               "msgs_created": 1,
         *               "spec_actions": 0,
         *               "tot_msg_size": {
         *                 "bits": "705",
         *                 "cells": "1"
         *               },
         *               "status_change": "unchanged",
         *               "total_fwd_fees": "10000000",
         *               "skipped_actions": 0,
         *               "action_list_hash": "+TCFxMn1MktBa4iGZ8y01pEMygRnmYGEMofeFHiIuxY=",
         *               "total_action_fees": "3333282"
         *             },
         *             "aborted": false,
         *             "credit_ph": {
         *               "credit": "140268068471039"
         *             },
         *             "destroyed": false,
         *             "compute_ph": {
         *               "mode": 0,
         *               "type": "vm",
         *               "success": true,
         *               "gas_fees": "1323200",
         *               "gas_used": "3308",
         *               "vm_steps": 68,
         *               "exit_code": 0,
         *               "gas_limit": "0",
         *               "gas_credit": "10000",
         *               "msg_state_used": false,
         *               "account_activated": false,
         *               "vm_init_state_hash": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
         *               "vm_final_state_hash": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
         *             },
         *             "storage_ph": {
         *               "status_change": "unchanged",
         *               "storage_fees_collected": "290157"
         *             },
         *             "credit_first": true
         *           },
         *           "block_ref": {
         *             "workchain": 0,
         *             "shard": "6000000000000000",
         *             "seqno": 22378256
         *           },
         *           "in_msg": {
         *             "hash": "kndVN02mdubtxmhkkjz60OwyD6g0aUwThWSjqeqxC3Y=",
         *             "source": null,
         *             "destination": "0:50251F4800B322F242D628AA28DB4035FA2F6D2C1D45D994C8232A691C63C561",
         *             "value": null,
         *             "fwd_fee": null,
         *             "ihr_fee": null,
         *             "created_lt": null,
         *             "created_at": null,
         *             "opcode": "0x4b958d56",
         *             "ihr_disabled": null,
         *             "bounce": null,
         *             "bounced": null,
         *             "import_fee": "0",
         *             "message_content": {
         *               "hash": "xvKE5GreYe2GUpcVdyGql8Zl04TGBSH1v5CmSJXneI4=",
         *               "body": "te6cckEBAgEAhwABnEuVjVbI54rXHHGaszAM0rq344hhUNJLET1sYmiqiKqFtDbL1WzGLMTzRRha4nVO5alpP1cX3E5P4Dls3fIO8gMpqaMXZowasQAAAD0AAwEAaGJ/7ZxUT/rCJRAyaLOH/TKbNhzal0HBO4jPXgKHdvYneYAh3NZQAAAAAAAAAAAAAAAAAADeRiM9",
         *               "decoded": null
         *             },
         *             "init_state": null
         *           },
         *           "out_msgs": [
         *             {
         *               "hash": "1U8v7l9QJDW/CMNa05LL6UzdBrSBRNLm7LmkvRnTyzQ=",
         *               "source": "0:50251F4800B322F242D628AA28DB4035FA2F6D2C1D45D994C8232A691C63C561",
         *               "destination": "-1:DB38A89FF5844A2064D1670FFA65366C39B52E838277119EBC050EEDEC4EF300",
         *               "value": "1000000000",
         *               "fwd_fee": "6666718",
         *               "ihr_fee": "0",
         *               "created_lt": "23434414000002",
         *               "created_at": "1720454314",
         *               "opcode": null,
         *               "ihr_disabled": true,
         *               "bounce": true,
         *               "bounced": false,
         *               "import_fee": null,
         *               "message_content": {
         *                 "hash": "lqKW0iTyhcZ77pPDD4owkVfw2qNdxbh+QQt4YwoJz8c=",
         *                 "body": "te6cckEBAQEAAgAAAEysuc0=",
         *                 "decoded": null
         *               },
         *               "init_state": null
         *             }
         *           ],
         *           "account_state_before": {
         *             "hash": "Kcz+vnm2nmbO4pb0wSyo264F8/3WnFdVYaWNhNR5Cus=",
         *             "balance": "164023287343",
         *             "account_status": "active",
         *             "frozen_hash": null,
         *             "code_hash": "/rX/aCDi/w2Ug+fg1iyBfYRniftK5YDIeIZtlZ2r1cA=",
         *             "data_hash": "9R2bD8OcpgFI8z7PHJaN5vXUJr7HQ06nKX3pTN9Bg6o="
         *           },
         *           "account_state_after": {
         *             "hash": "IsFANgt7iHcwOtk3TPC67SOV+MNCq0w4f6oLpuk9Im8=",
         *             "balance": "163011067586",
         *             "account_status": "active",
         *             "frozen_hash": null,
         *             "code_hash": "/rX/aCDi/w2Ug+fg1iyBfYRniftK5YDIeIZtlZ2r1cA=",
         *             "data_hash": "LL9jzy6YehhW15AcV9JHjL4+VE0pnr/eN+WSqjoF4dA="
         *           },
         *           "mc_block_seqno": 20853046
         *         }
         *       ],
         *       "address_book": {
         *         "0:50251F4800B322F242D628AA28DB4035FA2F6D2C1D45D994C8232A691C63C561": {
         *           "user_friendly": "0QBQJR9IALMi8kLWKKoo20A1-i9tLB1F2ZTIIyppHGPFYe8e"
         *         },
         *         "-1:DB38A89FF5844A2064D1670FFA65366C39B52E838277119EBC050EEDEC4EF300": {
         *           "user_friendly": "kf_bOKif9YRKIGTRZw_6ZTZsObUug4J3EZ68BQ7t7E7zAORr"
         *         }
         *       }
         *     } */
        TONTxStatus: Record<string, never>;
        TONStakeTxPayload: {
            /**
             * @description Kiln Account ID
             * @example d3f1b917-72b1-4982-a4dd-93fce579a708
             */
            account_id: string;
            /**
             * @description Wallet address
             * @example 0QBQJR9IALMi8kLWKKoo20A1-i9tLB1F2ZTIIyppHGPFYe8e
             */
            wallet: string;
            /**
             * @description Amount in nanoton. Minimum is 12000000000 nanoton (1.2 TON)
             * @example 1000000000000000
             */
            amount_nanoton: string;
            /**
             * @description Pool address
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            pool_address: string;
            /**
             * @description Vesting contract address (optional), to be used when staking from a vesting contract
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            vesting_contract_address?: string;
        };
        TONStakeTonWhalesTxPayload: {
            /**
             * @description Kiln Account ID
             * @example d3f1b917-72b1-4982-a4dd-93fce579a708
             */
            account_id: string;
            /**
             * @description Wallet address
             * @example 0QBQJR9IALMi8kLWKKoo20A1-i9tLB1F2ZTIIyppHGPFYe8e
             */
            wallet: string;
            /**
             * @description Amount in nanoton. Minimum is 12000000000 nanoton (1.2 TON)
             * @example 1000000000000000
             */
            amount_nanoton: string;
            /**
             * @description Pool destination address (optional). If not specified, the Kiln TON whales pool with the lowest balance will be used as destination.
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            pool_address?: string;
            /**
             * @description Vesting contract address (optional), to be used when staking from a vesting contract
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            vesting_contract_address?: string;
        };
        TONTx: {
            /**
             * @description Hex encoded transaction data that need to be covered by signature
             * @example 5b451f530950de0cb371a91edf16f36a5180e31162faccc7f10db8ccf027023a
             */
            unsigned_tx_hash: string;
            /**
             * @description Hex encoded full transaction
             * @example b5ee9c72c10102010046000011011c29a9a317668d4f0a0000003e0003010066627fed9c544ffac225103268b387fd329b361cda9741c13b88cf5e028776f6277980187a1200000000000000000000000000002537dddb
             */
            unsigned_tx_serialized: string;
            /**
             * @description Address of the signer
             * @example 0QBQJR9IALMi8kLWKKoo20A1-i9tLB1F2ZTIIyppHGPFYe8e
             */
            from: string;
            /**
             * @description Destination address
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            to: string;
            /**
             * @description Amount in nanoton
             * @example 1000000000000000
             */
            amount: string;
            /**
             * @description Payload in boc base64 format.
             * @example te6ccsEBAQEADAAMABQAAAAASGVsbG8hCaTc/g==
             */
            payload: string;
            /**
             * @description Unix timestamp when the transaction will expire (we set it to 2 hours)
             * @example 1738689966
             */
            valid_until: number;
        };
        TONUnstakeTxPayload: {
            /**
             * @description Wallet address
             * @example 0QBQJR9IALMi8kLWKKoo20A1-i9tLB1F2ZTIIyppHGPFYe8e
             */
            wallet: string;
            /**
             * @description Pool address
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            pool_address: string;
            /**
             * @description Amount in nanoton (optional). If not provided, the full stake will be unstaked
             * @example 1000000000000000
             */
            amount_nanoton?: string;
            /**
             * @description Vesting contract address (optional), to be used when unstaking from a vesting contract.
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            vesting_contract_address?: string;
        };
        TONWhitelistTxPayload: {
            /**
             * @description Wallet address
             * @example 0QBQJR9IALMi8kLWKKoo20A1-i9tLB1F2ZTIIyppHGPFYe8e
             */
            wallet: string;
            /**
             * @description Vesting contract address
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            vesting_contract_address: string;
            /** @description List of addresses to whitelist */
            addresses: string[];
        };
        TONStakeVestingContractTxPayload: {
            /**
             * @description Kiln Account ID
             * @example d3f1b917-72b1-4982-a4dd-93fce579a708
             */
            account_id: string;
            /**
             * @description Wallet address
             * @example 0QBQJR9IALMi8kLWKKoo20A1-i9tLB1F2ZTIIyppHGPFYe8e
             */
            wallet: string;
            /**
             * @description Amount in nanoton
             * @example 1000000000000000
             */
            amount_nanoton: string;
            /**
             * @description Vesting contract address
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            vesting_contract_address: string;
            /**
             * @description Destination address, usually a pool address
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            destination_address: string;
        };
        TONUnstakeVestingContractTxPayload: {
            /**
             * @description Wallet address
             * @example 0QBQJR9IALMi8kLWKKoo20A1-i9tLB1F2ZTIIyppHGPFYe8e
             */
            wallet: string;
            /**
             * @description Amount in nanoton
             * @example 1000000000000000
             */
            amount_nanoton: string;
            /**
             * @description Vesting contract address
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            vesting_contract_address: string;
            /**
             * @description Pool address
             * @example Ef8xihYQ_8JBVBmystDCnNcAsy5yH_NzpFi2eYcXNaSzIdgw
             */
            pool_address: string;
        };
        TONWithdrawRequestPayload: {
            /**
             * @description Pool address where this withdraw request is for
             * @example kf_bOKif9YRKIGTRZw_6ZTZsObUug4J3EZ68BQ7t7E7zAORr
             */
            pool: string;
            /**
             * @description The amount of TON to withdraw in nanoton
             * @example 1000
             */
            amount_nanoton: string;
        };
        TONGetBalancePayload: {
            /**
             * @description Wallet address
             * @example UQAfjn5-4M5H7q_2z4rCjAIGDslZoT0VsZNWaQ9BIaR4w0V9
             */
            address: string;
        };
        NOBLEGetBalancePayload: {
            /**
             * @description Wallet address
             * @example noble1p59lpw8cdu948kn3kxjwely7gm9kgxuzschy48
             */
            address: string;
            /**
             * @description The denomination of the balance to query
             * @example uusdc
             */
            denom: string;
        };
        NOBLEBurnUsdcPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 036d22419964c19ec91afa0e3a9c58dbb1aa1a4a30e5ad06cd47cd4e67f0671180
             */
            pubkey: string;
            /**
             * @description Wallet address on Ethereum to receive the USDC
             * @example 0xBC86717BaD3F8CcF86d2882a6bC351C94580A994
             */
            recipient: string;
            /**
             * @description The amount of USDC to burn
             * @example 1000000
             */
            amount_uusdc: string;
        };
        NOBLEOsmoIbcTransferPayload: {
            /**
             * @description Wallet public key (compressed or uncompressed), this is different than the wallet address
             * @example 036d22419964c19ec91afa0e3a9c58dbb1aa1a4a30e5ad06cd47cd4e67f0671180
             */
            pubkey: string;
            /**
             * @description Osmosis address to receive the USDC
             * @example osmo1p59lpw8cdu948kn3kxjwely7gm9kgxuzschy48
             */
            recipient: string;
            /**
             * @description The amount of USDC to send
             * @example 1000000
             */
            amount_uusdc: string;
        };
        TRXUnsignedTx: {
            /**
             * @description Unsigned transaction Id
             * @example a610890432d168c44f902ab8d984685aa732aeb6b5c9b5d55afaec1c658ec495
             */
            unsigned_tx_id: string;
            /**
             * @description Unsigned serialized transaction
             * @example 0a02237722087aa78d8d8af3f1cd40c8a6949cbf325a57083612530a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e63655632436f6e7472616374121b0a154102e07e61860efd34e1bdedcb5b485da75407d8f110c0843d70e8f4b49abf32
             */
            unsigned_tx_serialized: string;
        };
        TRXPreparedTx: {
            /**
             * @description Signed serialized transaction
             * @example 0a750a02238e2208b63bcc4a1991f66a40d0c1989cbf325a57083612530a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e63655632436f6e7472616374121b0a154102e07e61860efd34e1bdedcb5b485da75407d8f110c0843d70f08fb99abf321241f19adddba846d1fae9233d872048b04a7b003b7757816b5f601d2a08b00f99901b25ec8e6b906a46165a25ece7f8b9e138b755a9d5aca2c880ba8dbaaf8f8a8400
             */
            signed_tx_serialized: string;
        };
        TRXBroadcastedTx: {
            /**
             * @description Hash of transaction
             * @example 4a783155af9825fefabad5e338a1e16d1d3e4b049ab67bc1a32d41aabc8b6d9e
             */
            tx_hash: string;
        };
        TRXCraftStakeTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet address of the owner
             * @example TAERHY5gyzDRmAaeqqa6C4Fuyc9HLnnHx7
             */
            owner_address: string;
            /**
             * @description Amount of TRX to stake in sun
             * @example 1000000
             */
            amount_sun: string;
            /**
             * @description Resource to obtain
             * @example BANDWIDTH
             * @enum {string}
             */
            resource: "BANDWIDTH" | "ENERGY";
        };
        TRXCraftUnstakeTxPayload: {
            /**
             * @description Wallet address of the owner
             * @example TAERHY5gyzDRmAaeqqa6C4Fuyc9HLnnHx7
             */
            owner_address: string;
            /**
             * @description Amount of TRX to unstake in sun
             * @example 1000000
             */
            amount_sun: string;
            /**
             * @description Resource to release
             * @example BANDWIDTH
             * @enum {string}
             */
            resource: "BANDWIDTH" | "ENERGY";
        };
        TRXCraftCancelUnstakeTxPayload: {
            /**
             * @description Wallet address of the owner
             * @example TAERHY5gyzDRmAaeqqa6C4Fuyc9HLnnHx7
             */
            owner_address: string;
        };
        TRXCraftWithdrawUnstakedTxPayload: {
            /**
             * @description Wallet address of the owner
             * @example TAERHY5gyzDRmAaeqqa6C4Fuyc9HLnnHx7
             */
            owner_address: string;
        };
        TRXCraftVoteTxPayload: {
            /**
             * Format: uuid
             * @description Kiln Account ID
             * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
             */
            account_id: string;
            /**
             * @description Wallet address of the owner
             * @example TAERHY5gyzDRmAaeqqa6C4Fuyc9HLnnHx7
             */
            owner_address: string;
            /**
             * @description Number of votes to cast
             * @example {
             *       "TQzd66b9EFVHJfZK5AmiVhBjtJvXGeSPPZ": 1
             *     }
             */
            votes?: {
                [key: string]: number;
            };
        };
        TRXCraftWithdrawRewardsTxPayload: {
            /**
             * @description Wallet address of the owner
             * @example TAERHY5gyzDRmAaeqqa6C4Fuyc9HLnnHx7
             */
            owner_address: string;
        };
        TRXPrepareTxPayload: {
            /**
             * @description Unsigned serialized transaction
             * @example 0a026554220847c22aa98d1f46a94090ee9ba0be325a6a080412660a30747970652e676f6f676c65617069732e636f6d2f70726f6f746f636f6c2e566f74655769746e657373436f6e747261637412320a154102e07e61860efd34e1bdedcb5b485da75407d8f112190a1541a4ce68cfcdd27884bde52cec653354048e0aa989100170b0e1fef6bd32
             */
            unsigned_tx_serialized: string;
            /**
             * @description Signature of the transaction
             * @example 47b1f77b3e30cfbbfa41d795dd34475865240617dd1c5a7bad526f5fd89e52cd057c80b665cc2431efab53520e2b1b92a0425033baee915df858ca1c588b0a1800
             */
            signature: string;
        };
        TRXBroadcastTxPayload: {
            /**
             * @description Signed serialized transaction
             * @example 0a026554220847c22aa98d1f46a94090ee9ba0be325a6a080412660a30747970652e676f6f676c65617069732e636f6d2f70726f6f746f636f6c2e566f74655769746e7373616c6c656454787061796c6f616412320a154102e07e61860efd34e1bdedcb5b485da75407d8f112190a1541a4ce68cfcdd27884bde52cec653354048e0aa989100170b0e1fef6bd32
             */
            tx_serialized: string;
        };
        TRXNetworkStats: {
            /**
             * @description TRX price in USD
             * @example 0.27
             */
            trx_price_usd: number;
            /**
             * @description Number of active bakers
             * @example 423
             */
            nb_validators: number;
            /**
             * @description Gross annual percentage yield
             * @example 4.5
             */
            network_gross_apy: number;
            /**
             * @description Supply percentage of Tron currently staked
             * @example 47.39
             */
            supply_staked_percent: number;
            /**
             * @description TRX inflation rate
             * @example 5.5
             */
            inflation_rate: number;
            /**
             * Format: date-time
             * @description Last date this data was updated
             * @example 2023-01-14T01:13:59Z
             */
            updated_at: string;
        };
        TRXStake: {
            /**
             * @description Wallet address
             * @example TAERHY5gyzDRmAaeqqa6C4Fuyc9HLnnHx7
             */
            wallet: string;
            /**
             * @description Available balance in sun
             * @example 4000000
             */
            available_balance: number;
            /**
             * @description Available balance in sun
             * @example 3000000
             */
            claimable_rewards: number;
            /**
             * @description Frozen TRX for bandwidth in sun
             * @example 1000000
             */
            frozen_bandwidth: number;
            /**
             * @description Frozen TRX for energy in sun
             * @example 1000000
             */
            frozen_energy: number;
            /**
             * Format: date-time
             * @description Last withdraw timestamp
             * @example 2021-01-01T00:00:00Z
             */
            last_withdraw_at: string;
            /** @description Unstaking TRX */
            unstaking: {
                /**
                 * @description Resource type
                 * @example BANDWIDTH
                 * @enum {string}
                 */
                resource: "BANDWIDTH" | "ENERGY";
                /**
                 * @description Amount of TRX unstaking
                 * @example 1000000
                 */
                amount: number;
                /**
                 * Format: date-time
                 * @description end of the waiting period
                 * @example 2021-01-01T00:00:00Z
                 */
                expire: string;
            }[];
            /** @description Votes */
            votes: {
                /**
                 * @description super representative address
                 * @example TQzd66b9EFVHJfZK5AmiVhBjtJvXGeSPPZ
                 */
                address: string;
                /**
                 * @description Vote count
                 * @example 4
                 */
                count: number;
            }[];
            /**
             * @description Withdrawable balance in sun
             * @example 2000000
             */
            withdrawable_balance: number;
            /**
             * Format: date-time
             * @description Last updated timestamp
             * @example 2021-01-01T00:00:00Z
             */
            updated_at: string;
        };
    };
    responses: never;
    parameters: {
        /** @description Comma-separated list of Kiln accounts identifiers */
        AccountsParam: string[];
        /** @description Current page to look-up entries. If not specified, pagination is disabled */
        PaginationPageParam: number;
        /** @description Number of entries to list per page. Only used when `current_page` is specified */
        PaginationPageSizeParam: number;
        /** @description Comma-separated list of states to filter on (unknown, unstaked, deposit_in_progress, pending_initialized, pending_queued, active_ongoing, active_exiting, active_slashed, exited_unslashed, exited_slashed, withdrawal_possible, withdrawal_done). Not available with the `scope` parameter */
        FilterStatesParam: ("unknown" | "unstaked" | "deposit_in_progress" | "pending_initialized" | "pending_queued" | "active_ongoing" | "active_exiting" | "active_slashed" | "exited_unslashed" | "exited_slashed" | "withdrawal_possible" | "withdrawal_done")[];
        /** @description Get data from this date (YYYY-MM-DD) */
        StartDateParam: string;
        /** @description Get data to this date (YYYY-MM-DD) */
        EndDateParam: string;
        /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
        IncludeUSDParam: boolean;
        /** @description Get rewards from this block */
        StartBlockParam: number;
        /** @description Get rewards to this block */
        EndBlockParam: number;
        /** @description Account id */
        AccountIdParam: string;
        /** @description Set to 1 for real-time data */
        RefreshParam: boolean;
        /** @description Organization id */
        OrganizationIdParam: string;
        /** @description Comma-separated list of validators addresses. Recommended limit is 200. */
        ETHValidatorsParam: string[];
        /** @description operator address */
        ETHEigenLayerOperatorParam: string;
        /** @description wallet address */
        ETHEigenLayerRequiredWalletParam: string;
        /** @description wallet address */
        ETHEigenLayerWalletParam: string;
        /** @description EigenPod address */
        ETHEigenLayerEigenPodParam: string;
        /** @description Scope of validators to fetch (all network, all kiln keys) */
        ETHScopeParam: "kiln" | "network";
        /** @description Comma-separated list of wallets addresses */
        ETHWalletsParam: string[];
        /** @description Comma-separated list of proxy-contract addresses.
         *     The definition of a proxy is a smart contract that was involved in the deposit transaction and emitted a log. */
        ETHProxiesParam: string[];
        /** @description Comma-separated list of withdrawal credentials. */
        ETHWithdrawalCredentialsParam: string[];
        /** @description Include EigenLayer reporting data */
        ETHIncludeEigenLayerParam: boolean;
        /** @description Comma-separated list of validators' consensus layer indexes */
        ETHValidatorIndexesParam: number[];
        /** @description Comma-separated list of chain ids */
        DefiChainIdsParam: string[];
        /** @description Comma-separated list of vault addresses prefixed by chain identifier: `eth`, `arb`, `bsc`, `matic`, `op` */
        DefiVaultsParam: string[];
        /** @description Comma-separated list of vault ids */
        DefiVaultIdsParam: string[];
        /** @description Comma-separated list of wallet addresses */
        DefiWalletParam: string[];
        /** @description The address of the pooling integration */
        ETHOnChainIntegrationParam: string;
        /** @description Comma-separated list of operation IDs */
        ETHOnChainOperationIDs: string[];
        /** @description Comma-separated list of wallets addresses */
        XTZWalletsParam: string[];
        /** @description Comma-separated list of baker addresses */
        XTZValidatorsParam: string[];
        /** @description The cycle from which we want to fetch rewards. Must be used with `format=cycle` */
        XTZStartCycleParam: number;
        /** @description The cycle until which we want to fetch rewards. Must be used with `format=cycle` */
        XTZEndCycleParam: number;
        /** @description The format of the response. Defaults to `daily` */
        XTZRewardsFormatParam: "daily" | "cycle";
        /** @description Comma-separated list of wallets addresses */
        SOLWalletsParam: string[];
        /** @description Comma-separated list of stake addresses */
        SOLStakeAccountsParam: string[];
        /** @description Comma-separated list of validator addresses */
        SOLValidatorsParam: string[];
        /** @description The epoch from which we want to fetch rewards. Must be used with `format=epoch` */
        SOLStartEpochParam: number;
        /** @description The epoch until which we want to fetch rewards. Must be used with `format=epoch` */
        SOLEndEpochParam: number;
        /** @description The format of the response. Defaults to `daily` */
        SOLRewardsFormatParam: "daily" | "epoch";
        /** @description Comma-separated list of validators addresses, these addresses
         *     are matched with the corresponding delegator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        ATOMValidatorsParam: string[];
        /** @description Comma-separated list of delegator addresses, these addresses
         *     are matched with the corresponding validator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        ATOMDelegatorsParam: string[];
        /** @description whether or not the operation returned will include authz operations, defaults to false */
        ATOMAuthzFlagParam: boolean;
        /** @description whether or not the operation returned will include wasm operations, defaults to false */
        ATOMWasmFlagParam: boolean;
        /** @description Precision to use when formatting amounts */
        ATOMPrecisionParam: "chain" | "micro" | "atto";
        /** @description Comma-separated list of validators addresses, these addresses
         *     are matched with the corresponding delegator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        CROValidatorsParam: string[];
        /** @description Comma-separated list of delegator addresses, these addresses
         *     are matched with the corresponding validator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        CRODelegatorsParam: string[];
        /** @description whether or not the operation returned will include authz operations, defaults to false */
        CROAuthzFlagParam: boolean;
        /** @description whether or not the operation returned will include wasm operations, defaults to false */
        CROWasmFlagParam: boolean;
        /** @description Precision to use when formatting amounts */
        CROPrecisionParam: "chain" | "micro" | "atto";
        /** @description Comma-separated list of validators addresses, these addresses
         *     are matched with the corresponding delegator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        OMValidatorsParam: string[];
        /** @description Comma-separated list of delegator addresses, these addresses
         *     are matched with the corresponding validator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        OMDelegatorsParam: string[];
        /** @description whether or not the operation returned will include authz operations, defaults to false */
        OMAuthzFlagParam: boolean;
        /** @description whether or not the operation returned will include wasm operations, defaults to false */
        OMWasmFlagParam: boolean;
        /** @description Precision to use when formatting amounts */
        OMPrecisionParam: "chain" | "micro" | "atto";
        ADAStakeAddressesParam: string;
        ADAWalletsParam: string;
        ADAPoolIDsParam: string;
        /** @description The format of the response. Defaults to `daily` */
        ADARewardsFormatParam: "daily" | "epoch";
        /** @description The epoch from which we want to fetch rewards. Must be used with `format=epoch` */
        ADAStartEpochParam: number;
        /** @description The epoch until which we want to fetch rewards. Must be used with `format=epoch` */
        ADAEndEpochParam: number;
        /** @description Current page to look-up entries. Defaults to 1. If the number of entries returned is lesser than `page_size`, it means it's the last page and there are no more entries. */
        ADAPaginationPageParam: number;
        /** @description Number of entries to list per page. Defaults to `100`. specified */
        ADAPaginationPageSizeParam: number;
        BBNWalletsParam: string;
        BBNTxIDsParam: string;
        /** @description Comma-separated list of wallets addresses */
        MATICWalletsParam: string[];
        /** @description Comma-separated list of validators' indexes */
        MATICValidatorIndexesParam: number[];
        /** @description Comma-separated list of wallets addresses */
        POLWalletsParam: string[];
        /** @description Comma-separated list of validators' indexes */
        POLValidatorIndexesParam: number[];
        /** @description Comma-separated list of NEAR account ID */
        NEARWalletsParam: string[];
        /** @description Comma-separated list of Kiln internal stake account ID */
        NEARStakeAccountsParam: string[];
        /** @description Comma-separated list of NEAR validator ID */
        NEARValidatorsParam: string[];
        /** @description The epoch from which we want to fetch rewards. Must be used with `format=epoch` */
        NEARStartEpochParam: number;
        /** @description The epoch until which we want to fetch rewards. Must be used with `format=epoch` */
        NEAREndEpochParam: number;
        /** @description The format of the response. Defaults to `daily` */
        NEARRewardsFormatParam: "daily" | "epoch";
        /** @description Hash of the transaction */
        NEARTxHashParam: string;
        /** @description Comma-separated list of validators addresses, these addresses
         *     are matched with the corresponding delegator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        OSMOValidatorsParam: string[];
        /** @description Comma-separated list of delegator addresses, these addresses
         *     are matched with the corresponding validator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        OSMODelegatorsParam: string[];
        /** @description whether or not the operation returned will include authz operations, defaults to false */
        OSMOAuthzFlagParam: boolean;
        /** @description whether or not the operation returned will include wasm operations, defaults to false */
        OSMOWasmFlagParam: boolean;
        /** @description Precision to use when formatting amounts */
        OSMOPrecisionParam: "chain" | "micro" | "atto";
        /** @description Comma-separated list of wallets addresses */
        EGLDWalletsParam: string[];
        /** @description Comma-separated list of validator contract addresses */
        EGLDValidatorsParam: string[];
        DOTAddressesParam: string;
        DOTValidatorsParam: string;
        /** @description Current page to look-up entries. Defaults to 1. If the number of entries returned is lesser than `page_size`, it means it's the last page and there are no more entries. */
        DOTPaginationPageParam: number;
        /** @description Number of entries to list per page. Defaults to `100`. specified */
        DOTPaginationPageSizeParam: number;
        DOTPoolIDsParam: number;
        /** @description The format of the response. Defaults to `daily` */
        DOTRewardsFormatParam: "daily" | "era";
        KSMAddressesParam: string;
        KSMValidatorsParam: string;
        /** @description Current page to look-up entries. Defaults to 1. If the number of entries returned is lesser than `page_size`, it means it's the last page and there are no more entries. */
        KSMPaginationPageParam: number;
        /** @description Number of entries to list per page. Defaults to `100`. specified */
        KSMPaginationPageSizeParam: number;
        KSMPoolIDsParam: number;
        /** @description The format of the response. Defaults to `daily` */
        KSMRewardsFormatParam: "daily" | "era";
        /** @description Comma-separated list of validators addresses, these addresses
         *     are matched with the corresponding delegator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        DYDXValidatorsParam: string[];
        /** @description Comma-separated list of delegator addresses, these addresses
         *     are matched with the corresponding validator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        DYDXDelegatorsParam: string[];
        /** @description whether or not the operation returned will include authz operations, defaults to false */
        DYDXAuthzFlagParam: boolean;
        /** @description whether or not the operation returned will include wasm operations, defaults to false */
        DYDXWasmFlagParam: boolean;
        /** @description Precision to use when formatting amounts */
        DYDXPrecisionParam: "chain" | "micro" | "atto";
        /** @description Comma-separated list of validators addresses, these addresses
         *     are matched with the corresponding delegator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        TIAValidatorsParam: string[];
        /** @description Comma-separated list of delegator addresses, these addresses
         *     are matched with the corresponding validator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        TIADelegatorsParam: string[];
        /** @description whether or not the operation returned will include authz operations, defaults to false */
        TIAAuthzFlagParam: boolean;
        /** @description whether or not the operation returned will include wasm operations, defaults to false */
        TIAWasmFlagParam: boolean;
        /** @description Precision to use when formatting amounts */
        TIAPrecisionParam: "chain" | "micro" | "atto";
        /** @description Comma-separated list of validators addresses, these addresses
         *     are matched with the corresponding delegator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        ZETAValidatorsParam: string[];
        /** @description Comma-separated list of delegator addresses, these addresses
         *     are matched with the corresponding validator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        ZETADelegatorsParam: string[];
        /** @description whether or not the operation returned will include authz operations, defaults to false */
        ZETAAuthzFlagParam: boolean;
        /** @description whether or not the operation returned will include wasm operations, defaults to false */
        ZETAWasmFlagParam: boolean;
        /** @description Precision to use when formatting amounts */
        ZETAPrecisionParam: "chain" | "micro" | "atto";
        /** @description Comma-separated list of validators addresses, these addresses
         *     are matched with the corresponding delegator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        KAVAValidatorsParam: string[];
        /** @description Comma-separated list of delegator addresses, these addresses
         *     are matched with the corresponding validator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        KAVADelegatorsParam: string[];
        /** @description whether or not the operation returned will include authz operations, defaults to false */
        KAVAAuthzFlagParam: boolean;
        /** @description whether or not the operation returned will include wasm operations, defaults to false */
        KAVAWasmFlagParam: boolean;
        /** @description Precision to use when formatting amounts */
        KAVAPrecisionParam: "chain" | "micro" | "atto";
        /** @description Comma-separated list of validators addresses, these addresses
         *     are matched with the corresponding delegator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        FETValidatorsParam: string[];
        /** @description Comma-separated list of delegator addresses, these addresses
         *     are matched with the corresponding validator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        FETDelegatorsParam: string[];
        /** @description whether or not the operation returned will include authz operations, defaults to false */
        FETAuthzFlagParam: boolean;
        /** @description whether or not the operation returned will include wasm operations, defaults to false */
        FETWasmFlagParam: boolean;
        /** @description Precision to use when formatting amounts */
        FETPrecisionParam: "chain" | "micro" | "atto";
        /** @description Comma-separated list of validators addresses, these addresses
         *     are matched with the corresponding delegator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        INJValidatorsParam: string[];
        /** @description Comma-separated list of delegator addresses, these addresses
         *     are matched with the corresponding validator addresses. To
         *     fetch a specific stake, pass your wallet address and the
         *     validator address as parameters.
         *      */
        INJDelegatorsParam: string[];
        /** @description whether or not the operation returned will include authz operations, defaults to false */
        INJAuthzFlagParam: boolean;
        /** @description whether or not the operation returned will include wasm operations, defaults to false */
        INJWasmFlagParam: boolean;
        /** @description Precision to use when formatting amounts */
        INJPrecisionParam: "chain" | "micro" | "atto";
        /** @description The format of the response. Defaults to `daily` */
        TONRewardsFormatParam: "daily" | "epoch";
        /** @description Comma-separated list of nominator addresses */
        TONNominatorsParam: string[];
        /** @description Comma-separated list of pool addresses */
        TONPoolsParam: string[];
        /** @description Pool address */
        TONPoolParam: string;
        /** @description Transaction hash */
        TONTxHashParam: string;
        /** @description Wallet address */
        TONGetWalletInfoParam: string;
        /** @description Vesting contract address */
        TONGetVestingContractOwnerParam: string;
        /** @description Single nominator contract address */
        TONGetSingleNominatorContractOwnerParam: string;
        TRXWalletsParam: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["AccountsResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Account to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["AccountPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["Account"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Account id */
                id: components["parameters"]["AccountIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["Account"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Account id */
                id: components["parameters"]["AccountIdParam"];
            };
            cookie?: never;
        };
        /** @description Account to update */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["AccountPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["Account"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Account id */
                id: components["parameters"]["AccountIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["Account"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAccountStakes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Account id */
                id: components["parameters"]["AccountIdParam"];
            };
            cookie?: never;
        };
        /** @description Stakes to add */
        requestBody: {
            content: {
                "application/json; charset=utf-8": {
                    /** @description List of stake ids to add */
                    stake_ids: string[];
                    /**
                     * @description Protocol name
                     * @example ETH
                     * @enum {string}
                     */
                    protocol: "NEAR" | "ETH" | "ATOM" | "POL" | "ADA" | "OSMO" | "XTZ" | "DOT" | "KSM" | "SOL" | "DYDX" | "TIA" | "EGLD" | "ZETA" | "INJ" | "FET" | "TON" | "KAVA" | "BBN" | "CRO" | "OM" | "SUI" | "TRX";
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CoreStake"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAccountPortfolio: {
        parameters: {
            query?: {
                /** @description Set to 1 for real-time data */
                refresh?: components["parameters"]["RefreshParam"];
            };
            header?: never;
            path: {
                /** @description Account id */
                id: components["parameters"]["AccountIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["Portfolio"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAccountReports: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Account id */
                id: components["parameters"]["AccountIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrganizationPortfolio: {
        parameters: {
            query?: {
                /** @description Set to 1 for real-time data */
                refresh?: components["parameters"]["RefreshParam"];
            };
            header?: never;
            path: {
                /** @description Organization id */
                id: components["parameters"]["OrganizationIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["Portfolio"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrganizationReports: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization id */
                id: components["parameters"]["OrganizationIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDeployments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["Deployment"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses. Recommended limit is 200. */
                validators?: components["parameters"]["ETHValidatorsParam"];
                /** @description Scope of validators to fetch (all network, all kiln keys) */
                scope?: components["parameters"]["ETHScopeParam"];
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["ETHWalletsParam"];
                /** @description Comma-separated list of proxy-contract addresses.
                 *     The definition of a proxy is a smart contract that was involved in the deposit transaction and emitted a log. */
                proxies?: components["parameters"]["ETHProxiesParam"];
                /** @description Comma-separated list of withdrawal credentials. */
                withdrawal_credentials?: components["parameters"]["ETHWithdrawalCredentialsParam"];
                /** @description Comma-separated list of validators' consensus layer indexes */
                validator_indexes?: components["parameters"]["ETHValidatorIndexesParam"];
                /** @description Include EigenLayer reporting data */
                include_eigenlayer?: components["parameters"]["ETHIncludeEigenLayerParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Current page to look-up entries. If not specified, pagination is disabled */
                current_page?: components["parameters"]["PaginationPageParam"];
                /** @description Number of entries to list per page. Only used when `current_page` is specified */
                page_size?: components["parameters"]["PaginationPageSizeParam"];
                /** @description Comma-separated list of states to filter on (unknown, unstaked, deposit_in_progress, pending_initialized, pending_queued, active_ongoing, active_exiting, active_slashed, exited_unslashed, exited_slashed, withdrawal_possible, withdrawal_done). Not available with the `scope` parameter */
                filter_states?: components["parameters"]["FilterStatesParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHStake"][];
                        pagination?: components["schemas"]["Pagination"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEthStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostETHStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ETHStake"][];
                        pagination?: components["schemas"]["Pagination"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses. Recommended limit is 200. */
                validators?: components["parameters"]["ETHValidatorsParam"];
                /** @description Scope of validators to fetch (all network, all kiln keys) */
                scope?: components["parameters"]["ETHScopeParam"];
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["ETHWalletsParam"];
                /** @description Comma-separated list of proxy-contract addresses.
                 *     The definition of a proxy is a smart contract that was involved in the deposit transaction and emitted a log. */
                proxies?: components["parameters"]["ETHProxiesParam"];
                /** @description Comma-separated list of validators' consensus layer indexes */
                validator_indexes?: components["parameters"]["ETHValidatorIndexesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses. Recommended limit is 200. */
                validators?: components["parameters"]["ETHValidatorsParam"];
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["ETHWalletsParam"];
                /** @description Comma-separated list of proxy-contract addresses.
                 *     The definition of a proxy is a smart contract that was involved in the deposit transaction and emitted a log. */
                proxies?: components["parameters"]["ETHProxiesParam"];
                /** @description Comma-separated list of validators' consensus layer indexes */
                validator_indexes?: components["parameters"]["ETHValidatorIndexesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["ETHOperationDeposit"] | components["schemas"]["ETHOperationConsensusWithdrawal"] | components["schemas"]["ETHOperationExecutionReward"] | components["schemas"]["ETHOperationKilnExitRequest"] | components["schemas"]["ETHOperationLidoExitRequest"] | components["schemas"]["ETHOperationRioExitRequest"] | components["schemas"]["ETHOperationVoluntaryExit"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHNetworkStats"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthKilnStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHKilnStats"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEthKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Ethereum keys to generate */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ETHPostKeysPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHPostKeysCliResponse"] | components["schemas"]["ETHPostKeysBatchResponse"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEthStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ETHCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEthPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ETHPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEthBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ETHBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ETHBroadcastedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ETHTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEthRequestExitTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ETHCraftRequestExitTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses. Recommended limit is 200. */
                validators?: components["parameters"]["ETHValidatorsParam"];
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["ETHWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getExitMessage: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses. Recommended limit is 200. */
                validators?: components["parameters"]["ETHValidatorsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ETHExitMessage"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEigenLayerEigenPod: {
        parameters: {
            query: {
                /** @description wallet address */
                wallet: components["parameters"]["ETHEigenLayerRequiredWalletParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /**
                         * @description The EigenPod address of the given wallet
                         * @example 0x991c468AbcE2b4DD627a6210C145373EbABdd186
                         */
                        data: string;
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEigenLayerOperator: {
        parameters: {
            query: {
                /** @description operator address */
                operator: components["parameters"]["ETHEigenLayerOperatorParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHEigenLayerOperator"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEigenLayerSummary: {
        parameters: {
            query?: {
                /** @description wallet address */
                wallet?: components["parameters"]["ETHEigenLayerWalletParam"];
                /** @description EigenPod address */
                eigenpod?: components["parameters"]["ETHEigenLayerEigenPodParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHEigenLayerSummary"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEigenLayerAvsRewards: {
        parameters: {
            query: {
                /** @description wallet address */
                wallet: components["parameters"]["ETHEigenLayerRequiredWalletParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHEigenLayerAvsReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEigenLayerNativePoints: {
        parameters: {
            query?: {
                /** @description wallet address */
                wallet?: components["parameters"]["ETHEigenLayerWalletParam"];
                /** @description EigenPod address */
                eigenpod?: components["parameters"]["ETHEigenLayerEigenPodParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHEigenLayerNativePoints"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEigenLayerNativeUndelegations: {
        parameters: {
            query?: {
                /** @description wallet address */
                wallet?: components["parameters"]["ETHEigenLayerWalletParam"];
                /** @description EigenPod address */
                eigenpod?: components["parameters"]["ETHEigenLayerEigenPodParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHEigenLayerNativeUndelegation"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEigenLayerLiquidPoints: {
        parameters: {
            query: {
                /** @description wallet address */
                wallet: components["parameters"]["ETHEigenLayerRequiredWalletParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHEigenLayerLiquidPoints"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEigenLayerLiquidDeposits: {
        parameters: {
            query: {
                /** @description wallet address */
                wallet: components["parameters"]["ETHEigenLayerRequiredWalletParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHEigenLayerLiquidDeposit"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEigenLayerWithdrawals: {
        parameters: {
            query: {
                /** @description wallet address */
                wallet: components["parameters"]["ETHEigenLayerRequiredWalletParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHEigenLayerLiquidWithdrawal"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEigenLayerClaimRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json; charset=utf-8": {
                    /**
                     * @description Address that earned the rewards
                     * @example 0x11ed089a9715aDB1e294A73f4e8C40A7a455b6d3
                     */
                    earner_address: string;
                    /**
                     * @description Address that will receive the rewards, if not provided, the `earner_address` will be used.
                     * @example 0x11ed089a9715aDB1e294A73f4e8C40A7a455b6d3
                     */
                    receiver_address?: string;
                    /**
                     * @description Array of ERC20 token addresses for which you have unclaimed rewards. If not provided, we will automatically process all tokens with rewards available to you.
                     * @example [
                     *       "0x0E859E11bD289e8983f4E78f3503b26F192A7a95",
                     *       "0x3B78576F7D6837500bA3De27A60c7f594934027E"
                     *     ]
                     */
                    token_addresses?: string[];
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters or No rewards to claim */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEigenLayerVerifyCheckpointProofsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json; charset=utf-8": {
                    /**
                     * @description Address of the EigenPod owner
                     * @example 0x7fF0B7D8b99E4cD685355A786B6ad5287B6552C1
                     */
                    wallet: string;
                    /**
                     * @description Array of validator indexes to process, they must have their `withdrawal_credentials` pointed to the EigenPod of the given `wallet`. If not provided, all validators with `withdrawal_credentials` pointed to the EigenPod of the provided `wallet` will be processed
                     * @example [
                     *       1659766,
                     *       1659767
                     *     ]
                     */
                    validator_indexes?: number[];
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters or No more checkpoint proofs to process */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEigenLayerVerifyWithdrawalCredentialsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json; charset=utf-8": {
                    /**
                     * @description Address of the EigenPod owner
                     * @example 0x7fF0B7D8b99E4cD685355A786B6ad5287B6552C1
                     */
                    wallet: string;
                    /** @description Array of validator indexes to restake, they must have their `withdrawal_credentials` pointed to the EigenPod of the given wallet. If not provided, all validators with `withdrawal_credentials` pointed to the provided EigenPod will be processed */
                    validator_indexes?: number[];
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDefiStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallet addresses */
                wallets?: components["parameters"]["DefiWalletParam"];
                /** @description Comma-separated list of vault addresses prefixed by chain identifier: `eth`, `arb`, `bsc`, `matic`, `op` */
                vaults?: components["parameters"]["DefiVaultsParam"];
                /** @description Comma-separated list of vault ids */
                vault_ids?: components["parameters"]["DefiVaultIdsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DefiStake"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /**
                         * @description Error message
                         * @example The vaults.0 is invalid. It should be in the format: <network>_<address>.
                         */
                        message?: string;
                        /**
                         * @description Details of all the errors
                         * @example {
                         *       "vaults.0": [
                         *         "The vaults.0 is invalid. It should be in the format: <network>_<address>."
                         *       ]
                         *     }
                         */
                        errors?: Record<string, never>;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDefiMorphoExtraRewards: {
        parameters: {
            query: {
                /** @description Comma-separated list of wallet addresses */
                wallets?: components["parameters"]["DefiWalletParam"];
                /** @description Comma-separated list of chain ids */
                chain_ids: components["parameters"]["DefiChainIdsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DefiMorphoExtraReward"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /** @description Error message */
                        message?: string;
                        /** @description Details of all the errors */
                        errors?: Record<string, never>;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDefiCraftClaimMorphoRewardsTransaction: {
        parameters: {
            query: {
                /** @description Comma-separated list of wallet addresses */
                wallets?: components["parameters"]["DefiWalletParam"];
                /** @description Comma-separated list of chain ids */
                chain_ids: components["parameters"]["DefiChainIdsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DefiMorphoClaimReward"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /** @description Error message */
                        message?: string;
                        /** @description Details of all the errors */
                        errors?: Record<string, never>;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDefiCraftApproveTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Payload containing the necessary parameters to craft the approval transaction. */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DefiCraftApproveTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DefiTransaction"];
                    };
                };
            };
            /** @description The amount is already approved */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /** @description Error message */
                        message?: string;
                        /** @description Details of all the errors */
                        errors?: Record<string, never>;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDefiCraftDepositTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Payload containing the necessary parameters to craft the deposit transaction. */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DefiCraftDepositTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DefiTransaction"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /** @description Error message */
                        message?: string;
                        /** @description Details of all the errors */
                        errors?: Record<string, never>;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDefiCraftWithdrawTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Payload containing the necessary parameters to craft the withdrawal transaction. */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DefiCraftWithdrawTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DefiTransaction"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /** @description Error message */
                        message?: string;
                        /** @description Details of all the errors */
                        errors?: Record<string, never>;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDefiOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallet addresses */
                wallets?: components["parameters"]["DefiWalletParam"];
                /** @description Comma-separated list of vault addresses prefixed by chain identifier: `eth`, `arb`, `bsc`, `matic`, `op` */
                vaults?: components["parameters"]["DefiVaultsParam"];
                /** @description Comma-separated list of vault ids */
                vault_ids?: components["parameters"]["DefiVaultIdsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /** @example [
                         *       {
                         *         "type": "deposit",
                         *         "assets": "1000000",
                         *         "shares": "996951",
                         *         "sender": "0x9d94BF9DE2f770645186814556eA3C080E68D2F4",
                         *         "timestamp": "2024-06-12T11:37:48+00:00",
                         *         "tx_hash": "0xae6cd6c0180dc7ea54f7ef701c20d6d7c30533e7030485f6b720284a13e00da3",
                         *         "vault": "0x682cFC8A3d956FBA2c40791ec8d5a49E13BAaFbD",
                         *         "owner": "0x9d94BF9DE2f770645186814556eA3C080E68D2F4",
                         *         "chain": "eth"
                         *       },
                         *       {
                         *         "type": "withdrawal",
                         *         "assets": "1000000000",
                         *         "shares": "996995364",
                         *         "sender": "0x821B6341bEC60Cb276fBc5E7E25d68D1ca14b180",
                         *         "timestamp": "2024-06-11T18:43:12+00:00",
                         *         "tx_hash": "0x6f26fdfad5b13a79dcfd2f8b1fcfe59c411a6d3ea411902f8abd217199302635",
                         *         "vault": "0x682cFC8A3d956FBA2c40791ec8d5a49E13BAaFbD",
                         *         "owner": "0x821B6341bEC60Cb276fBc5E7E25d68D1ca14b180",
                         *         "chain": "eth"
                         *       }
                         *     ] */
                        data: components["schemas"]["DefiOperation"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /**
                         * @description Error message
                         * @example The vaults.0 is invalid. It should be in the format: <network>_<address>.
                         */
                        message?: string;
                        /**
                         * @description Details of all the errors
                         * @example {
                         *       "vaults.0": [
                         *         "The vaults.0 is invalid. It should be in the format: <network>_<address>."
                         *       ]
                         *     }
                         */
                        errors?: Record<string, never>;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDefiNetworkStats: {
        parameters: {
            query?: {
                /** @description Comma-separated list of vault addresses prefixed by chain identifier: `eth`, `arb`, `bsc`, `matic`, `op` */
                vaults?: components["parameters"]["DefiVaultsParam"];
                /** @description Comma-separated list of vault ids */
                vault_ids?: components["parameters"]["DefiVaultIdsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DefiNetworkStats"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /**
                         * @description Error message
                         * @example The vaults.0 is invalid. It should be in the format: <network>_<address>.
                         */
                        message?: string;
                        /**
                         * @description Details of all the errors
                         * @example {
                         *       "vaults.0": [
                         *         "The vaults.0 is invalid. It should be in the format: <network>_<address>."
                         *       ]
                         *     }
                         */
                        errors?: Record<string, never>;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEthOnChainKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Ethereum keys to generate */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ETHPostKeysOnChainPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ETHPostKeysCliResponse"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEthVSuiteKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Ethereum keys to generate on withdrawal channel 0 (vNFT) of the vSuite contract */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ETHPostKeysVSuitePayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ETHPostKeysCliResponse"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthOnchainV2Stakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["ETHWalletsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ETHOnchainV2Stake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthOnchainV2Operations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["ETHWalletsParam"];
                /** @description Comma-separated list of operation IDs */
                ids?: components["parameters"]["ETHOnChainOperationIDs"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ETHOnchainV2Operation"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthOnchainV2Rewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["ETHWalletsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description The address of the pooling integration */
                integration?: components["parameters"]["ETHOnChainIntegrationParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHOnchainV2Reward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthOnchainV2NetworkStats: {
        parameters: {
            query?: {
                /** @description The address of the pooling integration */
                integration?: components["parameters"]["ETHOnChainIntegrationParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHOnchainV2NetworkStats"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEthOnchainV2ExitTickets: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["ETHWalletsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ETHOnchainV2ExitTicket"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getXtzStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["XTZWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Comma-separated list of baker addresses */
                validators?: components["parameters"]["XTZValidatorsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["XTZStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getXtzRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["XTZWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Comma-separated list of baker addresses */
                validators?: components["parameters"]["XTZValidatorsParam"];
                /** @description The format of the response. Defaults to `daily` */
                format?: components["parameters"]["XTZRewardsFormatParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description The cycle from which we want to fetch rewards. Must be used with `format=cycle` */
                start_cycle?: components["parameters"]["XTZStartCycleParam"];
                /** @description The cycle until which we want to fetch rewards. Must be used with `format=cycle` */
                end_cycle?: components["parameters"]["XTZEndCycleParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["XTZRewardByDay"] | components["schemas"]["XTZRewardByCycle"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getXtzOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["XTZWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Comma-separated list of baker addresses */
                validators?: components["parameters"]["XTZValidatorsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["XTZOperationDelegate"] | components["schemas"]["XTZOperationUndelegate"] | components["schemas"]["XTZOperationActivation"] | components["schemas"]["XTZOperationPayment"] | components["schemas"]["XTZOperationStake"] | components["schemas"]["XTZOperationUnstake"] | components["schemas"]["XTZOperationFinalize"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getXtzNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["XTZNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getXtzReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["XTZWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postXtzDelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["XTZCraftDelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["XTZUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postXtzUndelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["XTZCraftUndelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["XTZUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postXtzStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["XTZCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["XTZUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postXtzUnStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["XTZCraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["XTZUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postXtzFinalizeUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["XTZCraftUndelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["XTZUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postXtzPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["XTZPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["XTZSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postXtzBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["XTZBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["XTZBroadcastedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getXtzTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
                /** @description Block number in which the transaction was included */
                block_number: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["XTZTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getXtzTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of stake addresses */
                stake_accounts?: components["parameters"]["SOLStakeAccountsParam"];
                /** @description Comma-separated list of validator addresses */
                validators?: components["parameters"]["SOLValidatorsParam"];
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["SOLWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSolStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["SOLPostStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of stake addresses */
                stake_accounts?: components["parameters"]["SOLStakeAccountsParam"];
                /** @description Comma-separated list of validator addresses */
                validators?: components["parameters"]["SOLValidatorsParam"];
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["SOLWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description The format of the response. Defaults to `daily` */
                format?: components["parameters"]["SOLRewardsFormatParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description The epoch from which we want to fetch rewards. Must be used with `format=epoch` */
                start_epoch?: components["parameters"]["SOLStartEpochParam"];
                /** @description The epoch until which we want to fetch rewards. Must be used with `format=epoch` */
                end_epoch?: components["parameters"]["SOLEndEpochParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["SOLRewardByEpoch"] | components["schemas"]["SOLRewardByDay"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of stake addresses */
                stake_accounts?: components["parameters"]["SOLStakeAccountsParam"];
                /** @description Comma-separated list of validator addresses */
                validators?: components["parameters"]["SOLValidatorsParam"];
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["SOLWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["SOLOperationCreateAccountWithSeed"] | components["schemas"]["SOLOperationCreateAccount"] | components["schemas"]["SOLOperationDelegate"] | components["schemas"]["SOLOperationDeactivate"] | components["schemas"]["SOLOperationRedelegate"] | components["schemas"]["SOLOperationSplit"] | components["schemas"]["SOLOperationWithdraw"] | components["schemas"]["SOLOperationMerge"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of stake addresses */
                stake_accounts?: components["parameters"]["SOLStakeAccountsParam"];
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["SOLWalletsParam"];
                /** @description Comma-separated list of validator addresses */
                validators?: components["parameters"]["SOLValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolNonceAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLNonceAccount"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSolStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stake transaction to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["SOLStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLStakeTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSolDeactivateStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stake to deactivate */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["SOLDeactivateStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLStakeTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSolWithdrawStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stake to withdraw */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["SOLWithdrawStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLStakeTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSolMergeStakesTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to merge */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["SOLMergeStakesTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLStakeTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSolSplitStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stake to split */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["SOLSplitStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLStakeTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSolPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to sign */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["SOLPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLPreparedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSolBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Signed transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["SOLBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLBroadcastTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["SOLTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAtomStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["ATOMValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["ATOMDelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["ATOMPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ATOMStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAtomStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostATOMStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAtomRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["ATOMValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["ATOMDelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["ATOMPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ATOMReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAtomOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["ATOMValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["ATOMDelegatorsParam"];
                /** @description whether or not the operation returned will include authz operations, defaults to false */
                authz?: components["parameters"]["ATOMAuthzFlagParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["ATOMPrecisionParam"];
                /** @description whether or not the operation returned will include wasm operations, defaults to false */
                wasm?: components["parameters"]["ATOMWasmFlagParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["ATOMOperationDelegate"] | components["schemas"]["ATOMOperationUndelegate"] | components["schemas"]["ATOMOperationRedelegate"] | components["schemas"]["ATOMOperationWithdrawRewards"] | components["schemas"]["ATOMOperationGrant"] | components["schemas"]["ATOMOperationExec"] | components["schemas"]["ATOMOperationContract"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAtomNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ATOMNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAtomReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["ATOMDelegatorsParam"];
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["ATOMValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAtomStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ATOMCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ATOMStakeUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAtomWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ATOMCraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ATOMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAtomRestakeRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ATOMCraftRestakeRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ATOMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAtomUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ATOMCraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ATOMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAtomRedelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ATOMCraftRedelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ATOMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAtomPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ATOMPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ATOMSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAtomBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ATOMBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ATOMTxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAtomTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ATOMTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAtomTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCroStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["CROValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["CRODelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["CROPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CROStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCroStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostCROStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCroRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["CROValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["CRODelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["CROPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CROReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCroOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["CROValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["CRODelegatorsParam"];
                /** @description whether or not the operation returned will include authz operations, defaults to false */
                authz?: components["parameters"]["CROAuthzFlagParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["CROPrecisionParam"];
                /** @description whether or not the operation returned will include wasm operations, defaults to false */
                wasm?: components["parameters"]["CROWasmFlagParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["CROOperationDelegate"] | components["schemas"]["CROOperationUndelegate"] | components["schemas"]["CROOperationRedelegate"] | components["schemas"]["CROOperationWithdrawRewards"] | components["schemas"]["CROOperationGrant"] | components["schemas"]["CROOperationExec"] | components["schemas"]["CROOperationContract"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCroNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CRONetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCroReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["CRODelegatorsParam"];
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["CROValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCroGetBalance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Account to query */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["CROGetBalancePayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            /**
                             * @description The balance of the account
                             * @example 1000000
                             */
                            amount: string;
                            /**
                             * @description The denomination of the balance
                             * @example basecro
                             */
                            denom: string;
                        };
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCroStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["CROCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CROStakeUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCroWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["CROCraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CROUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCroRestakeRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["CROCraftRestakeRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CROUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCroUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["CROCraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CROUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCroRedelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["CROCraftRedelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CROUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCroPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["CROPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CROSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCroBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["CROBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CROTxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCroSendTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["CROCraftSendTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CROUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCroTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CROTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCroTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CROTxDecoding"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOmStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["OMValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["OMDelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["OMPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOmStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostOMStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOmRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["OMValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["OMDelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["OMPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOmOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["OMValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["OMDelegatorsParam"];
                /** @description whether or not the operation returned will include authz operations, defaults to false */
                authz?: components["parameters"]["OMAuthzFlagParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["OMPrecisionParam"];
                /** @description whether or not the operation returned will include wasm operations, defaults to false */
                wasm?: components["parameters"]["OMWasmFlagParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["OMOperationDelegate"] | components["schemas"]["OMOperationUndelegate"] | components["schemas"]["OMOperationRedelegate"] | components["schemas"]["OMOperationWithdrawRewards"] | components["schemas"]["OMOperationGrant"] | components["schemas"]["OMOperationExec"] | components["schemas"]["OMOperationContract"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOmNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOmReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["OMDelegatorsParam"];
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["OMValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOmGetBalance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Account to query */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OMGetBalancePayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            /**
                             * @description The balance of the account
                             * @example 1000000
                             */
                            amount: string;
                            /**
                             * @description The denomination of the balance
                             * @example uOM
                             */
                            denom: string;
                        };
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOmStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OMCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMStakeUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOmWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OMCraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOmRestakeRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OMCraftRestakeRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOmUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OMCraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOmRedelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OMCraftRedelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOmPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OMPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOmBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OMBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMTxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOmSendTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OMCraftSendTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOmTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["OMTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOmTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["OMTxDecoding"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdaStakes: {
        parameters: {
            query?: {
                stake_addresses?: components["parameters"]["ADAStakeAddressesParam"];
                wallets?: components["parameters"]["ADAWalletsParam"];
                pool_ids?: components["parameters"]["ADAPoolIDsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Current page to look-up entries. Defaults to 1. If the number of entries returned is lesser than `page_size`, it means it's the last page and there are no more entries. */
                current_page?: components["parameters"]["ADAPaginationPageParam"];
                /** @description Number of entries to list per page. Defaults to `100`. specified */
                page_size?: components["parameters"]["ADAPaginationPageSizeParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ADAStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdaStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ADAPostStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdARewards: {
        parameters: {
            query?: {
                stake_addresses?: components["parameters"]["ADAStakeAddressesParam"];
                pool_ids?: components["parameters"]["ADAPoolIDsParam"];
                wallets?: components["parameters"]["ADAWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description The format of the response. Defaults to `daily` */
                format?: components["parameters"]["ADARewardsFormatParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description The epoch from which we want to fetch rewards. Must be used with `format=epoch` */
                start_epoch?: components["parameters"]["ADAStartEpochParam"];
                /** @description The epoch until which we want to fetch rewards. Must be used with `format=epoch` */
                end_epoch?: components["parameters"]["ADAEndEpochParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["ADARewardByDay"] | components["schemas"]["ADARewardByEpoch"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdaOperations: {
        parameters: {
            query?: {
                stake_addresses?: components["parameters"]["ADAStakeAddressesParam"];
                wallets?: components["parameters"]["ADAWalletsParam"];
                pool_ids?: components["parameters"]["ADAPoolIDsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["ADAOperationStakeRegistration"] | components["schemas"]["ADAOperationStakeDeregistration"] | components["schemas"]["ADAOperationDelegation"] | components["schemas"]["ADAOperationReward"] | components["schemas"]["ADAOperationWithdrawal"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdaReports: {
        parameters: {
            query?: {
                stake_addresses?: components["parameters"]["ADAStakeAddressesParam"];
                wallets?: components["parameters"]["ADAWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description The format of the response. Defaults to `daily` */
                format?: components["parameters"]["ADARewardsFormatParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdaNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ADANetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdaStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ADACraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ADAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdaWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ADACraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ADAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdaUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ADACraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ADAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdaPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ADAPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ADASignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdaBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ADABroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ADATxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdaTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ADATxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdaTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBbnStakes: {
        parameters: {
            query?: {
                wallets?: components["parameters"]["BBNWalletsParam"];
                tx_ids?: components["parameters"]["BBNTxIDsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["BBNStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postBbnStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["BBNPostStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postBbnStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["BBNCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["BBNUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postBbnBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["BBNBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["BBNTxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMaticStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["MATICWalletsParam"];
                /** @description Comma-separated list of validators' indexes */
                validator_indexes?: components["parameters"]["MATICValidatorIndexesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["MATICStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMaticStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["MATICPostStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMaticRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["MATICWalletsParam"];
                /** @description Comma-separated list of validators' indexes */
                validator_indexes?: components["parameters"]["MATICValidatorIndexesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["MATICReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMaticOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["MATICWalletsParam"];
                /** @description Comma-separated list of validators' indexes */
                validator_indexes?: components["parameters"]["MATICValidatorIndexesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["MATICOperationShareMinted"] | components["schemas"]["MATICOperationShareBurned"] | components["schemas"]["MATICOperationShareBurnedWithID"] | components["schemas"]["MATICOperationDelegatorRestaked"] | components["schemas"]["MATICOperationDelegatorUnstaked"] | components["schemas"]["MATICOperationDelegatorUnstakedWithID"] | components["schemas"]["MATICOperationDelegatorClaimedRewards"] | components["schemas"]["MATICOperationSharesTransfer"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMaticNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["MATICNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMaticReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators' indexes */
                validator_indexes?: components["parameters"]["MATICValidatorIndexesParam"];
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["MATICWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMaticApproveTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["MATICCraftApproveTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["MATICUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMaticBuyVoucherTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["MATICCraftBuyVoucherTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["MATICUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMaticSellVoucherTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["MATICCraftSellVoucherTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["MATICUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMaticUnstakeClaimTokensTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["MATICCraftUnstakeClaimTokensTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["MATICUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMaticWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["MATICCraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["MATICUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMaticRestakeRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["MATICCraftRestakeRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["MATICUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMaticPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["MATICPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["MATICSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMaticBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["MATICBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["MATICBroadcastedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMaticTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["MATICTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMaticTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPolStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["POLWalletsParam"];
                /** @description Comma-separated list of validators' indexes */
                validator_indexes?: components["parameters"]["POLValidatorIndexesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPolStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["POLPostStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPolRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["POLWalletsParam"];
                /** @description Comma-separated list of validators' indexes */
                validator_indexes?: components["parameters"]["POLValidatorIndexesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPolOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["POLWalletsParam"];
                /** @description Comma-separated list of validators' indexes */
                validator_indexes?: components["parameters"]["POLValidatorIndexesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["POLOperationShareMinted"] | components["schemas"]["POLOperationShareBurned"] | components["schemas"]["POLOperationShareBurnedWithID"] | components["schemas"]["POLOperationDelegatorRestaked"] | components["schemas"]["POLOperationDelegatorUnstaked"] | components["schemas"]["POLOperationDelegatorUnstakedWithID"] | components["schemas"]["POLOperationDelegatorClaimedRewards"] | components["schemas"]["POLOperationSharesTransfer"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPolNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPolReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators' indexes */
                validator_indexes?: components["parameters"]["POLValidatorIndexesParam"];
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["POLWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPolApproveTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["POLCraftApproveTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPolBuyVoucherTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["POLCraftBuyVoucherTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPolSellVoucherTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["POLCraftSellVoucherTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPolUnstakeClaimTokensTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["POLCraftUnstakeClaimTokensTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPolWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["POLCraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPolRestakeRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["POLCraftRestakeRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPolPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["POLPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPolBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["POLBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLBroadcastedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPolTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["POLTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPolTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNearStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of Kiln internal stake account ID */
                stake_accounts?: components["parameters"]["NEARStakeAccountsParam"];
                /** @description Comma-separated list of NEAR validator ID */
                validators?: components["parameters"]["NEARValidatorsParam"];
                /** @description Comma-separated list of NEAR account ID */
                wallets?: components["parameters"]["NEARWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["NEARStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNEARStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostNEARStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNearRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of Kiln internal stake account ID */
                stake_accounts?: components["parameters"]["NEARStakeAccountsParam"];
                /** @description Comma-separated list of NEAR validator ID */
                validators?: components["parameters"]["NEARValidatorsParam"];
                /** @description Comma-separated list of NEAR account ID */
                wallets?: components["parameters"]["NEARWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description The format of the response. Defaults to `daily` */
                format?: components["parameters"]["NEARRewardsFormatParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description The epoch from which we want to fetch rewards. Must be used with `format=epoch` */
                start_epoch?: components["parameters"]["NEARStartEpochParam"];
                /** @description The epoch until which we want to fetch rewards. Must be used with `format=epoch` */
                end_epoch?: components["parameters"]["NEAREndEpochParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["NEARRewardByDay"] | components["schemas"]["NEARRewardByEpoch"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNearOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of Kiln internal stake account ID */
                stake_accounts?: components["parameters"]["NEARStakeAccountsParam"];
                /** @description Comma-separated list of NEAR account ID */
                wallets?: components["parameters"]["NEARWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Hash of the transaction */
                tx_hash?: components["parameters"]["NEARTxHashParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["NEAROperation"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNEARReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of Kiln internal stake account ID */
                stake_accounts?: components["parameters"]["NEARStakeAccountsParam"];
                /** @description Comma-separated list of NEAR account ID */
                wallets?: components["parameters"]["NEARWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description The format of the response. Defaults to `daily` */
                format?: components["parameters"]["NEARRewardsFormatParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNEAREpochInfos: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["NEAREpochInfos"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNEARNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["NEARNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNEARStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["NEARStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["NEARTx"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNEARUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["NEARUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["NEARTx"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNEARWithdrawTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["NEARWithdrawTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["NEARTx"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNEARPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["NEARPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["NEARSignedTx"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNEARBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["NEARBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["NEARBroadcastedTx"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNearTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
                /** @description NEAR account ID */
                wallet: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["NEARTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNearTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        /**
                         * @description Decoded transaction
                         * @example {
                         *       "signerId": "373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e",
                         *       "publicKey": {
                         *         "keyType": 0,
                         *         "data": {
                         *           "0": 55,
                         *           "1": 60,
                         *           "2": 111,
                         *           "3": 142,
                         *           "4": 132,
                         *           "5": 198,
                         *           "6": 130,
                         *           "7": 42,
                         *           "8": 159,
                         *           "9": 135,
                         *           "10": 3,
                         *           "11": 95,
                         *           "12": 101,
                         *           "13": 204,
                         *           "14": 207,
                         *           "15": 137,
                         *           "16": 158,
                         *           "17": 239,
                         *           "18": 63,
                         *           "19": 205,
                         *           "20": 238,
                         *           "21": 97,
                         *           "22": 7,
                         *           "23": 112,
                         *           "24": 65,
                         *           "25": 169,
                         *           "26": 62,
                         *           "27": 24,
                         *           "28": 5,
                         *           "29": 186,
                         *           "30": 178,
                         *           "31": 78
                         *         }
                         *       },
                         *       "nonce": "5af5d11fa826",
                         *       "receiverId": "kiln.poolv1.near",
                         *       "blockHash": {
                         *         "0": 167,
                         *         "1": 84,
                         *         "2": 152,
                         *         "3": 238,
                         *         "4": 15,
                         *         "5": 237,
                         *         "6": 56,
                         *         "7": 108,
                         *         "8": 51,
                         *         "9": 53,
                         *         "10": 40,
                         *         "11": 95,
                         *         "12": 147,
                         *         "13": 70,
                         *         "14": 114,
                         *         "15": 179,
                         *         "16": 134,
                         *         "17": 238,
                         *         "18": 102,
                         *         "19": 50,
                         *         "20": 54,
                         *         "21": 47,
                         *         "22": 173,
                         *         "23": 43,
                         *         "24": 205,
                         *         "25": 95,
                         *         "26": 197,
                         *         "27": 147,
                         *         "28": 20,
                         *         "29": 149,
                         *         "30": 227,
                         *         "31": 131
                         *       },
                         *       "actions": [
                         *         {
                         *           "functionCall": {
                         *             "methodName": "deposit_and_stake",
                         *             "args": [
                         *               123,
                         *               125
                         *             ],
                         *             "gas": "0110d9316ec000",
                         *             "deposit": "152d02c7e14af6800000"
                         *           },
                         *           "enum": "functionCall"
                         *         }
                         *       ]
                         *     }
                         */
                        data: Record<string, never>;
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOsmoStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["OSMOValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["OSMODelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["OSMOPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OSMOStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOsmoStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostOSMOStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOsmoRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["OSMOValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["OSMODelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["OSMOPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OSMOReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOsmoOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["OSMOValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["OSMODelegatorsParam"];
                /** @description whether or not the operation returned will include authz operations, defaults to false */
                authz?: components["parameters"]["OSMOAuthzFlagParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["OSMOPrecisionParam"];
                /** @description whether or not the operation returned will include wasm operations, defaults to false */
                wasm?: components["parameters"]["OSMOWasmFlagParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["OSMOOperationDelegate"] | components["schemas"]["OSMOOperationUndelegate"] | components["schemas"]["OSMOOperationRedelegate"] | components["schemas"]["OSMOOperationWithdrawRewards"] | components["schemas"]["OSMOOperationGrant"] | components["schemas"]["OSMOOperationExec"] | components["schemas"]["OSMOOperationContract"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOsmoNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OSMONetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOsmoReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["OSMODelegatorsParam"];
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["OSMOValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOsmoStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OSMOCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OSMOUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOsmoWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OSMOCraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OSMOUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOsmoRestakeRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OSMOCraftRestakeRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OSMOUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOsmoUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OSMOCraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OSMOUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOsmoRedelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OSMOCraftRedelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OSMOUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOsmoPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OSMOPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OSMOSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postOsmoBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["OSMOBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["OSMOTxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOsmoTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["OSMOTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOsmoTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEgldStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["EGLDWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Comma-separated list of validator contract addresses */
                validators?: components["parameters"]["EGLDValidatorsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["EGLDStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEgldRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["EGLDWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Comma-separated list of validator contract addresses */
                validators?: components["parameters"]["EGLDValidatorsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["EGLDRewards"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEgldNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["EgldNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEgldOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["EGLDWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Comma-separated list of validator contract addresses */
                validators?: components["parameters"]["EGLDValidatorsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["EGLDOperations"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description UnauthorizedS */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEgldReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of wallets addresses */
                wallets?: components["parameters"]["EGLDWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Comma-separated list of validator contract addresses */
                validators?: components["parameters"]["EGLDValidatorsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDotStakes: {
        parameters: {
            query?: {
                addresses?: components["parameters"]["DOTAddressesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDotRewards: {
        parameters: {
            query?: {
                addresses?: components["parameters"]["DOTAddressesParam"];
                validators?: components["parameters"]["DOTValidatorsParam"];
                pool_ids?: components["parameters"]["DOTPoolIDsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description The format of the response. Defaults to `daily` */
                format?: components["parameters"]["DOTRewardsFormatParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["DOTRewardByDay"] | components["schemas"]["DOTRewardByEra"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDotOperations: {
        parameters: {
            query?: {
                addresses?: components["parameters"]["DOTAddressesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTOperationStaking"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDotReports: {
        parameters: {
            query?: {
                addresses?: components["parameters"]["DOTAddressesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDotNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotBondTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftBondTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotBondExtraTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftBondExtraTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotRebondTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftRebondTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotUnbondTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftUnbondTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotNominateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftNominateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotWithdrawUnbondedTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftWithdrawUnbondedTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotChillTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftChillTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotSetPayeeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftSetPayeeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotJoinPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftJoinPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotBondExtraToPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftBondExtraToPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotBondRewardsToPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftBondRewardsToPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotClaimPayoutFromPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftClaimPayoutFromPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotUnbondFromPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftUnbondFromPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotWithdrawUnbondedFromPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTCraftWithdrawUnbondedFromPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDotTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["DOTTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDotTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDotBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DOTBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DOTBroadcastedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKsmStakes: {
        parameters: {
            query?: {
                addresses?: components["parameters"]["KSMAddressesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKsmRewards: {
        parameters: {
            query?: {
                addresses?: components["parameters"]["KSMAddressesParam"];
                validators?: components["parameters"]["KSMValidatorsParam"];
                pool_ids?: components["parameters"]["KSMPoolIDsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description The format of the response. Defaults to `daily` */
                format?: components["parameters"]["KSMRewardsFormatParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["KSMRewardByDay"] | components["schemas"]["KSMRewardByEra"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKsmOperations: {
        parameters: {
            query?: {
                addresses?: components["parameters"]["KSMAddressesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMOperationStaking"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKsmReports: {
        parameters: {
            query?: {
                addresses?: components["parameters"]["KSMAddressesParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKsmNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmBondTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftBondTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmBondExtraTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftBondExtraTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmRebondTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftRebondTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmUnbondTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftUnbondTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmNominateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftNominateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmWithdrawUnbondedTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftWithdrawUnbondedTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmChillTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftChillTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmSetPayeeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftSetPayeeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmJoinPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftJoinPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmBondExtraToPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftBondExtraToPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmBondRewardsToPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftBondRewardsToPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmClaimPayoutFromPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftClaimPayoutFromPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmUnbondFromPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftUnbondFromPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmWithdrawUnbondedFromPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMCraftWithdrawUnbondedFromPoolTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKsmTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["KSMTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKsmTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKsmBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KSMBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KSMBroadcastedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getValidators: {
        parameters: {
            query?: {
                /** @description Network to get validators for (mainnet, testnet) */
                network?: "mainnet" | "testnet";
                /** @description Comma-separated list of protocol token symbol to filter by */
                protocols?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            validators: unknown[];
                        };
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDydxStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["DYDXValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["DYDXDelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["DYDXPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCelsdydxStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostDYDXStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDydxRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["DYDXValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["DYDXDelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["DYDXPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDydxOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["DYDXValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["DYDXDelegatorsParam"];
                /** @description whether or not the operation returned will include authz operations, defaults to false */
                authz?: components["parameters"]["DYDXAuthzFlagParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["DYDXPrecisionParam"];
                /** @description whether or not the operation returned will include wasm operations, defaults to false */
                wasm?: components["parameters"]["DYDXWasmFlagParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["DYDXOperationDelegate"] | components["schemas"]["DYDXOperationUndelegate"] | components["schemas"]["DYDXOperationRedelegate"] | components["schemas"]["DYDXOperationWithdrawRewards"] | components["schemas"]["DYDXOperationGrant"] | components["schemas"]["DYDXOperationExec"] | components["schemas"]["DYDXOperationContract"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDydxNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDydxReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["DYDXDelegatorsParam"];
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["DYDXValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDydxGetBalance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Account to query */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DYDXGetBalancePayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            /**
                             * @description The balance of the account
                             * @example 1000000
                             */
                            amount: string;
                            /**
                             * @description The denomination of the balance
                             * @example uusdc
                             */
                            denom: string;
                        };
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDydxStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DYDXCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDydxWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DYDXCraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDydxUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DYDXCraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDydxRedelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DYDXCraftRedelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDydxNobleIbcTransferTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DYDXCraftNobleIbcTransferTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDydxPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DYDXPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDydxBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DYDXBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXTxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDydxTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["DYDXTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDydxTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCelestiaStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["TIAValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["TIADelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["TIAPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TIAStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCelstiaStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostTIAStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCelestiaRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["TIAValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["TIADelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["TIAPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TIAReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCelestiaOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["TIAValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["TIADelegatorsParam"];
                /** @description whether or not the operation returned will include authz operations, defaults to false */
                authz?: components["parameters"]["TIAAuthzFlagParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["TIAPrecisionParam"];
                /** @description whether or not the operation returned will include wasm operations, defaults to false */
                wasm?: components["parameters"]["TIAWasmFlagParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["TIAOperationDelegate"] | components["schemas"]["TIAOperationUndelegate"] | components["schemas"]["TIAOperationRedelegate"] | components["schemas"]["TIAOperationWithdrawRewards"] | components["schemas"]["TIAOperationGrant"] | components["schemas"]["TIAOperationExec"] | components["schemas"]["TIAOperationContract"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCelestiaNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TIANetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCelestiaReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["TIADelegatorsParam"];
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["TIAValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiaStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TIACraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TIAStakeUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiaWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TIACraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TIAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiaRestakeRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TIACraftRestakeRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TIAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiaUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TIACraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TIAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiaRedelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TIACraftRedelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TIAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiaPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TIAPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TIASignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiaBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TIABroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TIATxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiaTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["TIATxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiaTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["TIATxDecoding"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getZetachainStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["ZETAValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["ZETADelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["ZETAPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ZETAStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postZetachainStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostZETAStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getZetachainRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["ZETAValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["ZETADelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["ZETAPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ZETAReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getZetachainOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["ZETAValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["ZETADelegatorsParam"];
                /** @description whether or not the operation returned will include authz operations, defaults to false */
                authz?: components["parameters"]["ZETAAuthzFlagParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["ZETAPrecisionParam"];
                /** @description whether or not the operation returned will include wasm operations, defaults to false */
                wasm?: components["parameters"]["ZETAWasmFlagParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["ZETAOperationDelegate"] | components["schemas"]["ZETAOperationUndelegate"] | components["schemas"]["ZETAOperationRedelegate"] | components["schemas"]["ZETAOperationWithdrawRewards"] | components["schemas"]["ZETAOperationGrant"] | components["schemas"]["ZETAOperationExec"] | components["schemas"]["ZETAOperationContract"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getZetachainNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ZETANetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getZetachainReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["ZETADelegatorsParam"];
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["ZETAValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postZetaGetBalance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Account to query */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ZETAGetBalancePayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            /**
                             * @description The balance of the account
                             * @example 1000000
                             */
                            amount: string;
                            /**
                             * @description The denomination of the balance
                             * @example azeta
                             */
                            denom: string;
                        };
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postZetaStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ZETACraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ZETAStakeUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postZetaSendTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ZETACraftSendTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ZETAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postZetaWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ZETACraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ZETAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postZetaUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ZETACraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ZETAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postZetaRedelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ZETACraftRedelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ZETAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postZetaPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ZETAPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ZETASignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postZetaBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["ZETABroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["ZETATxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getZetaTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ZETATxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getZetaTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["ZETATxDecoding"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKavaStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["KAVAValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["KAVADelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["KAVAPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVAStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKavaStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostKAVAStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKavaRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["KAVAValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["KAVADelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["KAVAPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVAReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKavaOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["KAVAValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["KAVADelegatorsParam"];
                /** @description whether or not the operation returned will include authz operations, defaults to false */
                authz?: components["parameters"]["KAVAAuthzFlagParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["KAVAPrecisionParam"];
                /** @description whether or not the operation returned will include wasm operations, defaults to false */
                wasm?: components["parameters"]["KAVAWasmFlagParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["KAVAOperationDelegate"] | components["schemas"]["KAVAOperationUndelegate"] | components["schemas"]["KAVAOperationRedelegate"] | components["schemas"]["KAVAOperationWithdrawRewards"] | components["schemas"]["KAVAOperationGrant"] | components["schemas"]["KAVAOperationExec"] | components["schemas"]["KAVAOperationContract"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKavaNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVANetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKavaReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["KAVADelegatorsParam"];
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["KAVAValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKavaGetBalance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Account to query */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KAVAGetBalancePayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            /**
                             * @description The balance of the account
                             * @example 1000000
                             */
                            amount: string;
                            /**
                             * @description The denomination of the balance
                             * @example ukava
                             */
                            denom: string;
                        };
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKavaStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KAVACraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVAStakeUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKavaWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KAVACraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKavaUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KAVACraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKavaRestakeRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KAVACraftRestakeRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKavaRedelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KAVACraftRedelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKavaPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KAVAPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVASignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKavaBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KAVABroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVATxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postKavaSendTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["KAVACraftSendTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["KAVAUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKavaTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["KAVATxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getKavaTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["KAVATxDecoding"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFetchStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["FETValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["FETDelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["FETPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFetchStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostFETStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFetchRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["FETValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["FETDelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["FETPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFetchOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["FETValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["FETDelegatorsParam"];
                /** @description whether or not the operation returned will include authz operations, defaults to false */
                authz?: components["parameters"]["FETAuthzFlagParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["FETPrecisionParam"];
                /** @description whether or not the operation returned will include wasm operations, defaults to false */
                wasm?: components["parameters"]["FETWasmFlagParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["FETOperationDelegate"] | components["schemas"]["FETOperationUndelegate"] | components["schemas"]["FETOperationRedelegate"] | components["schemas"]["FETOperationWithdrawRewards"] | components["schemas"]["FETOperationGrant"] | components["schemas"]["FETOperationExec"] | components["schemas"]["FETOperationContract"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFetchNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFetchReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["FETDelegatorsParam"];
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["FETValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFetGetBalance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Account to query */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["FETGetBalancePayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            /**
                             * @description The balance of the account
                             * @example 1000000
                             */
                            amount: string;
                            /**
                             * @description The denomination of the balance
                             * @example afet
                             */
                            denom: string;
                        };
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFetchStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["FETCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETStakeUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFetchWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["FETCraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFetchRestakeRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["FETCraftRestakeRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFetchUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["FETCraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFetchSendTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["FETCraftSendTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFetchRedelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["FETCraftRedelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFetchPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["FETPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFetchBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["FETBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["FETTxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFetchTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["FETTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFetchTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["FETTxDecoding"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInjStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["INJValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["INJDelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["INJPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["INJStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postInjStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["PostINJStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInjRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["INJValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["INJDelegatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["INJPrecisionParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["INJReward"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInjOperations: {
        parameters: {
            query?: {
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["INJValidatorsParam"];
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["INJDelegatorsParam"];
                /** @description whether or not the operation returned will include authz operations, defaults to false */
                authz?: components["parameters"]["INJAuthzFlagParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Precision to use when formatting amounts */
                precision?: components["parameters"]["INJPrecisionParam"];
                /** @description whether or not the operation returned will include wasm operations, defaults to false */
                wasm?: components["parameters"]["INJWasmFlagParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: (components["schemas"]["INJOperationDelegate"] | components["schemas"]["INJOperationUndelegate"] | components["schemas"]["INJOperationRedelegate"] | components["schemas"]["INJOperationWithdrawRewards"] | components["schemas"]["INJOperationGrant"] | components["schemas"]["INJOperationExec"] | components["schemas"]["INJOperationContract"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInjNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["INJNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInjReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of delegator addresses, these addresses
                 *     are matched with the corresponding validator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                delegators?: components["parameters"]["INJDelegatorsParam"];
                /** @description Comma-separated list of validators addresses, these addresses
                 *     are matched with the corresponding delegator addresses. To
                 *     fetch a specific stake, pass your wallet address and the
                 *     validator address as parameters.
                 *      */
                validators?: components["parameters"]["INJValidatorsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postInjStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["INJCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["INJStakeUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postInjWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["INJCraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["INJUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postInjUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["INJCraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["INJUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postInjRedelegateTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["INJCraftRedelegateTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["INJUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postInjPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["INJPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["INJSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postInjBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["INJBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["INJTxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInjTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["INJTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInjTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["INJTxDecoding"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTonStakes: {
        parameters: {
            query?: {
                /** @description Comma-separated list of nominator addresses */
                nominators?: components["parameters"]["TONNominatorsParam"];
                /** @description Comma-separated list of pool addresses */
                pools?: components["parameters"]["TONPoolsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTonStakes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stakes to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TONPostStakesPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["CoreStake"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTonRewards: {
        parameters: {
            query?: {
                /** @description Comma-separated list of nominator addresses */
                nominators?: components["parameters"]["TONNominatorsParam"];
                /** @description Comma-separated list of pool addresses */
                pools?: components["parameters"]["TONPoolsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
                /** @description Get data from this date (YYYY-MM-DD) */
                start_date?: components["parameters"]["StartDateParam"];
                /** @description The format of the response. Defaults to `daily` */
                format?: components["parameters"]["TONRewardsFormatParam"];
                /** @description Get data to this date (YYYY-MM-DD) */
                end_date?: components["parameters"]["EndDateParam"];
                /** @description Include rewards and balance in USD in response. <br/> If a `format` parameter exists it will only work with `format=daily` */
                include_usd?: components["parameters"]["IncludeUSDParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: (components["schemas"]["TONRewardByDay"] | components["schemas"]["TONRewardByEpoch"])[];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTonNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTonReports: {
        parameters: {
            query?: {
                /** @description Comma-separated list of nominator addresses */
                nominators?: components["parameters"]["TONNominatorsParam"];
                /** @description Comma-separated list of pool addresses */
                pools?: components["parameters"]["TONPoolsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTonWalletInfo: {
        parameters: {
            query: {
                /** @description Wallet address */
                wallet: components["parameters"]["TONGetWalletInfoParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONWalletInfo"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTonVestingContractOwner: {
        parameters: {
            query: {
                /** @description Vesting contract address */
                vesting_contract_address: components["parameters"]["TONGetVestingContractOwnerParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            /**
                             * @description Owner address of the vesting contract
                             * @example EQAfjn5-4M5H7q_2z4rCjAIGDslZoT0VsZNWaQ9BIaR4wxi4
                             */
                            address: string;
                        };
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTonSingleNominatorContractOwner: {
        parameters: {
            query: {
                /** @description Single nominator contract address */
                single_nominator_contract_address: components["parameters"]["TONGetSingleNominatorContractOwnerParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            /**
                             * @description Owner address of the single nominator contract
                             * @example EQAfjn5-4M5H7q_2z4rCjAIGDslZoT0VsZNWaQ9BIaR4wxi4
                             */
                            address: string;
                        };
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTonGetBalance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Account to query */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TONGetBalancePayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            /**
                             * @description The balance of the account
                             * @example 1000000
                             */
                            amount: string;
                            /**
                             * @description The denomination of the balance
                             * @example nanoton
                             */
                            denom: string;
                        };
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTonWithdrawRequest: {
        parameters: {
            query: {
                /** @description Pool address */
                pool: components["parameters"]["TONPoolParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["TONWithdrawRequest"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTonWithdrawRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Withdraw request to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TONWithdrawRequestPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["TONWithdrawRequest"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTonWithdrawRequest: {
        parameters: {
            query: {
                /** @description Pool address */
                pool: components["parameters"]["TONPoolParam"];
                /** @description Transaction hash */
                tx_hash?: components["parameters"]["TONTxHashParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTonPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to sign */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TONPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONPreparedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTonBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Signed transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TONBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONBroadcastTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTonTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the message */
                msg_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTonStakeSingleNominationPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stake transaction to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TONStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTonStakeWhalesPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stake transaction to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TONStakeTonWhalesTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTonUnstakeSingleNominationPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Unstake transaction to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TONUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTonUnstakeWhalesPoolTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Unstake transaction to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TONUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTonWhitelistVestingContractTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Whitelist transaction to create */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TONWhitelistTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TONTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNobleGetBalance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Account to query */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["NOBLEGetBalancePayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: {
                            /**
                             * @description The balance of the account
                             * @example 1000000
                             */
                            amount: string;
                            /**
                             * @description The denomination of the balance
                             * @example uusdc
                             */
                            denom: string;
                        };
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNobleBurnUsdcTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction payload */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["NOBLEBurnUsdcPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNobleOsmoIbcTransferTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction payload */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["NOBLEOsmoIbcTransferPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNoblePrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DYDXPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXSignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postNobleBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["DYDXBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["DYDXTxHash"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNobleTxStatus: {
        parameters: {
            query: {
                /** @description Hash of the transaction */
                tx_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data?: components["schemas"]["DYDXTxStatus"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNobleTxDecoding: {
        parameters: {
            query: {
                /** @description Raw transaction to decode */
                tx_serialized: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": Record<string, never>;
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTrxNetworkStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TRXNetworkStats"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTrxStakes: {
        parameters: {
            query?: {
                wallets?: components["parameters"]["TRXWalletsParam"];
                /** @description Comma-separated list of Kiln accounts identifiers */
                accounts?: components["parameters"]["AccountsParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TRXStake"][];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTrxStakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TRXCraftStakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TRXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTrxUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TRXCraftUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TRXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTrxCancelUnstakeTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TRXCraftCancelUnstakeTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TRXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTrxWithdrawUnstakedTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TRXCraftWithdrawUnstakedTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TRXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTrxVoteTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TRXCraftVoteTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TRXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTrxWithdrawRewardsTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to craft */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TRXCraftWithdrawRewardsTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TRXUnsignedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTrxPrepareTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to prepare */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TRXPrepareTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TRXPreparedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTrxBroadcastTx: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction to broadcast */
        requestBody: {
            content: {
                "application/json; charset=utf-8": components["schemas"]["TRXBroadcastTxPayload"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": {
                        data: components["schemas"]["TRXBroadcastedTx"];
                    };
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
